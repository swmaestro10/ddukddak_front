{"ast":null,"code":"import Blockly from 'node-blockly/browser'; // Category : Data\n\nconst trainData = {\n  name: 'TrainData',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 데이터 %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NUM'\n        }],\n        output: 'String',\n        colour: 210,\n        tooltip: 'TrainData'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('NUM'), \"'\") || '\\'\\'';\n    const code = \"training_num=\".concat(message, \" \");\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  }\n};\nconst testData = {\n  name: 'TestData',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '테스트 데이터 %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NUM'\n        }],\n        output: 'String',\n        colour: 220,\n        tooltip: 'TestData'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('NUM'), \"'\") || '\\'\\'';\n    const code = \"test_num=\".concat(message, \" \");\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  }\n}; // Category : Training\n\nconst learningRate = {\n  name: 'LearningRate',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 속도 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"느리게\", \"500\"], [\"보통\", \"1000\"], [\"빠르게\", \"2000\"]]\n        }],\n        output: 'String',\n        colour: 110,\n        tooltip: 'LearningRate'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"learning_rate = \".concat(message, \" \");\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  }\n};\nconst epochs = {\n  name: 'Epochs',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '복습 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"한다\", \"2\"], [\"안한다\", \"1\"]]\n        }],\n        output: 'String',\n        colour: 120,\n        tooltip: 'Epochs'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"num_epochs = \".concat(message, \" \");\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  }\n}; // model\n\nconst model = {\n  name: 'Model',\n  category: 'Model',\n  block: {\n    init: function () {\n      this.appendValueInput('train').appendField('Train_Set');\n      this.appendValueInput('test').appendField('Test_Set');\n      this.appendValueInput('rate').appendField('LearningRate');\n      this.appendValueInput('epoch').appendField('Epochs');\n      this.setOutput(true);\n      this.setColour(50);\n      this.setTooltip('Model');\n    }\n  },\n  generator: block => {\n    const train = \"\".concat(Blockly.JavaScript.valueToCode(block, 'train', Blockly.JavaScript.ORDER_ATOMIC) || '');\n    const test = \"\".concat(Blockly.JavaScript.valueToCode(block, 'test', Blockly.JavaScript.ORDER_ATOMIC) || '');\n    const rate = \"\".concat(Blockly.JavaScript.valueToCode(block, 'rate', Blockly.JavaScript.ORDER_ATOMIC) || '');\n    const epoch = \"\".concat(Blockly.JavaScript.valueToCode(block, 'epoch', Blockly.JavaScript.ORDER_ATOMIC) || '');\n    const code = \"\".concat(train, \";\").concat(test, \";\").concat(rate, \";\").concat(epoch, \";\");\n    console.log(code);\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  }\n}; // Category : Layer\n\nconst Layer = {\n  name: 'Layer',\n  category: 'modelLayer',\n  block: {\n    init: function () {\n      this.appendValueInput(\"SELECT\").appendField(new Blockly.FieldDropdown([[\"A\", \"nn_ReLU\"], [\"B\", \"nn_LogSigmoid\"]]), \"SELECT\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(165);\n      this.setTooltip(\"Layer\");\n    }\n  },\n  generator: block => {\n    const message = \"\".concat(block.getFieldValue('SELECT'));\n    const code = \"'\".concat(message, \"'\");\n    console.log(code);\n    return code;\n  }\n};\nconst modelLayer = {\n  name: 'modelLayer',\n  category: 'modelLayer',\n  block: {\n    init: function () {\n      this.appendStatementInput('DO').appendField('do');\n      this.setPreviousStatement(true);\n      this.setTooltip('modelLayer');\n    }\n  },\n  generator: block => {\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g, '\\'block_id_' + block.id + '\\'') + branch;\n    }\n\n    return branch;\n  }\n};\nconst Layer2 = {\n  name: 'Layer2',\n  category: 'modelLayer',\n  block: {\n    init: function () {\n      this.appendValueInput('train').appendField(\"Layer\");\n      this.setPreviousStatement(true);\n      this.setNextStatement(true);\n      this.setTooltip('Layer2');\n    }\n  },\n  generator: block => {\n    var test = block.getFieldValue('train');\n    return 'Layer ' + test;\n  }\n};\nconst blocks = [model, trainData, testData, Layer, Layer2, modelLayer, learningRate, epochs];\nexport { blocks };","map":{"version":3,"sources":["/home/codeup/ddukddak/ddukddak_front/ddukddak/src/container/blocks.js"],"names":["Blockly","trainData","name","category","block","init","jsonInit","message0","args0","type","output","colour","tooltip","generator","message","getFieldValue","code","JavaScript","ORDER_ATOMIC","testData","learningRate","options","epochs","model","appendValueInput","appendField","setOutput","setColour","setTooltip","train","valueToCode","test","rate","epoch","console","log","Layer","FieldDropdown","setPreviousStatement","setNextStatement","modelLayer","appendStatementInput","branch","statementToCode","INFINITE_LOOP_TRAP","replace","id","Layer2","blocks"],"mappings":"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","sourcesContent":["import Blockly from 'node-blockly/browser';\n\n// Category : Data\nconst trainData = {\n\tname : 'TrainData',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 데이터 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype: 'field_input',\n\t\t\t\t\tname: 'NUM',\n\t\t\t\t},],\n\t\t\t\toutput: 'String',\n\t\t\t\tcolour: 210,\n\t\t\t\ttooltip: 'TrainData',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('NUM')}'` || '\\'\\'';\n\t\tconst code = `training_num=${message} `;\n\t\treturn [code, Blockly.JavaScript.ORDER_ATOMIC];\n\t},\n};\nconst testData = {\n\tname : 'TestData',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '테스트 데이터 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype: 'field_input',\n\t\t\t\t\tname: 'NUM',\n\t\t\t\t},],\n\t\t\t\toutput: 'String',\n\t\t\t\tcolour: 220,\n\t\t\t\ttooltip: 'TestData',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('NUM')}'` || '\\'\\'';\n\t\tconst code = `test_num=${message} `;\n\t\treturn [code, Blockly.JavaScript.ORDER_ATOMIC];\n\t},\n};\n\n// Category : Training\nconst learningRate = {\n\tname : 'LearningRate',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 속도 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"느리게\",\"500\"],\n\t\t\t\t\t\t[\"보통\",\"1000\"],\n\t\t\t\t\t\t[\"빠르게\",\"2000\"]\n\t\t\t\t\t],\n\t\t\t\t},],\n\t\t\t\toutput: 'String',\n\t\t\t\tcolour : 110,\n\t\t\t\ttooltip : 'LearningRate',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `learning_rate = ${message} `;\n\t\treturn [code, Blockly.JavaScript.ORDER_ATOMIC];\n\t},\n};\nconst epochs = {\n\tname : 'Epochs',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '복습 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"한다\",\"2\"],\n\t\t\t\t\t\t[\"안한다\",\"1\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\toutput: 'String',\n\t\t\t\tcolour : 120,\n\t\t\t\ttooltip : 'Epochs',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `num_epochs = ${message} `;\n\t\treturn [code, Blockly.JavaScript.ORDER_ATOMIC];\n\t},\n};\n// model\nconst model = {\n\tname : 'Model',\n\tcategory : 'Model',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.appendValueInput('train').appendField('Train_Set');\n\t\t\tthis.appendValueInput('test').appendField('Test_Set');\n\t\t\tthis.appendValueInput('rate').appendField('LearningRate');\n\t\t\tthis.appendValueInput('epoch').appendField('Epochs');\n\t\t\tthis.setOutput(true);\n\t\t\tthis.setColour(50);\n\t\t\tthis.setTooltip('Model');\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst train = `${Blockly.JavaScript.valueToCode(block, 'train', Blockly.JavaScript.ORDER_ATOMIC) || ''}`;\n\t\tconst test =  `${Blockly.JavaScript.valueToCode(block, 'test', Blockly.JavaScript.ORDER_ATOMIC) || ''}`;\n\t\tconst rate = `${Blockly.JavaScript.valueToCode(block, 'rate', Blockly.JavaScript.ORDER_ATOMIC) || ''}`;\n\t\tconst epoch =  `${Blockly.JavaScript.valueToCode(block, 'epoch', Blockly.JavaScript.ORDER_ATOMIC) || ''}`;\n\t\tconst code = `${train};${test};${rate};${epoch};`;\n\t\tconsole.log(code);\n\t\treturn [code, Blockly.JavaScript.ORDER_ATOMIC];\n\t},\n};\n// Category : Layer\nconst Layer = {\n\tname : 'Layer',\n\tcategory : 'modelLayer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.appendValueInput(\"SELECT\").appendField(new Blockly.FieldDropdown([[\"A\",\"nn_ReLU\"], [\"B\",\"nn_LogSigmoid\"]]), \"SELECT\");\n\t\t\tthis.setPreviousStatement(true, null);\n    \t\t\tthis.setNextStatement(true, null);\n    \t\t\tthis.setColour(165);\n \t\t\tthis.setTooltip(\"Layer\");\n\t\t}\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `${block.getFieldValue('SELECT')}`;\n\t\tconst code = `'${message}'`;\n\t\tconsole.log(code);\n\t\treturn code;\n\t},\n};\n\n\nconst modelLayer =  {\n  name: 'modelLayer',\n  category: 'modelLayer',\n  block: {\n    init: function () {\n      this.appendStatementInput('DO')\n          .appendField('do');\n      this.setPreviousStatement(true);\n      this.setTooltip('modelLayer');\n    },\n  },\n  generator: (block) => {\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n    if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\n      branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g,\n          '\\'block_id_' + block.id + '\\'') + branch;\n    }\n    return branch;\n  },\n};\nconst Layer2 =  {\n  name: 'Layer2',\n  category: 'modelLayer',\n  block: {\n    init: function () {\n      this.appendValueInput('train').appendField(\"Layer\");\n      this.setPreviousStatement(true);\n      this.setNextStatement(true);\n      this.setTooltip('Layer2');\n    },\n  },\n  generator: (block) => {\n    var test = block.getFieldValue('train');\n    return 'Layer ' + test;\n  },\n};\n\n\n\nconst blocks =[\n\tmodel,\n\ttrainData, \n\ttestData,\n\tLayer,\n\tLayer2,\n\tmodelLayer,\n\tlearningRate,\n\tepochs\n];\nexport {\n\tblocks\n};\n"]},"metadata":{},"sourceType":"module"}