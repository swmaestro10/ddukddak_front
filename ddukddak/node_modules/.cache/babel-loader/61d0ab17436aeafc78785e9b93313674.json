{"ast":null,"code":"module.exports = function (Blockly) {\n  // Do not edit this file; automatically generated by build.py.\n  'use strict';\n\n  Blockly.Lua = new Blockly.Generator(\"Lua\");\n  Blockly.Lua.addReservedWords(\"_,__inext,assert,bit,colors,colours,coroutine,disk,dofile,error,fs,fetfenv,getmetatable,gps,help,io,ipairs,keys,loadfile,loadstring,math,native,next,os,paintutils,pairs,parallel,pcall,peripheral,print,printError,rawequal,rawget,rawset,read,rednet,redstone,rs,select,setfenv,setmetatable,sleep,string,table,term,textutils,tonumber,tostring,turtle,type,unpack,vector,write,xpcall,_VERSION,__indext,HTTP,and,break,do,else,elseif,end,false,for,function,if,in,local,nil,not,or,repeat,return,then,true,until,while,add,sub,mul,div,mod,pow,unm,concat,len,eq,lt,le,index,newindex,call,assert,collectgarbage,dofile,error,_G,getmetatable,inpairs,load,loadfile,next,pairs,pcall,print,rawequal,rawget,rawlen,rawset,select,setmetatable,tonumber,tostring,type,_VERSION,xpcall,require,package,string,table,math,bit32,io,file,os,debug\");\n  Blockly.Lua.ORDER_ATOMIC = 0;\n  Blockly.Lua.ORDER_HIGH = 1;\n  Blockly.Lua.ORDER_EXPONENTIATION = 2;\n  Blockly.Lua.ORDER_UNARY = 3;\n  Blockly.Lua.ORDER_MULTIPLICATIVE = 4;\n  Blockly.Lua.ORDER_ADDITIVE = 5;\n  Blockly.Lua.ORDER_CONCATENATION = 6;\n  Blockly.Lua.ORDER_RELATIONAL = 7;\n  Blockly.Lua.ORDER_AND = 8;\n  Blockly.Lua.ORDER_OR = 9;\n  Blockly.Lua.ORDER_NONE = 99;\n\n  Blockly.Lua.init = function (a) {\n    Blockly.Lua.definitions_ = Object.create(null);\n    Blockly.Lua.functionNames_ = Object.create(null);\n    Blockly.Lua.variableDB_ ? Blockly.Lua.variableDB_.reset() : Blockly.Lua.variableDB_ = new Blockly.Names(Blockly.Lua.RESERVED_WORDS_);\n    Blockly.Lua.variableDB_.setVariableMap(a.getVariableMap());\n  };\n\n  Blockly.Lua.finish = function (a) {\n    var b = [],\n        c;\n\n    for (c in Blockly.Lua.definitions_) b.push(Blockly.Lua.definitions_[c]);\n\n    delete Blockly.Lua.definitions_;\n    delete Blockly.Lua.functionNames_;\n    Blockly.Lua.variableDB_.reset();\n    return b.join(\"\\n\\n\") + \"\\n\\n\\n\" + a;\n  };\n\n  Blockly.Lua.scrubNakedValue = function (a) {\n    return \"local _ = \" + a + \"\\n\";\n  };\n\n  Blockly.Lua.quote_ = function (a) {\n    a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/'/g, \"\\\\'\");\n    return \"'\" + a + \"'\";\n  };\n\n  Blockly.Lua.scrub_ = function (a, b, c) {\n    var d = \"\";\n\n    if (!a.outputConnection || !a.outputConnection.targetConnection) {\n      var e = a.getCommentText();\n      (e = Blockly.utils.string.wrap(e, Blockly.Lua.COMMENT_WRAP - 3)) && (d += Blockly.Lua.prefixLines(e, \"-- \") + \"\\n\");\n\n      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.Lua.allNestedComments(e)) && (d += Blockly.Lua.prefixLines(e, \"-- \"));\n    }\n\n    a = a.nextConnection && a.nextConnection.targetBlock();\n    c = c ? \"\" : Blockly.Lua.blockToCode(a);\n    return d + b + c;\n  };\n\n  Blockly.Lua.colour = {};\n\n  Blockly.Lua.colour_picker = function (a) {\n    return [Blockly.Lua.quote_(a.getFieldValue(\"COLOUR\")), Blockly.Lua.ORDER_ATOMIC];\n  };\n\n  Blockly.Lua.colour_random = function (a) {\n    return ['string.format(\"#%06x\", math.random(0, 2^24 - 1))', Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.colour_rgb = function (a) {\n    var b = Blockly.Lua.provideFunction_(\"colour_rgb\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(r, g, b)\", \"  r = math.floor(math.min(100, math.max(0, r)) * 2.55 + .5)\", \"  g = math.floor(math.min(100, math.max(0, g)) * 2.55 + .5)\", \"  b = math.floor(math.min(100, math.max(0, b)) * 2.55 + .5)\", '  return string.format(\"#%02x%02x%02x\", r, g, b)', \"end\"]),\n        c = Blockly.Lua.valueToCode(a, \"RED\", Blockly.Lua.ORDER_NONE) || 0,\n        d = Blockly.Lua.valueToCode(a, \"GREEN\", Blockly.Lua.ORDER_NONE) || 0;\n    a = Blockly.Lua.valueToCode(a, \"BLUE\", Blockly.Lua.ORDER_NONE) || 0;\n    return [b + \"(\" + c + \", \" + d + \", \" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.colour_blend = function (a) {\n    var b = Blockly.Lua.provideFunction_(\"colour_blend\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(colour1, colour2, ratio)\", \"  local r1 = tonumber(string.sub(colour1, 2, 3), 16)\", \"  local r2 = tonumber(string.sub(colour2, 2, 3), 16)\", \"  local g1 = tonumber(string.sub(colour1, 4, 5), 16)\", \"  local g2 = tonumber(string.sub(colour2, 4, 5), 16)\", \"  local b1 = tonumber(string.sub(colour1, 6, 7), 16)\", \"  local b2 = tonumber(string.sub(colour2, 6, 7), 16)\", \"  local ratio = math.min(1, math.max(0, ratio))\", \"  local r = math.floor(r1 * (1 - ratio) + r2 * ratio + .5)\", \"  local g = math.floor(g1 * (1 - ratio) + g2 * ratio + .5)\", \"  local b = math.floor(b1 * (1 - ratio) + b2 * ratio + .5)\", '  return string.format(\"#%02x%02x%02x\", r, g, b)', \"end\"]),\n        c = Blockly.Lua.valueToCode(a, \"COLOUR1\", Blockly.Lua.ORDER_NONE) || \"'#000000'\",\n        d = Blockly.Lua.valueToCode(a, \"COLOUR2\", Blockly.Lua.ORDER_NONE) || \"'#000000'\";\n    a = Blockly.Lua.valueToCode(a, \"RATIO\", Blockly.Lua.ORDER_NONE) || 0;\n    return [b + \"(\" + c + \", \" + d + \", \" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.lists = {};\n\n  Blockly.Lua.lists_create_empty = function (a) {\n    return [\"{}\", Blockly.Lua.ORDER_ATOMIC];\n  };\n\n  Blockly.Lua.lists_create_with = function (a) {\n    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Lua.valueToCode(a, \"ADD\" + c, Blockly.Lua.ORDER_NONE) || \"None\";\n\n    return [\"{\" + b.join(\", \") + \"}\", Blockly.Lua.ORDER_ATOMIC];\n  };\n\n  Blockly.Lua.lists_repeat = function (a) {\n    var b = Blockly.Lua.provideFunction_(\"create_list_repeated\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(item, count)\", \"  local t = {}\", \"  for i = 1, count do\", \"    table.insert(t, item)\", \"  end\", \"  return t\", \"end\"]),\n        c = Blockly.Lua.valueToCode(a, \"ITEM\", Blockly.Lua.ORDER_NONE) || \"None\";\n    a = Blockly.Lua.valueToCode(a, \"NUM\", Blockly.Lua.ORDER_NONE) || \"0\";\n    return [b + \"(\" + c + \", \" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.lists_length = function (a) {\n    return [\"#\" + (Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_UNARY) || \"{}\"), Blockly.Lua.ORDER_UNARY];\n  };\n\n  Blockly.Lua.lists_isEmpty = function (a) {\n    return [\"#\" + (Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_UNARY) || \"{}\") + \" == 0\", Blockly.Lua.ORDER_RELATIONAL];\n  };\n\n  Blockly.Lua.lists_indexOf = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"FIND\", Blockly.Lua.ORDER_NONE) || \"''\",\n        c = Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_NONE) || \"{}\";\n    return [(\"FIRST\" == a.getFieldValue(\"END\") ? Blockly.Lua.provideFunction_(\"first_index\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t, elem)\", \"  for k, v in ipairs(t) do\", \"    if v == elem then\", \"      return k\", \"    end\", \"  end\", \"  return 0\", \"end\"]) : Blockly.Lua.provideFunction_(\"last_index\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t, elem)\", \"  for i = #t, 1, -1 do\", \"    if t[i] == elem then\", \"      return i\", \"    end\", \"  end\", \"  return 0\", \"end\"])) + \"(\" + c + \", \" + b + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.lists.getIndex_ = function (a, b, c) {\n    return \"FIRST\" == b ? \"1\" : \"FROM_END\" == b ? \"#\" + a + \" + 1 - \" + c : \"LAST\" == b ? \"#\" + a : \"RANDOM\" == b ? \"math.random(#\" + a + \")\" : c;\n  };\n\n  Blockly.Lua.lists_getIndex = function (a) {\n    var b = a.getFieldValue(\"MODE\") || \"GET\",\n        c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_HIGH) || \"{}\",\n        e = Blockly.Lua.lists.getIndex_;\n\n    if (\"LAST\" != c && \"FROM_END\" != c && \"RANDOM\" != c || d.match(/^\\w+$/)) {\n      f = \"GET\" == b && \"FROM_END\" == c ? Blockly.Lua.ORDER_ADDITIVE : Blockly.Lua.ORDER_NONE;\n      a = Blockly.Lua.valueToCode(a, \"AT\", f) || \"1\";\n      a = e(d, c, a);\n      if (\"GET\" == b) return [d + \"[\" + a + \"]\", Blockly.Lua.ORDER_HIGH];\n      c = \"table.remove(\" + d + \", \" + a + \")\";\n      return \"GET_REMOVE\" == b ? [c, Blockly.Lua.ORDER_HIGH] : c + \"\\n\";\n    }\n\n    if (\"REMOVE\" == b) {\n      var f = \"FROM_END\" == c ? Blockly.Lua.ORDER_ADDITIVE : Blockly.Lua.ORDER_NONE;\n      a = Blockly.Lua.valueToCode(a, \"AT\", f) || \"1\";\n      b = Blockly.Lua.variableDB_.getDistinctName(\"tmp_list\", Blockly.Variables.NAME_TYPE);\n      a = e(b, c, a);\n      return b + \" = \" + d + \"\\ntable.remove(\" + b + \", \" + a + \")\\n\";\n    }\n\n    a = Blockly.Lua.valueToCode(a, \"AT\", Blockly.Lua.ORDER_NONE) || \"1\";\n    return [(\"GET\" == b ? Blockly.Lua.provideFunction_(\"list_get_\" + c.toLowerCase(), [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t\" + (\"FROM_END\" == c || \"FROM_START\" == c ? \", at)\" : \")\"), \"  return t[\" + e(\"t\", c, \"at\") + \"]\", \"end\"]) : Blockly.Lua.provideFunction_(\"list_remove_\" + c.toLowerCase(), [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t\" + (\"FROM_END\" == c || \"FROM_START\" == c ? \", at)\" : \")\"), \"  return table.remove(t, \" + e(\"t\", c, \"at\") + \")\", \"end\"])) + \"(\" + d + (\"FROM_END\" == c || \"FROM_START\" == c ? \", \" + a : \"\") + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.lists_setIndex = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"LIST\", Blockly.Lua.ORDER_HIGH) || \"{}\",\n        c = a.getFieldValue(\"MODE\") || \"SET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        e = Blockly.Lua.valueToCode(a, \"AT\", Blockly.Lua.ORDER_ADDITIVE) || \"1\";\n    a = Blockly.Lua.valueToCode(a, \"TO\", Blockly.Lua.ORDER_NONE) || \"None\";\n    var f = Blockly.Lua.lists.getIndex_,\n        g = \"\";\n\n    if ((\"LAST\" == d || \"FROM_END\" == d || \"RANDOM\" == d) && !b.match(/^\\w+$/)) {\n      var h = Blockly.Lua.variableDB_.getDistinctName(\"tmp_list\", Blockly.Variables.NAME_TYPE);\n      g = h + \" = \" + b + \"\\n\";\n      b = h;\n    }\n\n    g = \"SET\" == c ? g + (b + \"[\" + f(b, d, e) + \"] = \" + a) : g + (\"table.insert(\" + b + \", \" + (f(b, d, e) + (\"LAST\" == d ? \" + 1\" : \"\")) + \", \" + a + \")\");\n    return g + \"\\n\";\n  };\n\n  Blockly.Lua.lists_getSublist = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"LIST\", Blockly.Lua.ORDER_NONE) || \"{}\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\"),\n        e = Blockly.Lua.valueToCode(a, \"AT1\", Blockly.Lua.ORDER_NONE) || \"1\";\n    a = Blockly.Lua.valueToCode(a, \"AT2\", Blockly.Lua.ORDER_NONE) || \"1\";\n    var f = Blockly.Lua.lists.getIndex_;\n    return [Blockly.Lua.provideFunction_(\"list_sublist_\" + c.toLowerCase() + \"_\" + d.toLowerCase(), [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(source\" + (\"FROM_END\" == c || \"FROM_START\" == c ? \", at1\" : \"\") + (\"FROM_END\" == d || \"FROM_START\" == d ? \", at2\" : \"\") + \")\", \"  local t = {}\", \"  local start = \" + f(\"source\", c, \"at1\"), \"  local finish = \" + f(\"source\", d, \"at2\"), \"  for i = start, finish do\", \"    table.insert(t, source[i])\", \"  end\", \"  return t\", \"end\"]) + \"(\" + b + (\"FROM_END\" == c || \"FROM_START\" == c ? \", \" + e : \"\") + (\"FROM_END\" == d || \"FROM_START\" == d ? \", \" + a : \"\") + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.lists_sort = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"LIST\", Blockly.Lua.ORDER_NONE) || \"{}\",\n        c = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n    a = a.getFieldValue(\"TYPE\");\n    return [Blockly.Lua.provideFunction_(\"list_sort\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(list, typev, direction)\", \"  local t = {}\", \"  for n,v in pairs(list) do table.insert(t, v) end\", \"  local compareFuncs = {\", \"    NUMERIC = function(a, b)\", \"      return (tonumber(tostring(a)) or 0)\", \"          < (tonumber(tostring(b)) or 0) end,\", \"    TEXT = function(a, b)\", \"      return tostring(a) < tostring(b) end,\", \"    IGNORE_CASE = function(a, b)\", \"      return string.lower(tostring(a)) < string.lower(tostring(b)) end\", \"  }\", \"  local compareTemp = compareFuncs[typev]\", \"  local compare = compareTemp\", \"  if direction == -1\", \"  then compare = function(a, b) return compareTemp(b, a) end\", \"  end\", \"  table.sort(t, compare)\", \"  return t\", \"end\"]) + \"(\" + b + ',\"' + a + '\", ' + c + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.lists_split = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"INPUT\", Blockly.Lua.ORDER_NONE),\n        c = Blockly.Lua.valueToCode(a, \"DELIM\", Blockly.Lua.ORDER_NONE) || \"''\";\n    a = a.getFieldValue(\"MODE\");\n    if (\"SPLIT\" == a) b || (b = \"''\"), a = Blockly.Lua.provideFunction_(\"list_string_split\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(input, delim)\", \"  local t = {}\", \"  local pos = 1\", \"  while true do\", \"    next_delim = string.find(input, delim, pos)\", \"    if next_delim == nil then\", \"      table.insert(t, string.sub(input, pos))\", \"      break\", \"    else\", \"      table.insert(t, string.sub(input, pos, next_delim-1))\", \"      pos = next_delim + #delim\", \"    end\", \"  end\", \"  return t\", \"end\"]);else if (\"JOIN\" == a) b || (b = \"{}\"), a = \"table.concat\";else throw Error(\"Unknown mode: \" + a);\n    return [a + \"(\" + b + \", \" + c + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.lists_reverse = function (a) {\n    a = Blockly.Lua.valueToCode(a, \"LIST\", Blockly.Lua.ORDER_NONE) || \"{}\";\n    Blockly.Lua.provideFunction_(\"list_reverse\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(input)\", \"  local reversed = {}\", \"  for i = #input, 1, -1 do\", \"    table.insert(reversed, input[i])\", \"  end\", \"  return reversed\", \"end\"]);\n    return [\"list_reverse(\" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.logic = {};\n\n  Blockly.Lua.controls_if = function (a) {\n    var b = 0,\n        c = \"\";\n    Blockly.Lua.STATEMENT_PREFIX && (c += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_PREFIX, a));\n\n    do {\n      var d = Blockly.Lua.valueToCode(a, \"IF\" + b, Blockly.Lua.ORDER_NONE) || \"false\";\n      var e = Blockly.Lua.statementToCode(a, \"DO\" + b);\n      Blockly.Lua.STATEMENT_SUFFIX && (e = Blockly.Lua.prefixLines(Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, a), Blockly.Lua.INDENT) + e);\n      c += (0 < b ? \"else\" : \"\") + \"if \" + d + \" then\\n\" + e;\n      ++b;\n    } while (a.getInput(\"IF\" + b));\n\n    if (a.getInput(\"ELSE\") || Blockly.Lua.STATEMENT_SUFFIX) e = Blockly.Lua.statementToCode(a, \"ELSE\"), Blockly.Lua.STATEMENT_SUFFIX && (e = Blockly.Lua.prefixLines(Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, a), Blockly.Lua.INDENT) + e), c += \"else\\n\" + e;\n    return c + \"end\\n\";\n  };\n\n  Blockly.Lua.controls_ifelse = Blockly.Lua.controls_if;\n\n  Blockly.Lua.logic_compare = function (a) {\n    var b = {\n      EQ: \"==\",\n      NEQ: \"~=\",\n      LT: \"<\",\n      LTE: \"<=\",\n      GT: \">\",\n      GTE: \">=\"\n    }[a.getFieldValue(\"OP\")],\n        c = Blockly.Lua.valueToCode(a, \"A\", Blockly.Lua.ORDER_RELATIONAL) || \"0\";\n    a = Blockly.Lua.valueToCode(a, \"B\", Blockly.Lua.ORDER_RELATIONAL) || \"0\";\n    return [c + \" \" + b + \" \" + a, Blockly.Lua.ORDER_RELATIONAL];\n  };\n\n  Blockly.Lua.logic_operation = function (a) {\n    var b = \"AND\" == a.getFieldValue(\"OP\") ? \"and\" : \"or\",\n        c = \"and\" == b ? Blockly.Lua.ORDER_AND : Blockly.Lua.ORDER_OR,\n        d = Blockly.Lua.valueToCode(a, \"A\", c);\n    a = Blockly.Lua.valueToCode(a, \"B\", c);\n\n    if (d || a) {\n      var e = \"and\" == b ? \"true\" : \"false\";\n      d || (d = e);\n      a || (a = e);\n    } else a = d = \"false\";\n\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.Lua.logic_negate = function (a) {\n    return [\"not \" + (Blockly.Lua.valueToCode(a, \"BOOL\", Blockly.Lua.ORDER_UNARY) || \"true\"), Blockly.Lua.ORDER_UNARY];\n  };\n\n  Blockly.Lua.logic_boolean = function (a) {\n    return [\"TRUE\" == a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", Blockly.Lua.ORDER_ATOMIC];\n  };\n\n  Blockly.Lua.logic_null = function (a) {\n    return [\"nil\", Blockly.Lua.ORDER_ATOMIC];\n  };\n\n  Blockly.Lua.logic_ternary = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"IF\", Blockly.Lua.ORDER_AND) || \"false\",\n        c = Blockly.Lua.valueToCode(a, \"THEN\", Blockly.Lua.ORDER_AND) || \"nil\";\n    a = Blockly.Lua.valueToCode(a, \"ELSE\", Blockly.Lua.ORDER_OR) || \"nil\";\n    return [b + \" and \" + c + \" or \" + a, Blockly.Lua.ORDER_OR];\n  };\n\n  Blockly.Lua.loops = {};\n  Blockly.Lua.CONTINUE_STATEMENT = \"goto continue\\n\";\n\n  Blockly.Lua.addContinueLabel_ = function (a) {\n    return -1 != a.indexOf(Blockly.Lua.CONTINUE_STATEMENT) ? a + Blockly.Lua.INDENT + \"::continue::\\n\" : a;\n  };\n\n  Blockly.Lua.controls_repeat_ext = function (a) {\n    var b = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : Blockly.Lua.valueToCode(a, \"TIMES\", Blockly.Lua.ORDER_NONE) || \"0\";\n    b = Blockly.isNumber(b) ? parseInt(b, 10) : \"math.floor(\" + b + \")\";\n    var c = Blockly.Lua.statementToCode(a, \"DO\");\n    c = Blockly.Lua.addLoopTrap(c, a);\n    c = Blockly.Lua.addContinueLabel_(c);\n    return \"for \" + Blockly.Lua.variableDB_.getDistinctName(\"count\", Blockly.Variables.NAME_TYPE) + \" = 1, \" + b + \" do\\n\" + c + \"end\\n\";\n  };\n\n  Blockly.Lua.controls_repeat = Blockly.Lua.controls_repeat_ext;\n\n  Blockly.Lua.controls_whileUntil = function (a) {\n    var b = \"UNTIL\" == a.getFieldValue(\"MODE\"),\n        c = Blockly.Lua.valueToCode(a, \"BOOL\", b ? Blockly.Lua.ORDER_UNARY : Blockly.Lua.ORDER_NONE) || \"false\",\n        d = Blockly.Lua.statementToCode(a, \"DO\");\n    d = Blockly.Lua.addLoopTrap(d, a);\n    d = Blockly.Lua.addContinueLabel_(d);\n    b && (c = \"not \" + c);\n    return \"while \" + c + \" do\\n\" + d + \"end\\n\";\n  };\n\n  Blockly.Lua.controls_for = function (a) {\n    var b = Blockly.Lua.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.Lua.valueToCode(a, \"FROM\", Blockly.Lua.ORDER_NONE) || \"0\",\n        d = Blockly.Lua.valueToCode(a, \"TO\", Blockly.Lua.ORDER_NONE) || \"0\",\n        e = Blockly.Lua.valueToCode(a, \"BY\", Blockly.Lua.ORDER_NONE) || \"1\",\n        f = Blockly.Lua.statementToCode(a, \"DO\");\n    f = Blockly.Lua.addLoopTrap(f, a);\n    f = Blockly.Lua.addContinueLabel_(f);\n    a = \"\";\n\n    if (Blockly.isNumber(c) && Blockly.isNumber(d) && Blockly.isNumber(e)) {\n      var g = parseFloat(c) <= parseFloat(d);\n      e = Math.abs(parseFloat(e));\n      g = (g ? \"\" : \"-\") + e;\n    } else a = \"\", g = Blockly.Lua.variableDB_.getDistinctName(b + \"_inc\", Blockly.Variables.NAME_TYPE), a += g + \" = \", a = Blockly.isNumber(e) ? a + (Math.abs(e) + \"\\n\") : a + (\"math.abs(\" + e + \")\\n\"), a = a + (\"if (\" + c + \") > (\" + d + \") then\\n\") + (Blockly.Lua.INDENT + g + \" = -\" + g + \"\\n\"), a += \"end\\n\";\n\n    return a + (\"for \" + b + \" = \" + c + \", \" + d + \", \" + g) + (\" do\\n\" + f + \"end\\n\");\n  };\n\n  Blockly.Lua.controls_forEach = function (a) {\n    var b = Blockly.Lua.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.Lua.valueToCode(a, \"LIST\", Blockly.Lua.ORDER_NONE) || \"{}\",\n        d = Blockly.Lua.statementToCode(a, \"DO\");\n    d = Blockly.Lua.addLoopTrap(d, a);\n    d = Blockly.Lua.addContinueLabel_(d);\n    return \"for _, \" + b + \" in ipairs(\" + c + \") do \\n\" + d + \"end\\n\";\n  };\n\n  Blockly.Lua.controls_flow_statements = function (a) {\n    var b = \"\";\n    Blockly.Lua.STATEMENT_PREFIX && (b += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_PREFIX, a));\n    Blockly.Lua.STATEMENT_SUFFIX && (b += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, a));\n\n    if (Blockly.Lua.STATEMENT_PREFIX) {\n      var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);\n      c && !c.suppressPrefixSuffix && (b += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_PREFIX, c));\n    }\n\n    switch (a.getFieldValue(\"FLOW\")) {\n      case \"BREAK\":\n        return b + \"break\\n\";\n\n      case \"CONTINUE\":\n        return b + Blockly.Lua.CONTINUE_STATEMENT;\n    }\n\n    throw Error(\"Unknown flow statement.\");\n  };\n\n  Blockly.Lua.math = {};\n\n  Blockly.Lua.math_number = function (a) {\n    a = parseFloat(a.getFieldValue(\"NUM\"));\n    return [a, 0 > a ? Blockly.Lua.ORDER_UNARY : Blockly.Lua.ORDER_ATOMIC];\n  };\n\n  Blockly.Lua.math_arithmetic = function (a) {\n    var b = {\n      ADD: [\" + \", Blockly.Lua.ORDER_ADDITIVE],\n      MINUS: [\" - \", Blockly.Lua.ORDER_ADDITIVE],\n      MULTIPLY: [\" * \", Blockly.Lua.ORDER_MULTIPLICATIVE],\n      DIVIDE: [\" / \", Blockly.Lua.ORDER_MULTIPLICATIVE],\n      POWER: [\" ^ \", Blockly.Lua.ORDER_EXPONENTIATION]\n    }[a.getFieldValue(\"OP\")],\n        c = b[0];\n    b = b[1];\n    var d = Blockly.Lua.valueToCode(a, \"A\", b) || \"0\";\n    a = Blockly.Lua.valueToCode(a, \"B\", b) || \"0\";\n    return [d + c + a, b];\n  };\n\n  Blockly.Lua.math_single = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    if (\"NEG\" == b) return a = Blockly.Lua.valueToCode(a, \"NUM\", Blockly.Lua.ORDER_UNARY) || \"0\", [\"-\" + a, Blockly.Lua.ORDER_UNARY];\n    if (\"POW10\" == b) return a = Blockly.Lua.valueToCode(a, \"NUM\", Blockly.Lua.ORDER_EXPONENTIATION) || \"0\", [\"10 ^ \" + a, Blockly.Lua.ORDER_EXPONENTIATION];\n    a = \"ROUND\" == b ? Blockly.Lua.valueToCode(a, \"NUM\", Blockly.Lua.ORDER_ADDITIVE) || \"0\" : Blockly.Lua.valueToCode(a, \"NUM\", Blockly.Lua.ORDER_NONE) || \"0\";\n\n    switch (b) {\n      case \"ABS\":\n        b = \"math.abs(\" + a + \")\";\n        break;\n\n      case \"ROOT\":\n        b = \"math.sqrt(\" + a + \")\";\n        break;\n\n      case \"LN\":\n        b = \"math.log(\" + a + \")\";\n        break;\n\n      case \"LOG10\":\n        b = \"math.log(\" + a + \", 10)\";\n        break;\n\n      case \"EXP\":\n        b = \"math.exp(\" + a + \")\";\n        break;\n\n      case \"ROUND\":\n        b = \"math.floor(\" + a + \" + .5)\";\n        break;\n\n      case \"ROUNDUP\":\n        b = \"math.ceil(\" + a + \")\";\n        break;\n\n      case \"ROUNDDOWN\":\n        b = \"math.floor(\" + a + \")\";\n        break;\n\n      case \"SIN\":\n        b = \"math.sin(math.rad(\" + a + \"))\";\n        break;\n\n      case \"COS\":\n        b = \"math.cos(math.rad(\" + a + \"))\";\n        break;\n\n      case \"TAN\":\n        b = \"math.tan(math.rad(\" + a + \"))\";\n        break;\n\n      case \"ASIN\":\n        b = \"math.deg(math.asin(\" + a + \"))\";\n        break;\n\n      case \"ACOS\":\n        b = \"math.deg(math.acos(\" + a + \"))\";\n        break;\n\n      case \"ATAN\":\n        b = \"math.deg(math.atan(\" + a + \"))\";\n        break;\n\n      default:\n        throw Error(\"Unknown math operator: \" + b);\n    }\n\n    return [b, Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.math_constant = function (a) {\n    return {\n      PI: [\"math.pi\", Blockly.Lua.ORDER_HIGH],\n      E: [\"math.exp(1)\", Blockly.Lua.ORDER_HIGH],\n      GOLDEN_RATIO: [\"(1 + math.sqrt(5)) / 2\", Blockly.Lua.ORDER_MULTIPLICATIVE],\n      SQRT2: [\"math.sqrt(2)\", Blockly.Lua.ORDER_HIGH],\n      SQRT1_2: [\"math.sqrt(1 / 2)\", Blockly.Lua.ORDER_HIGH],\n      INFINITY: [\"math.huge\", Blockly.Lua.ORDER_HIGH]\n    }[a.getFieldValue(\"CONSTANT\")];\n  };\n\n  Blockly.Lua.math_number_property = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"NUMBER_TO_CHECK\", Blockly.Lua.ORDER_MULTIPLICATIVE) || \"0\",\n        c = a.getFieldValue(\"PROPERTY\");\n    if (\"PRIME\" == c) return [Blockly.Lua.provideFunction_(\"math_isPrime\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(n)\", \"  -- https://en.wikipedia.org/wiki/Primality_test#Naive_methods\", \"  if n == 2 or n == 3 then\", \"    return true\", \"  end\", \"  -- False if n is NaN, negative, is 1, or not whole.\", \"  -- And false if n is divisible by 2 or 3.\", \"  if not(n > 1) or n % 1 ~= 0 or n % 2 == 0 or n % 3 == 0 then\", \"    return false\", \"  end\", \"  -- Check all the numbers of form 6k +/- 1, up to sqrt(n).\", \"  for x = 6, math.sqrt(n) + 1.5, 6 do\", \"    if n % (x - 1) == 0 or n % (x + 1) == 0 then\", \"      return false\", \"    end\", \"  end\", \"  return true\", \"end\"]) + \"(\" + b + \")\", Blockly.Lua.ORDER_HIGH];\n\n    switch (c) {\n      case \"EVEN\":\n        var d = b + \" % 2 == 0\";\n        break;\n\n      case \"ODD\":\n        d = b + \" % 2 == 1\";\n        break;\n\n      case \"WHOLE\":\n        d = b + \" % 1 == 0\";\n        break;\n\n      case \"POSITIVE\":\n        d = b + \" > 0\";\n        break;\n\n      case \"NEGATIVE\":\n        d = b + \" < 0\";\n        break;\n\n      case \"DIVISIBLE_BY\":\n        a = Blockly.Lua.valueToCode(a, \"DIVISOR\", Blockly.Lua.ORDER_MULTIPLICATIVE);\n        if (!a || \"0\" == a) return [\"nil\", Blockly.Lua.ORDER_ATOMIC];\n        d = b + \" % \" + a + \" == 0\";\n    }\n\n    return [d, Blockly.Lua.ORDER_RELATIONAL];\n  };\n\n  Blockly.Lua.math_change = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"DELTA\", Blockly.Lua.ORDER_ADDITIVE) || \"0\";\n    a = Blockly.Lua.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    return a + \" = \" + a + \" + \" + b + \"\\n\";\n  };\n\n  Blockly.Lua.math_round = Blockly.Lua.math_single;\n  Blockly.Lua.math_trig = Blockly.Lua.math_single;\n\n  Blockly.Lua.math_on_list = function (a) {\n    function b() {\n      return Blockly.Lua.provideFunction_(\"math_sum\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t)\", \"  local result = 0\", \"  for _, v in ipairs(t) do\", \"    result = result + v\", \"  end\", \"  return result\", \"end\"]);\n    }\n\n    var c = a.getFieldValue(\"OP\");\n    a = Blockly.Lua.valueToCode(a, \"LIST\", Blockly.Lua.ORDER_NONE) || \"{}\";\n\n    switch (c) {\n      case \"SUM\":\n        c = b();\n        break;\n\n      case \"MIN\":\n        c = Blockly.Lua.provideFunction_(\"math_min\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t)\", \"  if #t == 0 then\", \"    return 0\", \"  end\", \"  local result = math.huge\", \"  for _, v in ipairs(t) do\", \"    if v < result then\", \"      result = v\", \"    end\", \"  end\", \"  return result\", \"end\"]);\n        break;\n\n      case \"AVERAGE\":\n        c = Blockly.Lua.provideFunction_(\"math_average\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t)\", \"  if #t == 0 then\", \"    return 0\", \"  end\", \"  return \" + b() + \"(t) / #t\", \"end\"]);\n        break;\n\n      case \"MAX\":\n        c = Blockly.Lua.provideFunction_(\"math_max\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t)\", \"  if #t == 0 then\", \"    return 0\", \"  end\", \"  local result = -math.huge\", \"  for _, v in ipairs(t) do\", \"    if v > result then\", \"      result = v\", \"    end\", \"  end\", \"  return result\", \"end\"]);\n        break;\n\n      case \"MEDIAN\":\n        c = Blockly.Lua.provideFunction_(\"math_median\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t)\", \"  -- Source: http://lua-users.org/wiki/SimpleStats\", \"  if #t == 0 then\", \"    return 0\", \"  end\", \"  local temp={}\", \"  for _, v in ipairs(t) do\", '    if type(v) == \"number\" then', \"      table.insert(temp, v)\", \"    end\", \"  end\", \"  table.sort(temp)\", \"  if #temp % 2 == 0 then\", \"    return (temp[#temp/2] + temp[(#temp/2)+1]) / 2\", \"  else\", \"    return temp[math.ceil(#temp/2)]\", \"  end\", \"end\"]);\n        break;\n\n      case \"MODE\":\n        c = Blockly.Lua.provideFunction_(\"math_modes\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t)\", \"  -- Source: http://lua-users.org/wiki/SimpleStats\", \"  local counts={}\", \"  for _, v in ipairs(t) do\", \"    if counts[v] == nil then\", \"      counts[v] = 1\", \"    else\", \"      counts[v] = counts[v] + 1\", \"    end\", \"  end\", \"  local biggestCount = 0\", \"  for _, v  in pairs(counts) do\", \"    if v > biggestCount then\", \"      biggestCount = v\", \"    end\", \"  end\", \"  local temp={}\", \"  for k, v in pairs(counts) do\", \"    if v == biggestCount then\", \"      table.insert(temp, k)\", \"    end\", \"  end\", \"  return temp\", \"end\"]);\n        break;\n\n      case \"STD_DEV\":\n        c = Blockly.Lua.provideFunction_(\"math_standard_deviation\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t)\", \"  local m\", \"  local vm\", \"  local total = 0\", \"  local count = 0\", \"  local result\", \"  m = #t == 0 and 0 or \" + b() + \"(t) / #t\", \"  for _, v in ipairs(t) do\", \"    if type(v) == 'number' then\", \"      vm = v - m\", \"      total = total + (vm * vm)\", \"      count = count + 1\", \"    end\", \"  end\", \"  result = math.sqrt(total / (count-1))\", \"  return result\", \"end\"]);\n        break;\n\n      case \"RANDOM\":\n        c = Blockly.Lua.provideFunction_(\"math_random_list\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(t)\", \"  if #t == 0 then\", \"    return nil\", \"  end\", \"  return t[math.random(#t)]\", \"end\"]);\n        break;\n\n      default:\n        throw Error(\"Unknown operator: \" + c);\n    }\n\n    return [c + \"(\" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.math_modulo = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"DIVIDEND\", Blockly.Lua.ORDER_MULTIPLICATIVE) || \"0\";\n    a = Blockly.Lua.valueToCode(a, \"DIVISOR\", Blockly.Lua.ORDER_MULTIPLICATIVE) || \"0\";\n    return [b + \" % \" + a, Blockly.Lua.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Lua.math_constrain = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_NONE) || \"0\",\n        c = Blockly.Lua.valueToCode(a, \"LOW\", Blockly.Lua.ORDER_NONE) || \"-math.huge\";\n    a = Blockly.Lua.valueToCode(a, \"HIGH\", Blockly.Lua.ORDER_NONE) || \"math.huge\";\n    return [\"math.min(math.max(\" + b + \", \" + c + \"), \" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.math_random_int = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"FROM\", Blockly.Lua.ORDER_NONE) || \"0\";\n    a = Blockly.Lua.valueToCode(a, \"TO\", Blockly.Lua.ORDER_NONE) || \"0\";\n    return [\"math.random(\" + b + \", \" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.math_random_float = function (a) {\n    return [\"math.random()\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.math_atan2 = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"X\", Blockly.Lua.ORDER_NONE) || \"0\";\n    return [\"math.deg(math.atan2(\" + (Blockly.Lua.valueToCode(a, \"Y\", Blockly.Lua.ORDER_NONE) || \"0\") + \", \" + b + \"))\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.procedures = {};\n\n  Blockly.Lua.procedures_defreturn = function (a) {\n    var b = Blockly.Lua.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE),\n        c = \"\";\n    Blockly.Lua.STATEMENT_PREFIX && (c += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_PREFIX, a));\n    Blockly.Lua.STATEMENT_SUFFIX && (c += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, a));\n    c && (c = Blockly.Lua.prefixLines(c, Blockly.Lua.INDENT));\n    var d = \"\";\n    Blockly.Lua.INFINITE_LOOP_TRAP && (d = Blockly.Lua.prefixLines(Blockly.Lua.injectId(Blockly.Lua.INFINITE_LOOP_TRAP, a), Blockly.Lua.INDENT));\n    var e = Blockly.Lua.statementToCode(a, \"STACK\"),\n        f = Blockly.Lua.valueToCode(a, \"RETURN\", Blockly.Lua.ORDER_NONE) || \"\",\n        g = \"\";\n    e && f && (g = c);\n    f ? f = Blockly.Lua.INDENT + \"return \" + f + \"\\n\" : e || (e = \"\");\n\n    for (var h = [], k = 0; k < a.arguments_.length; k++) h[k] = Blockly.Lua.variableDB_.getName(a.arguments_[k], Blockly.Variables.NAME_TYPE);\n\n    c = \"function \" + b + \"(\" + h.join(\", \") + \")\\n\" + c + d + e + g + f + \"end\\n\";\n    c = Blockly.Lua.scrub_(a, c);\n    Blockly.Lua.definitions_[\"%\" + b] = c;\n    return null;\n  };\n\n  Blockly.Lua.procedures_defnoreturn = Blockly.Lua.procedures_defreturn;\n\n  Blockly.Lua.procedures_callreturn = function (a) {\n    for (var b = Blockly.Lua.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.Lua.valueToCode(a, \"ARG\" + d, Blockly.Lua.ORDER_NONE) || \"nil\";\n\n    return [b + \"(\" + c.join(\", \") + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.procedures_callnoreturn = function (a) {\n    return Blockly.Lua.procedures_callreturn(a)[0] + \"\\n\";\n  };\n\n  Blockly.Lua.procedures_ifreturn = function (a) {\n    var b = \"if \" + (Blockly.Lua.valueToCode(a, \"CONDITION\", Blockly.Lua.ORDER_NONE) || \"false\") + \" then\\n\";\n    Blockly.Lua.STATEMENT_SUFFIX && (b += Blockly.Lua.prefixLines(Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, a), Blockly.Lua.INDENT));\n    a.hasReturnValue_ ? (a = Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_NONE) || \"nil\", b += Blockly.Lua.INDENT + \"return \" + a + \"\\n\") : b += Blockly.Lua.INDENT + \"return\\n\";\n    return b + \"end\\n\";\n  };\n\n  Blockly.Lua.texts = {};\n\n  Blockly.Lua.text = function (a) {\n    return [Blockly.Lua.quote_(a.getFieldValue(\"TEXT\")), Blockly.Lua.ORDER_ATOMIC];\n  };\n\n  Blockly.Lua.text_join = function (a) {\n    if (0 == a.itemCount_) return [\"''\", Blockly.Lua.ORDER_ATOMIC];\n    if (1 == a.itemCount_) return [\"tostring(\" + (Blockly.Lua.valueToCode(a, \"ADD0\", Blockly.Lua.ORDER_NONE) || \"''\") + \")\", Blockly.Lua.ORDER_HIGH];\n\n    if (2 == a.itemCount_) {\n      var b = Blockly.Lua.valueToCode(a, \"ADD0\", Blockly.Lua.ORDER_CONCATENATION) || \"''\";\n      a = Blockly.Lua.valueToCode(a, \"ADD1\", Blockly.Lua.ORDER_CONCATENATION) || \"''\";\n      return [b + \" .. \" + a, Blockly.Lua.ORDER_CONCATENATION];\n    }\n\n    b = [];\n\n    for (var c = 0; c < a.itemCount_; c++) b[c] = Blockly.Lua.valueToCode(a, \"ADD\" + c, Blockly.Lua.ORDER_NONE) || \"''\";\n\n    a = \"table.concat({\" + b.join(\", \") + \"})\";\n    return [a, Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_append = function (a) {\n    var b = Blockly.Lua.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    a = Blockly.Lua.valueToCode(a, \"TEXT\", Blockly.Lua.ORDER_CONCATENATION) || \"''\";\n    return b + \" = \" + b + \" .. \" + a + \"\\n\";\n  };\n\n  Blockly.Lua.text_length = function (a) {\n    return [\"#\" + (Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_UNARY) || \"''\"), Blockly.Lua.ORDER_UNARY];\n  };\n\n  Blockly.Lua.text_isEmpty = function (a) {\n    return [\"#\" + (Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_UNARY) || \"''\") + \" == 0\", Blockly.Lua.ORDER_RELATIONAL];\n  };\n\n  Blockly.Lua.text_indexOf = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"FIND\", Blockly.Lua.ORDER_NONE) || \"''\",\n        c = Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_NONE) || \"''\";\n    return [(\"FIRST\" == a.getFieldValue(\"END\") ? Blockly.Lua.provideFunction_(\"firstIndexOf\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(str, substr) \", \"  local i = string.find(str, substr, 1, true)\", \"  if i == nil then\", \"    return 0\", \"  else\", \"    return i\", \"  end\", \"end\"]) : Blockly.Lua.provideFunction_(\"lastIndexOf\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(str, substr)\", \"  local i = string.find(string.reverse(str), string.reverse(substr), 1, true)\", \"  if i then\", \"    return #str + 2 - i - #substr\", \"  end\", \"  return 0\", \"end\"])) + \"(\" + c + \", \" + b + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_charAt = function (a) {\n    var b = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        c = Blockly.Lua.valueToCode(a, \"AT\", \"FROM_END\" == b ? Blockly.Lua.ORDER_UNARY : Blockly.Lua.ORDER_NONE) || \"1\";\n    a = Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_NONE) || \"''\";\n    if (\"RANDOM\" == b) b = Blockly.Lua.provideFunction_(\"text_random_letter\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(str)\", \"  local index = math.random(string.len(str))\", \"  return string.sub(str, index, index)\", \"end\"]), a = b + \"(\" + a + \")\";else {\n      if (\"FIRST\" == b) c = \"1\";else if (\"LAST\" == b) c = \"-1\";else if (\"FROM_START\" != b) if (\"FROM_END\" == b) c = \"-\" + c;else throw Error(\"Unhandled option (text_charAt).\");\n      c.match(/^-?\\w*$/) ? a = \"string.sub(\" + a + \", \" + c + \", \" + c + \")\" : (b = Blockly.Lua.provideFunction_(\"text_char_at\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(str, index)\", \"  return string.sub(str, index, index)\", \"end\"]), a = b + \"(\" + a + \", \" + c + \")\");\n    }\n    return [a, Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_getSubstring = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"STRING\", Blockly.Lua.ORDER_NONE) || \"''\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = Blockly.Lua.valueToCode(a, \"AT1\", \"FROM_END\" == c ? Blockly.Lua.ORDER_UNARY : Blockly.Lua.ORDER_NONE) || \"1\";\n    if (\"FIRST\" == c) c = 1;else if (\"FROM_START\" == c) c = d;else if (\"FROM_END\" == c) c = \"-\" + d;else throw Error(\"Unhandled option (text_getSubstring)\");\n    d = a.getFieldValue(\"WHERE2\");\n    a = Blockly.Lua.valueToCode(a, \"AT2\", \"FROM_END\" == d ? Blockly.Lua.ORDER_UNARY : Blockly.Lua.ORDER_NONE) || \"1\";\n    if (\"LAST\" == d) a = -1;else if (\"FROM_START\" != d) if (\"FROM_END\" == d) a = \"-\" + a;else throw Error(\"Unhandled option (text_getSubstring)\");\n    return [\"string.sub(\" + b + \", \" + c + \", \" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_changeCase = function (a) {\n    var b = a.getFieldValue(\"CASE\");\n    a = Blockly.Lua.valueToCode(a, \"TEXT\", Blockly.Lua.ORDER_NONE) || \"''\";\n    if (\"UPPERCASE\" == b) var c = \"string.upper\";else \"LOWERCASE\" == b ? c = \"string.lower\" : \"TITLECASE\" == b && (c = Blockly.Lua.provideFunction_(\"text_titlecase\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(str)\", \"  local buf = {}\", \"  local inWord = false\", \"  for i = 1, #str do\", \"    local c = string.sub(str, i, i)\", \"    if inWord then\", \"      table.insert(buf, string.lower(c))\", '      if string.find(c, \"%s\") then', \"        inWord = false\", \"      end\", \"    else\", \"      table.insert(buf, string.upper(c))\", \"      inWord = true\", \"    end\", \"  end\", \"  return table.concat(buf)\", \"end\"]));\n    return [c + \"(\" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_trim = function (a) {\n    var b = {\n      LEFT: \"^%s*(,-)\",\n      RIGHT: \"(.-)%s*$\",\n      BOTH: \"^%s*(.-)%s*$\"\n    }[a.getFieldValue(\"MODE\")];\n    return [\"string.gsub(\" + (Blockly.Lua.valueToCode(a, \"TEXT\", Blockly.Lua.ORDER_NONE) || \"''\") + ', \"' + b + '\", \"%1\")', Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_print = function (a) {\n    return \"print(\" + (Blockly.Lua.valueToCode(a, \"TEXT\", Blockly.Lua.ORDER_NONE) || \"''\") + \")\\n\";\n  };\n\n  Blockly.Lua.text_prompt_ext = function (a) {\n    var b = a.getField(\"TEXT\") ? Blockly.Lua.quote_(a.getFieldValue(\"TEXT\")) : Blockly.Lua.valueToCode(a, \"TEXT\", Blockly.Lua.ORDER_NONE) || \"''\";\n    b = Blockly.Lua.provideFunction_(\"text_prompt\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(msg)\", \"  io.write(msg)\", \"  io.flush()\", \"  return io.read()\", \"end\"]) + \"(\" + b + \")\";\n    \"NUMBER\" == a.getFieldValue(\"TYPE\") && (b = \"tonumber(\" + b + \", 10)\");\n    return [b, Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_prompt = Blockly.Lua.text_prompt_ext;\n\n  Blockly.Lua.text_count = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"TEXT\", Blockly.Lua.ORDER_NONE) || \"''\";\n    a = Blockly.Lua.valueToCode(a, \"SUB\", Blockly.Lua.ORDER_NONE) || \"''\";\n    return [Blockly.Lua.provideFunction_(\"text_count\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(haystack, needle)\", \"  if #needle == 0 then\", \"    return #haystack + 1\", \"  end\", \"  local i = 1\", \"  local count = 0\", \"  while true do\", \"    i = string.find(haystack, needle, i, true)\", \"    if i == nil then\", \"      break\", \"    end\", \"    count = count + 1\", \"    i = i + #needle\", \"  end\", \"  return count\", \"end\"]) + \"(\" + b + \", \" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_replace = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"TEXT\", Blockly.Lua.ORDER_NONE) || \"''\",\n        c = Blockly.Lua.valueToCode(a, \"FROM\", Blockly.Lua.ORDER_NONE) || \"''\";\n    a = Blockly.Lua.valueToCode(a, \"TO\", Blockly.Lua.ORDER_NONE) || \"''\";\n    return [Blockly.Lua.provideFunction_(\"text_replace\", [\"function \" + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + \"(haystack, needle, replacement)\", \"  local buf = {}\", \"  local i = 1\", \"  while i <= #haystack do\", \"    if string.sub(haystack, i, i + #needle - 1) == needle then\", \"      for j = 1, #replacement do\", \"        table.insert(buf, string.sub(replacement, j, j))\", \"      end\", \"      i = i + #needle\", \"    else\", \"      table.insert(buf, string.sub(haystack, i, i))\", \"      i = i + 1\", \"    end\", \"  end\", \"  return table.concat(buf)\", \"end\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.text_reverse = function (a) {\n    return [\"string.reverse(\" + (Blockly.Lua.valueToCode(a, \"TEXT\", Blockly.Lua.ORDER_HIGH) || \"''\") + \")\", Blockly.Lua.ORDER_HIGH];\n  };\n\n  Blockly.Lua.variables = {};\n\n  Blockly.Lua.variables_get = function (a) {\n    return [Blockly.Lua.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE), Blockly.Lua.ORDER_ATOMIC];\n  };\n\n  Blockly.Lua.variables_set = function (a) {\n    var b = Blockly.Lua.valueToCode(a, \"VALUE\", Blockly.Lua.ORDER_NONE) || \"0\";\n    return Blockly.Lua.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE) + \" = \" + b + \"\\n\";\n  };\n\n  Blockly.Lua.variablesDynamic = {};\n  Blockly.Lua.variables_get_dynamic = Blockly.Lua.variables_get;\n  Blockly.Lua.variables_set_dynamic = Blockly.Lua.variables_set;\n  return Blockly.Lua;\n};","map":null,"metadata":{},"sourceType":"script"}