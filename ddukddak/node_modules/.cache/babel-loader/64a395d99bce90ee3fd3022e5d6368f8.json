{"ast":null,"code":"//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_dummy',\n//\t\t\t\t\t\t},\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_value',\n//\t\t\t\t\t\t\tname : 'number_b',\n//\t\t\t\t\t\t\tcheck : 'Number'\n//\t\t\t\t\t\t}\n//\t\t\t\t\tinputsInline : true,\n//\t\t\t\t\toutput: 'String',\n//\t\t\t\t\tnextStatement : null,\n//\t\t\t\t\tpreviousStatement : null,\nimport Blockly from 'node-blockly/browser'; // Category : Data\n\nconst trainData = {\n  name: 'TrainData',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 데이터 %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NUM'\n        }],\n        colour: 210,\n        tooltip: 'TrainData'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('NUM'), \"'\") || '\\'\\'';\n    const code = \"'training_num=\".concat(message, \"<br />'\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst testData = {\n  name: 'TestData',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '테스트 데이터 %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NUM'\n        }],\n        colour: 220,\n        tooltip: 'TestData'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('NUM'), \"'\") || '\\'\\'';\n    const code = \"'test_num=\".concat(message, \"<br />'\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n}; // Category : Layer\n\nconst modelLayer1 = {\n  name: 'ModelLayer1',\n  category: 'Layer',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 방법 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"A\", \"nn.ReLU\"], [\"B\", \"nn.LogSigmoid\"]]\n        }],\n        colour: 160,\n        tooltip: 'ModelLayer1',\n        nextStatement: null\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"'\".concat(message, \"<br />'\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst modelLayer2 = {\n  name: 'ModelLayer2',\n  category: 'Layer',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 방법 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"A\", \"nn.ReLU\"], [\"B\", \"nn.LogSigmoid\"]]\n        }],\n        colour: 165,\n        tooltip: 'ModelLayer2',\n        nextStatement: null,\n        previousStatement: null\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"'\".concat(message, \"<br />'\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst modelLayer3 = {\n  name: 'ModelLayer3',\n  category: 'Layer',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 방법 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"A\", \"nn.ReLU\"], [\"B\", \"nn.LogSigmoid\"]]\n        }],\n        colour: 170,\n        tooltip: 'ModelLayer3',\n        previousStatement: null\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"'\".concat(message, \"<br />'\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n}; // Category : Training\n\nconst learningRate = {\n  name: 'LearningRate',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 속도 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"느리게\", \"500\"], [\"보통\", \"1000\"], [\"빠르게\", \"2000\"]]\n        }],\n        colour: 110,\n        tooltip: 'LearningRate'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"'learning_rate = \".concat(message, \"<br />'\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst epochs = {\n  name: 'Epochs',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '복습 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"한다\", \"1\"], [\"안한다\", \"2\"]]\n        }],\n        colour: 120,\n        tooltip: 'Epochs'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"'num_epochs = \".concat(message, \"<br />'\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst blocks = [trainData, testData, modelLayer1, modelLayer2, modelLayer3, learningRate, epochs];\nexport { blocks };","map":{"version":3,"sources":["/home/codeup/ddukddak/ddukddak_front/ddukddak/src/container/blocks.js"],"names":["Blockly","trainData","name","category","block","init","jsonInit","message0","args0","type","colour","tooltip","generator","message","getFieldValue","code","Python","ORDER_ATOMIC","testData","modelLayer1","options","nextStatement","modelLayer2","previousStatement","modelLayer3","learningRate","epochs","blocks"],"mappings":"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","sourcesContent":["//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_dummy',\n//\t\t\t\t\t\t},\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_value',\n//\t\t\t\t\t\t\tname : 'number_b',\n//\t\t\t\t\t\t\tcheck : 'Number'\n//\t\t\t\t\t\t}\n//\t\t\t\t\tinputsInline : true,\n//\t\t\t\t\toutput: 'String',\n//\t\t\t\t\tnextStatement : null,\n//\t\t\t\t\tpreviousStatement : null,\nimport Blockly from 'node-blockly/browser';\n\n// Category : Data\nconst trainData = {\n\tname : 'TrainData',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 데이터 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype: 'field_input',\n\t\t\t\t\tname: 'NUM',\n\t\t\t\t},],\n\t\t\t\tcolour: 210,\n\t\t\t\ttooltip: 'TrainData',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('NUM')}'` || '\\'\\'';\n\t\tconst code = `'training_num=${message}<br />'`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst testData = {\n\tname : 'TestData',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '테스트 데이터 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype: 'field_input',\n\t\t\t\t\tname: 'NUM',\n\t\t\t\t},],\n\t\t\t\tcolour: 220,\n\t\t\t\ttooltip: 'TestData',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('NUM')}'` || '\\'\\'';\n\t\tconst code = `'test_num=${message}<br />'`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n\n// Category : Layer\nconst modelLayer1 = {\n\tname : 'ModelLayer1',\n\tcategory : 'Layer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 방법 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"A\",\"nn.ReLU\"],\n\t\t\t\t\t\t[\"B\",\"nn.LogSigmoid\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 160,\n\t\t\t\ttooltip : 'ModelLayer1',\n\t\t\t\tnextStatement : null,\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `'${message}<br />'`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst modelLayer2 = {\n\tname : 'ModelLayer2',\n\tcategory : 'Layer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 방법 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"A\",\"nn.ReLU\"],\n\t\t\t\t\t\t[\"B\",\"nn.LogSigmoid\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 165,\n\t\t\t\ttooltip : 'ModelLayer2',\n\t\t\t\tnextStatement : null,\n\t\t\t\tpreviousStatement : null,\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `'${message}<br />'`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst modelLayer3 = {\n\tname : 'ModelLayer3',\n\tcategory : 'Layer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 방법 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"A\",\"nn.ReLU\"],\n\t\t\t\t\t\t[\"B\",\"nn.LogSigmoid\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 170,\n\t\t\t\ttooltip : 'ModelLayer3',\n\t\t\t\tpreviousStatement : null,\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `'${message}<br />'`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n \n// Category : Training\nconst learningRate = {\n\tname : 'LearningRate',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 속도 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"느리게\",\"500\"],\n\t\t\t\t\t\t[\"보통\",\"1000\"],\n\t\t\t\t\t\t[\"빠르게\",\"2000\"]\n\t\t\t\t\t],\n\t\t\t\t},],\n\t\t\t\tcolour : 110,\n\t\t\t\ttooltip : 'LearningRate',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `'learning_rate = ${message}<br />'`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst epochs = {\n\tname : 'Epochs',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '복습 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"한다\",\"1\"],\n\t\t\t\t\t\t[\"안한다\",\"2\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 120,\n\t\t\t\ttooltip : 'Epochs',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `'num_epochs = ${message}<br />'`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n\nconst blocks =[\n\ttrainData, \n\ttestData, \n\tmodelLayer1, \n\tmodelLayer2,\n\tmodelLayer3,\n\tlearningRate,\n\tepochs,\n]\nexport {\n\tblocks\n};"]},"metadata":{},"sourceType":"module"}