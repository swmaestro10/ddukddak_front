{"ast":null,"code":"module.exports = function (Blockly) {\n  // Do not edit this file; automatically generated by build.py.\n  'use strict';\n\n  Blockly.Dart = new Blockly.Generator(\"Dart\");\n  Blockly.Dart.addReservedWords(\"assert,break,case,catch,class,const,continue,default,do,else,enum,extends,false,final,finally,for,if,in,is,new,null,rethrow,return,super,switch,this,throw,true,try,var,void,while,with,print,identityHashCode,identical,BidirectionalIterator,Comparable,double,Function,int,Invocation,Iterable,Iterator,List,Map,Match,num,Pattern,RegExp,Set,StackTrace,String,StringSink,Type,bool,DateTime,Deprecated,Duration,Expando,Null,Object,RuneIterator,Runes,Stopwatch,StringBuffer,Symbol,Uri,Comparator,AbstractClassInstantiationError,ArgumentError,AssertionError,CastError,ConcurrentModificationError,CyclicInitializationError,Error,Exception,FallThroughError,FormatException,IntegerDivisionByZeroException,NoSuchMethodError,NullThrownError,OutOfMemoryError,RangeError,StackOverflowError,StateError,TypeError,UnimplementedError,UnsupportedError\");\n  Blockly.Dart.ORDER_ATOMIC = 0;\n  Blockly.Dart.ORDER_UNARY_POSTFIX = 1;\n  Blockly.Dart.ORDER_UNARY_PREFIX = 2;\n  Blockly.Dart.ORDER_MULTIPLICATIVE = 3;\n  Blockly.Dart.ORDER_ADDITIVE = 4;\n  Blockly.Dart.ORDER_SHIFT = 5;\n  Blockly.Dart.ORDER_BITWISE_AND = 6;\n  Blockly.Dart.ORDER_BITWISE_XOR = 7;\n  Blockly.Dart.ORDER_BITWISE_OR = 8;\n  Blockly.Dart.ORDER_RELATIONAL = 9;\n  Blockly.Dart.ORDER_EQUALITY = 10;\n  Blockly.Dart.ORDER_LOGICAL_AND = 11;\n  Blockly.Dart.ORDER_LOGICAL_OR = 12;\n  Blockly.Dart.ORDER_IF_NULL = 13;\n  Blockly.Dart.ORDER_CONDITIONAL = 14;\n  Blockly.Dart.ORDER_CASCADE = 15;\n  Blockly.Dart.ORDER_ASSIGNMENT = 16;\n  Blockly.Dart.ORDER_NONE = 99;\n\n  Blockly.Dart.init = function (a) {\n    Blockly.Dart.definitions_ = Object.create(null);\n    Blockly.Dart.functionNames_ = Object.create(null);\n    Blockly.Dart.variableDB_ ? Blockly.Dart.variableDB_.reset() : Blockly.Dart.variableDB_ = new Blockly.Names(Blockly.Dart.RESERVED_WORDS_);\n    Blockly.Dart.variableDB_.setVariableMap(a.getVariableMap());\n\n    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(Blockly.Dart.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n\n    a = Blockly.Variables.allUsedVarModels(a);\n\n    for (d = 0; d < a.length; d++) b.push(Blockly.Dart.variableDB_.getName(a[d].getId(), Blockly.Variables.NAME_TYPE));\n\n    b.length && (Blockly.Dart.definitions_.variables = \"var \" + b.join(\", \") + \";\");\n  };\n\n  Blockly.Dart.finish = function (a) {\n    a && (a = Blockly.Dart.prefixLines(a, Blockly.Dart.INDENT));\n    a = \"main() {\\n\" + a + \"}\";\n    var b = [],\n        c = [],\n        d;\n\n    for (d in Blockly.Dart.definitions_) {\n      var e = Blockly.Dart.definitions_[d];\n      e.match(/^import\\s/) ? b.push(e) : c.push(e);\n    }\n\n    delete Blockly.Dart.definitions_;\n    delete Blockly.Dart.functionNames_;\n    Blockly.Dart.variableDB_.reset();\n    return (b.join(\"\\n\") + \"\\n\\n\" + c.join(\"\\n\\n\")).replace(/\\n\\n+/g, \"\\n\\n\").replace(/\\n*$/, \"\\n\\n\\n\") + a;\n  };\n\n  Blockly.Dart.scrubNakedValue = function (a) {\n    return a + \";\\n\";\n  };\n\n  Blockly.Dart.quote_ = function (a) {\n    a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/\\$/g, \"\\\\$\").replace(/'/g, \"\\\\'\");\n    return \"'\" + a + \"'\";\n  };\n\n  Blockly.Dart.scrub_ = function (a, b, c) {\n    var d = \"\";\n\n    if (!a.outputConnection || !a.outputConnection.targetConnection) {\n      var e = a.getCommentText();\n      (e = Blockly.utils.string.wrap(e, Blockly.Dart.COMMENT_WRAP - 3)) && (d = a.getProcedureDef ? d + Blockly.Dart.prefixLines(e + \"\\n\", \"/// \") : d + Blockly.Dart.prefixLines(e + \"\\n\", \"// \"));\n\n      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.Dart.allNestedComments(e)) && (d += Blockly.Dart.prefixLines(e, \"// \"));\n    }\n\n    a = a.nextConnection && a.nextConnection.targetBlock();\n    c = c ? \"\" : Blockly.Dart.blockToCode(a);\n    return d + b + c;\n  };\n\n  Blockly.Dart.getAdjusted = function (a, b, c, d, e) {\n    c = c || 0;\n    e = e || Blockly.Dart.ORDER_NONE;\n    a.workspace.options.oneBasedIndex && c--;\n    var f = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n    a = c ? Blockly.Dart.valueToCode(a, b, Blockly.Dart.ORDER_ADDITIVE) || f : d ? Blockly.Dart.valueToCode(a, b, Blockly.Dart.ORDER_UNARY_PREFIX) || f : Blockly.Dart.valueToCode(a, b, e) || f;\n    if (Blockly.isNumber(a)) a = parseInt(a, 10) + c, d && (a = -a);else {\n      if (0 < c) {\n        a = a + \" + \" + c;\n        var g = Blockly.Dart.ORDER_ADDITIVE;\n      } else 0 > c && (a = a + \" - \" + -c, g = Blockly.Dart.ORDER_ADDITIVE);\n\n      d && (a = c ? \"-(\" + a + \")\" : \"-\" + a, g = Blockly.Dart.ORDER_UNARY_PREFIX);\n      g = Math.floor(g);\n      e = Math.floor(e);\n      g && e >= g && (a = \"(\" + a + \")\");\n    }\n    return a;\n  };\n\n  Blockly.Dart.colour = {};\n  Blockly.Dart.addReservedWords(\"Math\");\n\n  Blockly.Dart.colour_picker = function (a) {\n    return [Blockly.Dart.quote_(a.getFieldValue(\"COLOUR\")), Blockly.Dart.ORDER_ATOMIC];\n  };\n\n  Blockly.Dart.colour_random = function (a) {\n    Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n    return [Blockly.Dart.provideFunction_(\"colour_random\", [\"String \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"() {\", \"  String hex = '0123456789abcdef';\", \"  var rnd = new Math.Random();\", \"  return '#${hex[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}'\", \"      '${hex[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}'\", \"      '${hex[rnd.nextInt(16)]}${hex[rnd.nextInt(16)]}';\", \"}\"]) + \"()\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.colour_rgb = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"RED\", Blockly.Dart.ORDER_NONE) || 0,\n        c = Blockly.Dart.valueToCode(a, \"GREEN\", Blockly.Dart.ORDER_NONE) || 0;\n    a = Blockly.Dart.valueToCode(a, \"BLUE\", Blockly.Dart.ORDER_NONE) || 0;\n    Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n    return [Blockly.Dart.provideFunction_(\"colour_rgb\", [\"String \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(num r, num g, num b) {\", \"  num rn = (Math.max(Math.min(r, 100), 0) * 2.55).round();\", \"  String rs = rn.toInt().toRadixString(16);\", \"  rs = '0$rs';\", \"  rs = rs.substring(rs.length - 2);\", \"  num gn = (Math.max(Math.min(g, 100), 0) * 2.55).round();\", \"  String gs = gn.toInt().toRadixString(16);\", \"  gs = '0$gs';\", \"  gs = gs.substring(gs.length - 2);\", \"  num bn = (Math.max(Math.min(b, 100), 0) * 2.55).round();\", \"  String bs = bn.toInt().toRadixString(16);\", \"  bs = '0$bs';\", \"  bs = bs.substring(bs.length - 2);\", \"  return '#$rs$gs$bs';\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.colour_blend = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"COLOUR1\", Blockly.Dart.ORDER_NONE) || \"'#000000'\",\n        c = Blockly.Dart.valueToCode(a, \"COLOUR2\", Blockly.Dart.ORDER_NONE) || \"'#000000'\";\n    a = Blockly.Dart.valueToCode(a, \"RATIO\", Blockly.Dart.ORDER_NONE) || .5;\n    Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n    return [Blockly.Dart.provideFunction_(\"colour_blend\", [\"String \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(String c1, String c2, num ratio) {\", \"  ratio = Math.max(Math.min(ratio, 1), 0);\", \"  int r1 = int.parse('0x${c1.substring(1, 3)}');\", \"  int g1 = int.parse('0x${c1.substring(3, 5)}');\", \"  int b1 = int.parse('0x${c1.substring(5, 7)}');\", \"  int r2 = int.parse('0x${c2.substring(1, 3)}');\", \"  int g2 = int.parse('0x${c2.substring(3, 5)}');\", \"  int b2 = int.parse('0x${c2.substring(5, 7)}');\", \"  num rn = (r1 * (1 - ratio) + r2 * ratio).round();\", \"  String rs = rn.toInt().toRadixString(16);\", \"  num gn = (g1 * (1 - ratio) + g2 * ratio).round();\", \"  String gs = gn.toInt().toRadixString(16);\", \"  num bn = (b1 * (1 - ratio) + b2 * ratio).round();\", \"  String bs = bn.toInt().toRadixString(16);\", \"  rs = '0$rs';\", \"  rs = rs.substring(rs.length - 2);\", \"  gs = '0$gs';\", \"  gs = gs.substring(gs.length - 2);\", \"  bs = '0$bs';\", \"  bs = bs.substring(bs.length - 2);\", \"  return '#$rs$gs$bs';\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.lists = {};\n  Blockly.Dart.addReservedWords(\"Math\");\n\n  Blockly.Dart.lists_create_empty = function (a) {\n    return [\"[]\", Blockly.Dart.ORDER_ATOMIC];\n  };\n\n  Blockly.Dart.lists_create_with = function (a) {\n    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Dart.valueToCode(a, \"ADD\" + c, Blockly.Dart.ORDER_NONE) || \"null\";\n\n    return [\"[\" + b.join(\", \") + \"]\", Blockly.Dart.ORDER_ATOMIC];\n  };\n\n  Blockly.Dart.lists_repeat = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"ITEM\", Blockly.Dart.ORDER_NONE) || \"null\";\n    return [\"new List.filled(\" + (Blockly.Dart.valueToCode(a, \"NUM\", Blockly.Dart.ORDER_NONE) || \"0\") + \", \" + b + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.lists_length = function (a) {\n    return [(Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"[]\") + \".length\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.lists_isEmpty = function (a) {\n    return [(Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"[]\") + \".isEmpty\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.lists_indexOf = function (a) {\n    var b = \"FIRST\" == a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        c = Blockly.Dart.valueToCode(a, \"FIND\", Blockly.Dart.ORDER_NONE) || \"''\";\n    b = (Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"[]\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Blockly.Dart.ORDER_ADDITIVE] : [b, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.lists_getIndex = function (a) {\n    function b() {\n      var a = Blockly.Dart.variableDB_.getDistinctName(\"tmp_list\", Blockly.Variables.NAME_TYPE),\n          b = \"List \" + a + \" = \" + e + \";\\n\";\n      e = a;\n      return b;\n    }\n\n    var c = a.getFieldValue(\"MODE\") || \"GET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        e = Blockly.Dart.valueToCode(a, \"VALUE\", \"RANDOM\" == d || \"FROM_END\" == d ? Blockly.Dart.ORDER_NONE : Blockly.Dart.ORDER_UNARY_POSTFIX) || \"[]\";\n    if ((\"RANDOM\" != d || \"REMOVE\" != c) && \"FROM_END\" != d || e.match(/^\\w+$/)) switch (d) {\n      case \"FIRST\":\n        if (\"GET\" == c) return [e + \".first\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n        if (\"GET_REMOVE\" == c) return [e + \".removeAt(0)\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n        if (\"REMOVE\" == c) return e + \".removeAt(0);\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"GET\" == c) return [e + \".last\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n        if (\"GET_REMOVE\" == c) return [e + \".removeLast()\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n        if (\"REMOVE\" == c) return e + \".removeLast();\\n\";\n        break;\n\n      case \"FROM_START\":\n        d = Blockly.Dart.getAdjusted(a, \"AT\");\n        if (\"GET\" == c) return [e + \"[\" + d + \"]\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n        if (\"GET_REMOVE\" == c) return [e + \".removeAt(\" + d + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n        if (\"REMOVE\" == c) return e + \".removeAt(\" + d + \");\\n\";\n        break;\n\n      case \"FROM_END\":\n        d = Blockly.Dart.getAdjusted(a, \"AT\", 1, !1, Blockly.Dart.ORDER_ADDITIVE);\n        if (\"GET\" == c) return [e + \"[\" + e + \".length - \" + d + \"]\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n\n        if (\"GET_REMOVE\" == c || \"REMOVE\" == c) {\n          a = e + \".removeAt(\" + e + \".length - \" + d + \")\";\n          if (\"GET_REMOVE\" == c) return [a, Blockly.Dart.ORDER_UNARY_POSTFIX];\n          if (\"REMOVE\" == c) return a + \";\\n\";\n        }\n\n        break;\n\n      case \"RANDOM\":\n        Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n        if (\"REMOVE\" == c) return c = Blockly.Dart.variableDB_.getDistinctName(\"tmp_x\", Blockly.Variables.NAME_TYPE), \"int \" + c + \" = new Math.Random().nextInt(\" + e + \".length);\\n\" + (e + \".removeAt(\" + c + \");\\n\");\n        if (\"GET\" == c) return c = Blockly.Dart.provideFunction_(\"lists_get_random_item\", [\"dynamic \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List my_list) {\", \"  int x = new Math.Random().nextInt(my_list.length);\", \"  return my_list[x];\", \"}\"]), [c + \"(\" + e + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n        if (\"GET_REMOVE\" == c) return c = Blockly.Dart.provideFunction_(\"lists_remove_random_item\", [\"dynamic \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List my_list) {\", \"  int x = new Math.Random().nextInt(my_list.length);\", \"  return my_list.removeAt(x);\", \"}\"]), [c + \"(\" + e + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n    } else {\n      if (\"RANDOM\" == d) return Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\", a = b(), c = Blockly.Dart.variableDB_.getDistinctName(\"tmp_x\", Blockly.Variables.NAME_TYPE), a + (\"int \" + c + \" = new Math.Random().nextInt(\" + e + \".length);\\n\") + (e + \".removeAt(\" + c + \");\\n\");\n      if (\"REMOVE\" == c) return d = Blockly.Dart.getAdjusted(a, \"AT\", 1, !1, Blockly.Dart.ORDER_ADDITIVE), a = b(), a += e + \".removeAt(\" + e + \".length - \" + d + \");\\n\";\n      if (\"GET\" == c) return d = Blockly.Dart.getAdjusted(a, \"AT\", 1), c = Blockly.Dart.provideFunction_(\"lists_get_from_end\", [\"dynamic \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List my_list, num x) {\", \"  x = my_list.length - x;\", \"  return my_list[x];\", \"}\"]), [c + \"(\" + e + \", \" + d + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n      if (\"GET_REMOVE\" == c) return d = Blockly.Dart.getAdjusted(a, \"AT\", 1), c = Blockly.Dart.provideFunction_(\"lists_remove_from_end\", [\"dynamic \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List my_list, num x) {\", \"  x = my_list.length - x;\", \"  return my_list.removeAt(x);\", \"}\"]), [c + \"(\" + e + \", \" + d + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n    }\n    throw Error(\"Unhandled combination (lists_getIndex).\");\n  };\n\n  Blockly.Dart.lists_setIndex = function (a) {\n    function b() {\n      if (e.match(/^\\w+$/)) return \"\";\n      var a = Blockly.Dart.variableDB_.getDistinctName(\"tmp_list\", Blockly.Variables.NAME_TYPE),\n          b = \"List \" + a + \" = \" + e + \";\\n\";\n      e = a;\n      return b;\n    }\n\n    var c = a.getFieldValue(\"MODE\") || \"GET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        e = Blockly.Dart.valueToCode(a, \"LIST\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"[]\",\n        f = Blockly.Dart.valueToCode(a, \"TO\", Blockly.Dart.ORDER_ASSIGNMENT) || \"null\";\n\n    switch (d) {\n      case \"FIRST\":\n        if (\"SET\" == c) return e + \"[0] = \" + f + \";\\n\";\n        if (\"INSERT\" == c) return e + \".insert(0, \" + f + \");\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"SET\" == c) return a = b(), a + (e + \"[\" + e + \".length - 1] = \" + f + \";\\n\");\n        if (\"INSERT\" == c) return e + \".add(\" + f + \");\\n\";\n        break;\n\n      case \"FROM_START\":\n        d = Blockly.Dart.getAdjusted(a, \"AT\");\n        if (\"SET\" == c) return e + \"[\" + d + \"] = \" + f + \";\\n\";\n        if (\"INSERT\" == c) return e + \".insert(\" + d + \", \" + f + \");\\n\";\n        break;\n\n      case \"FROM_END\":\n        d = Blockly.Dart.getAdjusted(a, \"AT\", 1, !1, Blockly.Dart.ORDER_ADDITIVE);\n        a = b();\n        if (\"SET\" == c) return a + (e + \"[\" + e + \".length - \" + d + \"] = \" + f + \";\\n\");\n        if (\"INSERT\" == c) return a + (e + \".insert(\" + e + \".length - \" + d + \", \" + f + \");\\n\");\n        break;\n\n      case \"RANDOM\":\n        Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n        a = b();\n        d = Blockly.Dart.variableDB_.getDistinctName(\"tmp_x\", Blockly.Variables.NAME_TYPE);\n        a += \"int \" + d + \" = new Math.Random().nextInt(\" + e + \".length);\\n\";\n        if (\"SET\" == c) return a + (e + \"[\" + d + \"] = \" + f + \";\\n\");\n        if (\"INSERT\" == c) return a + (e + \".insert(\" + d + \", \" + f + \");\\n\");\n    }\n\n    throw Error(\"Unhandled combination (lists_setIndex).\");\n  };\n\n  Blockly.Dart.lists_getSublist = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"LIST\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"[]\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n\n    if (b.match(/^\\w+$/) || \"FROM_END\" != c && \"FROM_START\" == d) {\n      switch (c) {\n        case \"FROM_START\":\n          var e = Blockly.Dart.getAdjusted(a, \"AT1\");\n          break;\n\n        case \"FROM_END\":\n          e = Blockly.Dart.getAdjusted(a, \"AT1\", 1, !1, Blockly.Dart.ORDER_ADDITIVE);\n          e = b + \".length - \" + e;\n          break;\n\n        case \"FIRST\":\n          e = \"0\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n\n      switch (d) {\n        case \"FROM_START\":\n          var f = Blockly.Dart.getAdjusted(a, \"AT2\", 1);\n          break;\n\n        case \"FROM_END\":\n          f = Blockly.Dart.getAdjusted(a, \"AT2\", 0, !1, Blockly.Dart.ORDER_ADDITIVE);\n          f = b + \".length - \" + f;\n          break;\n\n        case \"LAST\":\n          break;\n\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n\n      a = \"LAST\" == d ? b + \".sublist(\" + e + \")\" : b + \".sublist(\" + e + \", \" + f + \")\";\n    } else e = Blockly.Dart.getAdjusted(a, \"AT1\"), f = Blockly.Dart.getAdjusted(a, \"AT2\"), a = Blockly.Dart.provideFunction_(\"lists_get_sublist\", [\"List \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List list, String where1, num at1, String where2, num at2) {\", \"  int getAt(String where, num at) {\", \"    if (where == 'FROM_END') {\", \"      at = list.length - 1 - at;\", \"    } else if (where == 'FIRST') {\", \"      at = 0;\", \"    } else if (where == 'LAST') {\", \"      at = list.length - 1;\", \"    } else if (where != 'FROM_START') {\", \"      throw 'Unhandled option (lists_getSublist).';\", \"    }\", \"    return at;\", \"  }\", \"  at1 = getAt(where1, at1);\", \"  at2 = getAt(where2, at2) + 1;\", \"  return list.sublist(at1, at2);\", \"}\"]) + \"(\" + b + \", '\" + c + \"', \" + e + \", '\" + d + \"', \" + f + \")\";\n\n    return [a, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.lists_sort = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"LIST\", Blockly.Dart.ORDER_NONE) || \"[]\",\n        c = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n    a = a.getFieldValue(\"TYPE\");\n    return [Blockly.Dart.provideFunction_(\"lists_sort\", [\"List \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List list, String type, int direction) {\", \"  var compareFuncs = {\", '    \"NUMERIC\": (a, b) => (direction * a.compareTo(b)).toInt(),', '    \"TEXT\": (a, b) => direction * a.toString().compareTo(b.toString()),', '    \"IGNORE_CASE\": ', \"       (a, b) => direction * \", \"      a.toString().toLowerCase().compareTo(b.toString().toLowerCase())\", \"  };\", \"  list = new List.from(list);\", \"  var compare = compareFuncs[type];\", \"  list.sort(compare);\", \"  return list;\", \"}\"]) + \"(\" + b + ', \"' + a + '\", ' + c + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.lists_split = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"INPUT\", Blockly.Dart.ORDER_UNARY_POSTFIX),\n        c = Blockly.Dart.valueToCode(a, \"DELIM\", Blockly.Dart.ORDER_NONE) || \"''\";\n    a = a.getFieldValue(\"MODE\");\n    if (\"SPLIT\" == a) b || (b = \"''\"), a = \"split\";else if (\"JOIN\" == a) b || (b = \"[]\"), a = \"join\";else throw Error(\"Unknown mode: \" + a);\n    return [b + \".\" + a + \"(\" + c + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.lists_reverse = function (a) {\n    return [\"new List.from(\" + (Blockly.Dart.valueToCode(a, \"LIST\", Blockly.Dart.ORDER_NONE) || \"[]\") + \".reversed)\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.logic = {};\n\n  Blockly.Dart.controls_if = function (a) {\n    var b = 0,\n        c = \"\";\n    Blockly.Dart.STATEMENT_PREFIX && (c += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_PREFIX, a));\n\n    do {\n      var d = Blockly.Dart.valueToCode(a, \"IF\" + b, Blockly.Dart.ORDER_NONE) || \"false\";\n      var e = Blockly.Dart.statementToCode(a, \"DO\" + b);\n      Blockly.Dart.STATEMENT_SUFFIX && (e = Blockly.Dart.prefixLines(Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, a), Blockly.Dart.INDENT) + e);\n      c += (0 < b ? \"else \" : \"\") + \"if (\" + d + \") {\\n\" + e + \"}\";\n      ++b;\n    } while (a.getInput(\"IF\" + b));\n\n    if (a.getInput(\"ELSE\") || Blockly.Dart.STATEMENT_SUFFIX) e = Blockly.Dart.statementToCode(a, \"ELSE\"), Blockly.Dart.STATEMENT_SUFFIX && (e = Blockly.Dart.prefixLines(Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, a), Blockly.Dart.INDENT) + e), c += \" else {\\n\" + e + \"}\";\n    return c + \"\\n\";\n  };\n\n  Blockly.Dart.controls_ifelse = Blockly.Dart.controls_if;\n\n  Blockly.Dart.logic_compare = function (a) {\n    var b = {\n      EQ: \"==\",\n      NEQ: \"!=\",\n      LT: \"<\",\n      LTE: \"<=\",\n      GT: \">\",\n      GTE: \">=\"\n    }[a.getFieldValue(\"OP\")],\n        c = \"==\" == b || \"!=\" == b ? Blockly.Dart.ORDER_EQUALITY : Blockly.Dart.ORDER_RELATIONAL,\n        d = Blockly.Dart.valueToCode(a, \"A\", c) || \"0\";\n    a = Blockly.Dart.valueToCode(a, \"B\", c) || \"0\";\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.Dart.logic_operation = function (a) {\n    var b = \"AND\" == a.getFieldValue(\"OP\") ? \"&&\" : \"||\",\n        c = \"&&\" == b ? Blockly.Dart.ORDER_LOGICAL_AND : Blockly.Dart.ORDER_LOGICAL_OR,\n        d = Blockly.Dart.valueToCode(a, \"A\", c);\n    a = Blockly.Dart.valueToCode(a, \"B\", c);\n\n    if (d || a) {\n      var e = \"&&\" == b ? \"true\" : \"false\";\n      d || (d = e);\n      a || (a = e);\n    } else a = d = \"false\";\n\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.Dart.logic_negate = function (a) {\n    var b = Blockly.Dart.ORDER_UNARY_PREFIX;\n    return [\"!\" + (Blockly.Dart.valueToCode(a, \"BOOL\", b) || \"true\"), b];\n  };\n\n  Blockly.Dart.logic_boolean = function (a) {\n    return [\"TRUE\" == a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", Blockly.Dart.ORDER_ATOMIC];\n  };\n\n  Blockly.Dart.logic_null = function (a) {\n    return [\"null\", Blockly.Dart.ORDER_ATOMIC];\n  };\n\n  Blockly.Dart.logic_ternary = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"IF\", Blockly.Dart.ORDER_CONDITIONAL) || \"false\",\n        c = Blockly.Dart.valueToCode(a, \"THEN\", Blockly.Dart.ORDER_CONDITIONAL) || \"null\";\n    a = Blockly.Dart.valueToCode(a, \"ELSE\", Blockly.Dart.ORDER_CONDITIONAL) || \"null\";\n    return [b + \" ? \" + c + \" : \" + a, Blockly.Dart.ORDER_CONDITIONAL];\n  };\n\n  Blockly.Dart.loops = {};\n\n  Blockly.Dart.controls_repeat_ext = function (a) {\n    var b = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : Blockly.Dart.valueToCode(a, \"TIMES\", Blockly.Dart.ORDER_ASSIGNMENT) || \"0\",\n        c = Blockly.Dart.statementToCode(a, \"DO\");\n    c = Blockly.Dart.addLoopTrap(c, a);\n    a = \"\";\n    var d = Blockly.Dart.variableDB_.getDistinctName(\"count\", Blockly.Variables.NAME_TYPE),\n        e = b;\n    b.match(/^\\w+$/) || Blockly.isNumber(b) || (e = Blockly.Dart.variableDB_.getDistinctName(\"repeat_end\", Blockly.Variables.NAME_TYPE), a += \"var \" + e + \" = \" + b + \";\\n\");\n    return a + (\"for (int \" + d + \" = 0; \" + d + \" < \" + e + \"; \" + d + \"++) {\\n\" + c + \"}\\n\");\n  };\n\n  Blockly.Dart.controls_repeat = Blockly.Dart.controls_repeat_ext;\n\n  Blockly.Dart.controls_whileUntil = function (a) {\n    var b = \"UNTIL\" == a.getFieldValue(\"MODE\"),\n        c = Blockly.Dart.valueToCode(a, \"BOOL\", b ? Blockly.Dart.ORDER_UNARY_PREFIX : Blockly.Dart.ORDER_NONE) || \"false\",\n        d = Blockly.Dart.statementToCode(a, \"DO\");\n    d = Blockly.Dart.addLoopTrap(d, a);\n    b && (c = \"!\" + c);\n    return \"while (\" + c + \") {\\n\" + d + \"}\\n\";\n  };\n\n  Blockly.Dart.controls_for = function (a) {\n    var b = Blockly.Dart.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.Dart.valueToCode(a, \"FROM\", Blockly.Dart.ORDER_ASSIGNMENT) || \"0\",\n        d = Blockly.Dart.valueToCode(a, \"TO\", Blockly.Dart.ORDER_ASSIGNMENT) || \"0\",\n        e = Blockly.Dart.valueToCode(a, \"BY\", Blockly.Dart.ORDER_ASSIGNMENT) || \"1\",\n        f = Blockly.Dart.statementToCode(a, \"DO\");\n    f = Blockly.Dart.addLoopTrap(f, a);\n\n    if (Blockly.isNumber(c) && Blockly.isNumber(d) && Blockly.isNumber(e)) {\n      var g = parseFloat(c) <= parseFloat(d);\n      a = \"for (\" + b + \" = \" + c + \"; \" + b + (g ? \" <= \" : \" >= \") + d + \"; \" + b;\n      b = Math.abs(parseFloat(e));\n      a = (1 == b ? a + (g ? \"++\" : \"--\") : a + ((g ? \" += \" : \" -= \") + b)) + (\") {\\n\" + f + \"}\\n\");\n    } else a = \"\", g = c, c.match(/^\\w+$/) || Blockly.isNumber(c) || (g = Blockly.Dart.variableDB_.getDistinctName(b + \"_start\", Blockly.Variables.NAME_TYPE), a += \"var \" + g + \" = \" + c + \";\\n\"), c = d, d.match(/^\\w+$/) || Blockly.isNumber(d) || (c = Blockly.Dart.variableDB_.getDistinctName(b + \"_end\", Blockly.Variables.NAME_TYPE), a += \"var \" + c + \" = \" + d + \";\\n\"), d = Blockly.Dart.variableDB_.getDistinctName(b + \"_inc\", Blockly.Variables.NAME_TYPE), a += \"num \" + d + \" = \", a = Blockly.isNumber(e) ? a + (Math.abs(e) + \";\\n\") : a + (\"(\" + e + \").abs();\\n\"), a = a + (\"if (\" + g + \" > \" + c + \") {\\n\") + (Blockly.Dart.INDENT + d + \" = -\" + d + \";\\n\"), a += \"}\\n\", a += \"for (\" + b + \" = \" + g + \"; \" + d + \" >= 0 ? \" + b + \" <= \" + c + \" : \" + b + \" >= \" + c + \"; \" + b + \" += \" + d + \") {\\n\" + f + \"}\\n\";\n\n    return a;\n  };\n\n  Blockly.Dart.controls_forEach = function (a) {\n    var b = Blockly.Dart.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.Dart.valueToCode(a, \"LIST\", Blockly.Dart.ORDER_ASSIGNMENT) || \"[]\",\n        d = Blockly.Dart.statementToCode(a, \"DO\");\n    d = Blockly.Dart.addLoopTrap(d, a);\n    return \"for (var \" + b + \" in \" + c + \") {\\n\" + d + \"}\\n\";\n  };\n\n  Blockly.Dart.controls_flow_statements = function (a) {\n    var b = \"\";\n    Blockly.Dart.STATEMENT_PREFIX && (b += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_PREFIX, a));\n    Blockly.Dart.STATEMENT_SUFFIX && (b += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, a));\n\n    if (Blockly.Dart.STATEMENT_PREFIX) {\n      var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);\n      c && !c.suppressPrefixSuffix && (b += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_PREFIX, c));\n    }\n\n    switch (a.getFieldValue(\"FLOW\")) {\n      case \"BREAK\":\n        return b + \"break;\\n\";\n\n      case \"CONTINUE\":\n        return b + \"continue;\\n\";\n    }\n\n    throw Error(\"Unknown flow statement.\");\n  };\n\n  Blockly.Dart.math = {};\n  Blockly.Dart.addReservedWords(\"Math\");\n\n  Blockly.Dart.math_number = function (a) {\n    a = parseFloat(a.getFieldValue(\"NUM\"));\n\n    if (Infinity == a) {\n      a = \"double.infinity\";\n      var b = Blockly.Dart.ORDER_UNARY_POSTFIX;\n    } else -Infinity == a ? (a = \"-double.infinity\", b = Blockly.Dart.ORDER_UNARY_PREFIX) : b = 0 > a ? Blockly.Dart.ORDER_UNARY_PREFIX : Blockly.Dart.ORDER_ATOMIC;\n\n    return [a, b];\n  };\n\n  Blockly.Dart.math_arithmetic = function (a) {\n    var b = {\n      ADD: [\" + \", Blockly.Dart.ORDER_ADDITIVE],\n      MINUS: [\" - \", Blockly.Dart.ORDER_ADDITIVE],\n      MULTIPLY: [\" * \", Blockly.Dart.ORDER_MULTIPLICATIVE],\n      DIVIDE: [\" / \", Blockly.Dart.ORDER_MULTIPLICATIVE],\n      POWER: [null, Blockly.Dart.ORDER_NONE]\n    }[a.getFieldValue(\"OP\")],\n        c = b[0];\n    b = b[1];\n    var d = Blockly.Dart.valueToCode(a, \"A\", b) || \"0\";\n    a = Blockly.Dart.valueToCode(a, \"B\", b) || \"0\";\n    return c ? [d + c + a, b] : (Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\", [\"Math.pow(\" + d + \", \" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX]);\n  };\n\n  Blockly.Dart.math_single = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    if (\"NEG\" == b) return a = Blockly.Dart.valueToCode(a, \"NUM\", Blockly.Dart.ORDER_UNARY_PREFIX) || \"0\", \"-\" == a[0] && (a = \" \" + a), [\"-\" + a, Blockly.Dart.ORDER_UNARY_PREFIX];\n    Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n    a = \"ABS\" == b || \"ROUND\" == b.substring(0, 5) ? Blockly.Dart.valueToCode(a, \"NUM\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"0\" : \"SIN\" == b || \"COS\" == b || \"TAN\" == b ? Blockly.Dart.valueToCode(a, \"NUM\", Blockly.Dart.ORDER_MULTIPLICATIVE) || \"0\" : Blockly.Dart.valueToCode(a, \"NUM\", Blockly.Dart.ORDER_NONE) || \"0\";\n\n    switch (b) {\n      case \"ABS\":\n        var c = a + \".abs()\";\n        break;\n\n      case \"ROOT\":\n        c = \"Math.sqrt(\" + a + \")\";\n        break;\n\n      case \"LN\":\n        c = \"Math.log(\" + a + \")\";\n        break;\n\n      case \"EXP\":\n        c = \"Math.exp(\" + a + \")\";\n        break;\n\n      case \"POW10\":\n        c = \"Math.pow(10,\" + a + \")\";\n        break;\n\n      case \"ROUND\":\n        c = a + \".round()\";\n        break;\n\n      case \"ROUNDUP\":\n        c = a + \".ceil()\";\n        break;\n\n      case \"ROUNDDOWN\":\n        c = a + \".floor()\";\n        break;\n\n      case \"SIN\":\n        c = \"Math.sin(\" + a + \" / 180 * Math.pi)\";\n        break;\n\n      case \"COS\":\n        c = \"Math.cos(\" + a + \" / 180 * Math.pi)\";\n        break;\n\n      case \"TAN\":\n        c = \"Math.tan(\" + a + \" / 180 * Math.pi)\";\n    }\n\n    if (c) return [c, Blockly.Dart.ORDER_UNARY_POSTFIX];\n\n    switch (b) {\n      case \"LOG10\":\n        c = \"Math.log(\" + a + \") / Math.log(10)\";\n        break;\n\n      case \"ASIN\":\n        c = \"Math.asin(\" + a + \") / Math.pi * 180\";\n        break;\n\n      case \"ACOS\":\n        c = \"Math.acos(\" + a + \") / Math.pi * 180\";\n        break;\n\n      case \"ATAN\":\n        c = \"Math.atan(\" + a + \") / Math.pi * 180\";\n        break;\n\n      default:\n        throw Error(\"Unknown math operator: \" + b);\n    }\n\n    return [c, Blockly.Dart.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Dart.math_constant = function (a) {\n    var b = {\n      PI: [\"Math.pi\", Blockly.Dart.ORDER_UNARY_POSTFIX],\n      E: [\"Math.e\", Blockly.Dart.ORDER_UNARY_POSTFIX],\n      GOLDEN_RATIO: [\"(1 + Math.sqrt(5)) / 2\", Blockly.Dart.ORDER_MULTIPLICATIVE],\n      SQRT2: [\"Math.sqrt2\", Blockly.Dart.ORDER_UNARY_POSTFIX],\n      SQRT1_2: [\"Math.sqrt1_2\", Blockly.Dart.ORDER_UNARY_POSTFIX],\n      INFINITY: [\"double.infinity\", Blockly.Dart.ORDER_ATOMIC]\n    };\n    a = a.getFieldValue(\"CONSTANT\");\n    \"INFINITY\" != a && (Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\");\n    return b[a];\n  };\n\n  Blockly.Dart.math_number_property = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"NUMBER_TO_CHECK\", Blockly.Dart.ORDER_MULTIPLICATIVE);\n    if (!b) return [\"false\", Blockly.Dart.ORDER_ATOMIC];\n    var c = a.getFieldValue(\"PROPERTY\");\n    if (\"PRIME\" == c) return Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\", [Blockly.Dart.provideFunction_(\"math_isPrime\", [\"bool \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(n) {\", \"  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\", \"  if (n == 2 || n == 3) {\", \"    return true;\", \"  }\", \"  // False if n is null, negative, is 1, or not whole.\", \"  // And false if n is divisible by 2 or 3.\", \"  if (n == null || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {\", \"    return false;\", \"  }\", \"  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\", \"  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\", \"    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\", \"      return false;\", \"    }\", \"  }\", \"  return true;\", \"}\"]) + \"(\" + b + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n\n    switch (c) {\n      case \"EVEN\":\n        var d = b + \" % 2 == 0\";\n        break;\n\n      case \"ODD\":\n        d = b + \" % 2 == 1\";\n        break;\n\n      case \"WHOLE\":\n        d = b + \" % 1 == 0\";\n        break;\n\n      case \"POSITIVE\":\n        d = b + \" > 0\";\n        break;\n\n      case \"NEGATIVE\":\n        d = b + \" < 0\";\n        break;\n\n      case \"DIVISIBLE_BY\":\n        a = Blockly.Dart.valueToCode(a, \"DIVISOR\", Blockly.Dart.ORDER_MULTIPLICATIVE);\n        if (!a) return [\"false\", Blockly.Dart.ORDER_ATOMIC];\n        d = b + \" % \" + a + \" == 0\";\n    }\n\n    return [d, Blockly.Dart.ORDER_EQUALITY];\n  };\n\n  Blockly.Dart.math_change = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"DELTA\", Blockly.Dart.ORDER_ADDITIVE) || \"0\";\n    a = Blockly.Dart.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    return a + \" = (\" + a + \" is num ? \" + a + \" : 0) + \" + b + \";\\n\";\n  };\n\n  Blockly.Dart.math_round = Blockly.Dart.math_single;\n  Blockly.Dart.math_trig = Blockly.Dart.math_single;\n\n  Blockly.Dart.math_on_list = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    a = Blockly.Dart.valueToCode(a, \"LIST\", Blockly.Dart.ORDER_NONE) || \"[]\";\n\n    switch (b) {\n      case \"SUM\":\n        b = Blockly.Dart.provideFunction_(\"math_sum\", [\"num \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List<num> myList) {\", \"  num sumVal = 0;\", \"  myList.forEach((num entry) {sumVal += entry;});\", \"  return sumVal;\", \"}\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"MIN\":\n        Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n        b = Blockly.Dart.provideFunction_(\"math_min\", [\"num \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List<num> myList) {\", \"  if (myList.isEmpty) return null;\", \"  num minVal = myList[0];\", \"  myList.forEach((num entry) {minVal = Math.min(minVal, entry);});\", \"  return minVal;\", \"}\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"MAX\":\n        Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n        b = Blockly.Dart.provideFunction_(\"math_max\", [\"num \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List<num> myList) {\", \"  if (myList.isEmpty) return null;\", \"  num maxVal = myList[0];\", \"  myList.forEach((num entry) {maxVal = Math.max(maxVal, entry);});\", \"  return maxVal;\", \"}\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"AVERAGE\":\n        b = Blockly.Dart.provideFunction_(\"math_mean\", [\"num \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List myList) {\", \"  // First filter list for numbers only.\", \"  List localList = new List.from(myList);\", \"  localList.removeWhere((a) => a is! num);\", \"  if (localList.isEmpty) return null;\", \"  num sumVal = 0;\", \"  localList.forEach((var entry) {sumVal += entry;});\", \"  return sumVal / localList.length;\", \"}\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"MEDIAN\":\n        b = Blockly.Dart.provideFunction_(\"math_median\", [\"num \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List myList) {\", \"  // First filter list for numbers only, then sort, then return middle value\", \"  // or the average of two middle values if list has an even number of elements.\", \"  List localList = new List.from(myList);\", \"  localList.removeWhere((a) => a is! num);\", \"  if (localList.isEmpty) return null;\", \"  localList.sort((a, b) => (a - b));\", \"  int index = localList.length ~/ 2;\", \"  if (localList.length % 2 == 1) {\", \"    return localList[index];\", \"  } else {\", \"    return (localList[index - 1] + localList[index]) / 2;\", \"  }\", \"}\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"MODE\":\n        Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n        b = Blockly.Dart.provideFunction_(\"math_modes\", [\"List \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List values) {\", \"  List modes = [];\", \"  List counts = [];\", \"  int maxCount = 0;\", \"  for (int i = 0; i < values.length; i++) {\", \"    var value = values[i];\", \"    bool found = false;\", \"    int thisCount;\", \"    for (int j = 0; j < counts.length; j++) {\", \"      if (counts[j][0] == value) {\", \"        thisCount = ++counts[j][1];\", \"        found = true;\", \"        break;\", \"      }\", \"    }\", \"    if (!found) {\", \"      counts.add([value, 1]);\", \"      thisCount = 1;\", \"    }\", \"    maxCount = Math.max(thisCount, maxCount);\", \"  }\", \"  for (int j = 0; j < counts.length; j++) {\", \"    if (counts[j][1] == maxCount) {\", \"        modes.add(counts[j][0]);\", \"    }\", \"  }\", \"  return modes;\", \"}\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"STD_DEV\":\n        Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n        b = Blockly.Dart.provideFunction_(\"math_standard_deviation\", [\"num \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List myList) {\", \"  // First filter list for numbers only.\", \"  List numbers = new List.from(myList);\", \"  numbers.removeWhere((a) => a is! num);\", \"  if (numbers.isEmpty) return null;\", \"  num n = numbers.length;\", \"  num sum = 0;\", \"  numbers.forEach((x) => sum += x);\", \"  num mean = sum / n;\", \"  num sumSquare = 0;\", \"  numbers.forEach((x) => sumSquare += Math.pow(x - mean, 2));\", \"  return Math.sqrt(sumSquare / n);\", \"}\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"RANDOM\":\n        Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n        b = Blockly.Dart.provideFunction_(\"math_random_item\", [\"dynamic \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(List myList) {\", \"  int x = new Math.Random().nextInt(myList.length);\", \"  return myList[x];\", \"}\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      default:\n        throw Error(\"Unknown operator: \" + b);\n    }\n\n    return [b, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.math_modulo = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"DIVIDEND\", Blockly.Dart.ORDER_MULTIPLICATIVE) || \"0\";\n    a = Blockly.Dart.valueToCode(a, \"DIVISOR\", Blockly.Dart.ORDER_MULTIPLICATIVE) || \"0\";\n    return [b + \" % \" + a, Blockly.Dart.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Dart.math_constrain = function (a) {\n    Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n    var b = Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_NONE) || \"0\",\n        c = Blockly.Dart.valueToCode(a, \"LOW\", Blockly.Dart.ORDER_NONE) || \"0\";\n    a = Blockly.Dart.valueToCode(a, \"HIGH\", Blockly.Dart.ORDER_NONE) || \"double.infinity\";\n    return [\"Math.min(Math.max(\" + b + \", \" + c + \"), \" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.math_random_int = function (a) {\n    Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n    var b = Blockly.Dart.valueToCode(a, \"FROM\", Blockly.Dart.ORDER_NONE) || \"0\";\n    a = Blockly.Dart.valueToCode(a, \"TO\", Blockly.Dart.ORDER_NONE) || \"0\";\n    return [Blockly.Dart.provideFunction_(\"math_random_int\", [\"int \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(num a, num b) {\", \"  if (a > b) {\", \"    // Swap a and b to ensure a is smaller.\", \"    num c = a;\", \"    a = b;\", \"    b = c;\", \"  }\", \"  return new Math.Random().nextInt(b - a + 1) + a;\", \"}\"]) + \"(\" + b + \", \" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.math_random_float = function (a) {\n    Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n    return [\"new Math.Random().nextDouble()\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.math_atan2 = function (a) {\n    Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\";\n    var b = Blockly.Dart.valueToCode(a, \"X\", Blockly.Dart.ORDER_NONE) || \"0\";\n    return [\"Math.atan2(\" + (Blockly.Dart.valueToCode(a, \"Y\", Blockly.Dart.ORDER_NONE) || \"0\") + \", \" + b + \") / Math.pi * 180\", Blockly.Dart.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Dart.procedures = {};\n\n  Blockly.Dart.procedures_defreturn = function (a) {\n    var b = Blockly.Dart.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE),\n        c = \"\";\n    Blockly.Dart.STATEMENT_PREFIX && (c += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_PREFIX, a));\n    Blockly.Dart.STATEMENT_SUFFIX && (c += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, a));\n    c && (c = Blockly.Dart.prefixLines(c, Blockly.Dart.INDENT));\n    var d = \"\";\n    Blockly.Dart.INFINITE_LOOP_TRAP && (d = Blockly.Dart.prefixLines(Blockly.Dart.injectId(Blockly.Dart.INFINITE_LOOP_TRAP, a), Blockly.Dart.INDENT));\n    var e = Blockly.Dart.statementToCode(a, \"STACK\"),\n        f = Blockly.Dart.valueToCode(a, \"RETURN\", Blockly.Dart.ORDER_NONE) || \"\",\n        g = \"\";\n    e && f && (g = c);\n    f && (f = Blockly.Dart.INDENT + \"return \" + f + \";\\n\");\n\n    for (var l = f ? \"dynamic\" : \"void\", k = [], h = 0; h < a.arguments_.length; h++) k[h] = Blockly.Dart.variableDB_.getName(a.arguments_[h], Blockly.Variables.NAME_TYPE);\n\n    c = l + \" \" + b + \"(\" + k.join(\", \") + \") {\\n\" + c + d + e + g + f + \"}\";\n    c = Blockly.Dart.scrub_(a, c);\n    Blockly.Dart.definitions_[\"%\" + b] = c;\n    return null;\n  };\n\n  Blockly.Dart.procedures_defnoreturn = Blockly.Dart.procedures_defreturn;\n\n  Blockly.Dart.procedures_callreturn = function (a) {\n    for (var b = Blockly.Dart.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.Dart.valueToCode(a, \"ARG\" + d, Blockly.Dart.ORDER_NONE) || \"null\";\n\n    return [b + \"(\" + c.join(\", \") + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.procedures_callnoreturn = function (a) {\n    return Blockly.Dart.procedures_callreturn(a)[0] + \";\\n\";\n  };\n\n  Blockly.Dart.procedures_ifreturn = function (a) {\n    var b = \"if (\" + (Blockly.Dart.valueToCode(a, \"CONDITION\", Blockly.Dart.ORDER_NONE) || \"false\") + \") {\\n\";\n    Blockly.Dart.STATEMENT_SUFFIX && (b += Blockly.Dart.prefixLines(Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, a), Blockly.Dart.INDENT));\n    a.hasReturnValue_ ? (a = Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_NONE) || \"null\", b += Blockly.Dart.INDENT + \"return \" + a + \";\\n\") : b += Blockly.Dart.INDENT + \"return;\\n\";\n    return b + \"}\\n\";\n  };\n\n  Blockly.Dart.texts = {};\n  Blockly.Dart.addReservedWords(\"Html,Math\");\n\n  Blockly.Dart.text = function (a) {\n    return [Blockly.Dart.quote_(a.getFieldValue(\"TEXT\")), Blockly.Dart.ORDER_ATOMIC];\n  };\n\n  Blockly.Dart.text_join = function (a) {\n    switch (a.itemCount_) {\n      case 0:\n        return [\"''\", Blockly.Dart.ORDER_ATOMIC];\n\n      case 1:\n        return [(Blockly.Dart.valueToCode(a, \"ADD0\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\") + \".toString()\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n\n      default:\n        for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Dart.valueToCode(a, \"ADD\" + c, Blockly.Dart.ORDER_NONE) || \"''\";\n\n        a = \"[\" + b.join(\",\") + \"].join()\";\n        return [a, Blockly.Dart.ORDER_UNARY_POSTFIX];\n    }\n  };\n\n  Blockly.Dart.text_append = function (a) {\n    var b = Blockly.Dart.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    a = Blockly.Dart.valueToCode(a, \"TEXT\", Blockly.Dart.ORDER_NONE) || \"''\";\n    return b + \" = [\" + b + \", \" + a + \"].join();\\n\";\n  };\n\n  Blockly.Dart.text_length = function (a) {\n    return [(Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\") + \".length\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_isEmpty = function (a) {\n    return [(Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\") + \".isEmpty\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_indexOf = function (a) {\n    var b = \"FIRST\" == a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        c = Blockly.Dart.valueToCode(a, \"FIND\", Blockly.Dart.ORDER_NONE) || \"''\";\n    b = (Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Blockly.Dart.ORDER_ADDITIVE] : [b, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_charAt = function (a) {\n    var b = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        c = Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\";\n\n    switch (b) {\n      case \"FIRST\":\n        return [c + \"[0]\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n\n      case \"FROM_START\":\n        return a = Blockly.Dart.getAdjusted(a, \"AT\"), [c + \"[\" + a + \"]\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n\n      case \"LAST\":\n      case \"FROM_END\":\n        return a = Blockly.Dart.getAdjusted(a, \"AT\", 1), b = Blockly.Dart.provideFunction_(\"text_get_from_end\", [\"String \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(String text, num x) {\", \"  return text[text.length - x];\", \"}\"]), [b + \"(\" + c + \", \" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n\n      case \"RANDOM\":\n        return Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\", b = Blockly.Dart.provideFunction_(\"text_random_letter\", [\"String \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(String text) {\", \"  int x = new Math.Random().nextInt(text.length);\", \"  return text[x];\", \"}\"]), [b + \"(\" + c + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n    }\n\n    throw Error(\"Unhandled option (text_charAt).\");\n  };\n\n  Blockly.Dart.text_getSubstring = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"STRING\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n    if (\"FIRST\" == c && \"LAST\" == d) a = b;else if (b.match(/^'?\\w+'?$/) || \"FROM_END\" != c && \"FROM_START\" == d) {\n      switch (c) {\n        case \"FROM_START\":\n          var e = Blockly.Dart.getAdjusted(a, \"AT1\");\n          break;\n\n        case \"FROM_END\":\n          e = Blockly.Dart.getAdjusted(a, \"AT1\", 1, !1, Blockly.Dart.ORDER_ADDITIVE);\n          e = b + \".length - \" + e;\n          break;\n\n        case \"FIRST\":\n          e = \"0\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (text_getSubstring).\");\n      }\n\n      switch (d) {\n        case \"FROM_START\":\n          var f = Blockly.Dart.getAdjusted(a, \"AT2\", 1);\n          break;\n\n        case \"FROM_END\":\n          f = Blockly.Dart.getAdjusted(a, \"AT2\", 0, !1, Blockly.Dart.ORDER_ADDITIVE);\n          f = b + \".length - \" + f;\n          break;\n\n        case \"LAST\":\n          break;\n\n        default:\n          throw Error(\"Unhandled option (text_getSubstring).\");\n      }\n\n      a = \"LAST\" == d ? b + \".substring(\" + e + \")\" : b + \".substring(\" + e + \", \" + f + \")\";\n    } else e = Blockly.Dart.getAdjusted(a, \"AT1\"), f = Blockly.Dart.getAdjusted(a, \"AT2\"), a = Blockly.Dart.provideFunction_(\"text_get_substring\", [\"String \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(String text, String where1, num at1, String where2, num at2) {\", \"  int getAt(String where, num at) {\", \"    if (where == 'FROM_END') {\", \"      at = text.length - 1 - at;\", \"    } else if (where == 'FIRST') {\", \"      at = 0;\", \"    } else if (where == 'LAST') {\", \"      at = text.length - 1;\", \"    } else if (where != 'FROM_START') {\", \"      throw 'Unhandled option (text_getSubstring).';\", \"    }\", \"    return at;\", \"  }\", \"  at1 = getAt(where1, at1);\", \"  at2 = getAt(where2, at2) + 1;\", \"  return text.substring(at1, at2);\", \"}\"]) + \"(\" + b + \", '\" + c + \"', \" + e + \", '\" + d + \"', \" + f + \")\";\n    return [a, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_changeCase = function (a) {\n    var b = {\n      UPPERCASE: \".toUpperCase()\",\n      LOWERCASE: \".toLowerCase()\",\n      TITLECASE: null\n    }[a.getFieldValue(\"CASE\")];\n    a = Blockly.Dart.valueToCode(a, \"TEXT\", b ? Blockly.Dart.ORDER_UNARY_POSTFIX : Blockly.Dart.ORDER_NONE) || \"''\";\n    return [b ? a + b : Blockly.Dart.provideFunction_(\"text_toTitleCase\", [\"String \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(String str) {\", \"  RegExp exp = new RegExp(r'\\\\b');\", \"  List<String> list = str.split(exp);\", \"  final title = new StringBuffer();\", \"  for (String part in list) {\", \"    if (part.length > 0) {\", \"      title.write(part[0].toUpperCase());\", \"      if (part.length > 0) {\", \"        title.write(part.substring(1).toLowerCase());\", \"      }\", \"    }\", \"  }\", \"  return title.toString();\", \"}\"]) + \"(\" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_trim = function (a) {\n    var b = {\n      LEFT: \".replaceFirst(new RegExp(r'^\\\\s+'), '')\",\n      RIGHT: \".replaceFirst(new RegExp(r'\\\\s+$'), '')\",\n      BOTH: \".trim()\"\n    }[a.getFieldValue(\"MODE\")];\n    return [(Blockly.Dart.valueToCode(a, \"TEXT\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\") + b, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_print = function (a) {\n    return \"print(\" + (Blockly.Dart.valueToCode(a, \"TEXT\", Blockly.Dart.ORDER_NONE) || \"''\") + \");\\n\";\n  };\n\n  Blockly.Dart.text_prompt_ext = function (a) {\n    Blockly.Dart.definitions_.import_dart_html = \"import 'dart:html' as Html;\";\n    var b = \"Html.prompt(\" + (a.getField(\"TEXT\") ? Blockly.Dart.quote_(a.getFieldValue(\"TEXT\")) : Blockly.Dart.valueToCode(a, \"TEXT\", Blockly.Dart.ORDER_NONE) || \"''\") + \", '')\";\n    \"NUMBER\" == a.getFieldValue(\"TYPE\") && (Blockly.Dart.definitions_.import_dart_math = \"import 'dart:math' as Math;\", b = \"Math.parseDouble(\" + b + \")\");\n    return [b, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_prompt = Blockly.Dart.text_prompt_ext;\n\n  Blockly.Dart.text_count = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"TEXT\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\";\n    a = Blockly.Dart.valueToCode(a, \"SUB\", Blockly.Dart.ORDER_NONE) || \"''\";\n    return [Blockly.Dart.provideFunction_(\"text_count\", [\"int \" + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + \"(String haystack, String needle) {\", \"  if (needle.length == 0) {\", \"    return haystack.length + 1;\", \"  }\", \"  int index = 0;\", \"  int count = 0;\", \"  while (index != -1) {\", \"    index = haystack.indexOf(needle, index);\", \"    if (index != -1) {\", \"      count++;\", \"     index += needle.length;\", \"    }\", \"  }\", \"  return count;\", \"}\"]) + \"(\" + b + \", \" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_replace = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"TEXT\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\",\n        c = Blockly.Dart.valueToCode(a, \"FROM\", Blockly.Dart.ORDER_NONE) || \"''\";\n    a = Blockly.Dart.valueToCode(a, \"TO\", Blockly.Dart.ORDER_NONE) || \"''\";\n    return [b + \".replaceAll(\" + c + \", \" + a + \")\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.text_reverse = function (a) {\n    return [\"new String.fromCharCodes(\" + (Blockly.Dart.valueToCode(a, \"TEXT\", Blockly.Dart.ORDER_UNARY_POSTFIX) || \"''\") + \".runes.toList().reversed)\", Blockly.Dart.ORDER_UNARY_POSTFIX];\n  };\n\n  Blockly.Dart.variables = {};\n\n  Blockly.Dart.variables_get = function (a) {\n    return [Blockly.Dart.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE), Blockly.Dart.ORDER_ATOMIC];\n  };\n\n  Blockly.Dart.variables_set = function (a) {\n    var b = Blockly.Dart.valueToCode(a, \"VALUE\", Blockly.Dart.ORDER_ASSIGNMENT) || \"0\";\n    return Blockly.Dart.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE) + \" = \" + b + \";\\n\";\n  };\n\n  Blockly.Dart.variablesDynamic = {};\n  Blockly.Dart.variables_get_dynamic = Blockly.Dart.variables_get;\n  Blockly.Dart.variables_set_dynamic = Blockly.Dart.variables_set;\n  return Blockly.Dart;\n};","map":null,"metadata":{},"sourceType":"script"}