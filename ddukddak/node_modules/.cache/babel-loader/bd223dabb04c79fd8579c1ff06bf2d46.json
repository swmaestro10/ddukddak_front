{"ast":null,"code":"import Blockly from 'node-blockly/browser';\nconst helloWorld = {\n  name: 'HelloWorld',\n  category: 'Demo',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: 'Hello %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NAME',\n          check: 'String'\n        }],\n        output: 'String',\n        colour: 160,\n        tooltip: 'Says Hello'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('NAME'), \"'\") || '\\'\\'';\n    const code = \"console.log('Hello \".concat(message, \"')\");\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\n  }\n};\nconst test_print = {\n  name: 'test_print',\n  category: 'test',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: 'print %1',\n        args0: [{\n          type: 'field_input',\n          name: 'PRINT'\n        }],\n        output: 'String',\n        colour: 100,\n        tooltip: 'print(_)'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('PRINT'), \"'\") || '\\'\\'';\n    const code = \"print(\".concat(message, \")\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst test_operation = {\n  name: 'test_operation',\n  category: 'test',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '%1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'select',\n          options: [[\"+\", \"+\"], [\"-\", \"-\"], [\"*\", \"*\"], [\"/\", \"/\"]]\n        }],\n        output: 'String',\n        colour: 120,\n        tooltip: '+-*/'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('select'), \"'\");\n    const code = \"\".concat(message);\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst short_math = {\n  name: 'short_math',\n  category: 'test',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '%1 %2 = %3 %4',\n        args0: [{\n          type: 'input_value',\n          name: 'number_a',\n          check: 'Number'\n        }, {\n          type: 'field_dropdown',\n          name: 'select_one',\n          options: [[\"+\", \"+\"], [\"-\", \"-\"], [\"*\", \"*\"], [\"/\", \"/\"]]\n        }, {\n          type: 'input_dummy'\n        }, {\n          type: 'input_value',\n          name: 'number_b',\n          check: 'Number'\n        }],\n        output: 'String',\n        colour: 360,\n        tooltip: 'short version of arithmetic calculations',\n        inputsInline: true //\t\t\t\t\tnextStatement : null,\n        //\t\t\t\t\tpreviousStatement : null,\n\n      });\n    }\n  },\n  generator: block => {\n    const num_1 = \"'\".concat(block.getFieldValue('number_a'), \"'\");\n    const num_2 = \"'\".concat(block.getFieldValue('number_b'), \"'\");\n    const sel = \"'\".concat(block.getFieldValue('select_one'), \"'\");\n    const code = num_1 + sel + \"= \" + num_2;\n    return [code, Blockly.JavaScript.ORDER_MEMBER];\n  }\n};\nexport { helloWorld, test_print, test_operation, short_math };","map":{"version":3,"sources":["/home/codeup/ddukddak/ddukddak_front/ddukddak/src/container/blocks.js"],"names":["Blockly","helloWorld","name","category","block","init","jsonInit","message0","args0","type","check","output","colour","tooltip","generator","message","getFieldValue","code","JavaScript","ORDER_MEMBER","test_print","Python","ORDER_ATOMIC","test_operation","options","short_math","inputsInline","num_1","num_2","sel"],"mappings":"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","sourcesContent":["import Blockly from 'node-blockly/browser';\n\nconst helloWorld = {\n    name: 'HelloWorld',\n    category: 'Demo',\n    block: {\n      init: function () {\n        this.jsonInit(\n\t\t{\n          message0: 'Hello %1',\n          args0: [{\n              type: 'field_input',\n              name: 'NAME',\n\t\t\t  check: 'String', \n\t\t\t},],\n          output: 'String',\n          colour: 160,\n          tooltip: 'Says Hello',\n\t\t}\n\t\t);\n      },\n    },\n    generator: (block) => {\n\t  const message = `'${block.getFieldValue('NAME')}'` || '\\'\\'';\n\t  const code = `console.log('Hello ${message}')`;\n      return [code, Blockly.JavaScript.ORDER_MEMBER];\n    },\n  };\n\nconst test_print = {\n\tname : 'test_print',\n\tcategory : 'test',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit(\n\t\t\t\t{\n\t\t\t\t\t\tmessage0 : 'print %1',\n\t\t\t\t\t\targs0 : [{\n\t\t\t\t\t\t\ttype : 'field_input',\n\t\t\t\t\t\t\tname : 'PRINT',\n\t\t\t\t\t\t},],\n\t\t\t\t\t\toutput : 'String',\n\t\t\t\t\t\tcolour : 100,\n\t\t\t\t\t\ttooltip : 'print(_)',\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t},\n    generator: (block) => {\n\t\tconst message = `'${block.getFieldValue('PRINT')}'` || '\\'\\'';\n\t\tconst code = `print(${message})`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t  },  \n};\nconst test_operation = {\n\tname : 'test_operation',\n\tcategory : 'test',\n\tblock : {\n\t\tinit : function(){\n\t\t\tthis.jsonInit(\n\t\t\t\t{\n\t\t\t\t\tmessage0 : '%1',\n\t\t\t\t\targs0 : [{\n\t\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\t\tname : 'select',\n\t\t\t\t\t\toptions : [\n\t\t\t\t\t\t\t[\"+\",\"+\"],[\"-\",\"-\"],[\"*\",\"*\"],[\"/\",\"/\"]\n\t\t\t\t\t\t],\n\t\t\t\t\t},],\n\t\t\t\t\toutput : 'String',\n\t\t\t\t\tcolour : 120,\n\t\t\t\t\ttooltip : '+-*/',\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t},\n\tgenerator: (block) => {\n\t\tconst message = `'${block.getFieldValue('select')}'`;\n\t\tconst code = `${message}`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\t\n};\n\nconst short_math = {\n\tname : 'short_math',\n\tcategory : 'test',\n\tblock : {\n\t\tinit : function(){\n\t\t\tthis.jsonInit(\n\t\t\t\t{\n\t\t\t\t\tmessage0 : '%1 %2 = %3 %4',\n\t\t\t\t\targs0 : [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype : 'input_value',\n\t\t\t\t\t\t\tname : 'number_a',\n\t\t\t\t\t\t\tcheck : 'Number'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\t\t\tname : 'select_one',\n\t\t\t\t\t\t\toptions : [\n\t\t\t\t\t\t\t\t[\"+\",\"+\"],[\"-\",\"-\"],[\"*\",\"*\"],[\"/\",\"/\"]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype : 'input_dummy',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype : 'input_value',\n\t\t\t\t\t\t\tname : 'number_b',\n\t\t\t\t\t\t\tcheck : 'Number'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\toutput : 'String',\n\t\t\t\t\tcolour : 360,\n\t\t\t\t\ttooltip : 'short version of arithmetic calculations',\n\t\t\t\t\tinputsInline : true,\n//\t\t\t\t\tnextStatement : null,\n//\t\t\t\t\tpreviousStatement : null,\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t},\n\tgenerator: (block) => {\n\t\tconst num_1 = `'${block.getFieldValue('number_a')}'`; \n\t\tconst num_2 = `'${block.getFieldValue('number_b')}'`;\n\t\tconst sel = `'${block.getFieldValue('select_one')}'`;\n\t\tconst code = num_1+sel+\"= \"+num_2;\n\t\treturn [code, Blockly.JavaScript.ORDER_MEMBER];\n\t},\n};\n\nexport {\n    helloWorld,\n    test_print,\n    test_operation,\n    short_math\n};"]},"metadata":{},"sourceType":"module"}