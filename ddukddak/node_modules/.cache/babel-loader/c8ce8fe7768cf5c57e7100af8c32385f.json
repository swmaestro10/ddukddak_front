{"ast":null,"code":"module.exports = function (Blockly) {\n  // Do not edit this file; automatically generated by build.py.\n  'use strict';\n\n  Blockly.Python = new Blockly.Generator(\"Python\");\n  Blockly.Python.addReservedWords(\"False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip\");\n  Blockly.Python.ORDER_ATOMIC = 0;\n  Blockly.Python.ORDER_COLLECTION = 1;\n  Blockly.Python.ORDER_STRING_CONVERSION = 1;\n  Blockly.Python.ORDER_MEMBER = 2.1;\n  Blockly.Python.ORDER_FUNCTION_CALL = 2.2;\n  Blockly.Python.ORDER_EXPONENTIATION = 3;\n  Blockly.Python.ORDER_UNARY_SIGN = 4;\n  Blockly.Python.ORDER_BITWISE_NOT = 4;\n  Blockly.Python.ORDER_MULTIPLICATIVE = 5;\n  Blockly.Python.ORDER_ADDITIVE = 6;\n  Blockly.Python.ORDER_BITWISE_SHIFT = 7;\n  Blockly.Python.ORDER_BITWISE_AND = 8;\n  Blockly.Python.ORDER_BITWISE_XOR = 9;\n  Blockly.Python.ORDER_BITWISE_OR = 10;\n  Blockly.Python.ORDER_RELATIONAL = 11;\n  Blockly.Python.ORDER_LOGICAL_NOT = 12;\n  Blockly.Python.ORDER_LOGICAL_AND = 13;\n  Blockly.Python.ORDER_LOGICAL_OR = 14;\n  Blockly.Python.ORDER_CONDITIONAL = 15;\n  Blockly.Python.ORDER_LAMBDA = 16;\n  Blockly.Python.ORDER_NONE = 99;\n  Blockly.Python.ORDER_OVERRIDES = [[Blockly.Python.ORDER_FUNCTION_CALL, Blockly.Python.ORDER_MEMBER], [Blockly.Python.ORDER_FUNCTION_CALL, Blockly.Python.ORDER_FUNCTION_CALL], [Blockly.Python.ORDER_MEMBER, Blockly.Python.ORDER_MEMBER], [Blockly.Python.ORDER_MEMBER, Blockly.Python.ORDER_FUNCTION_CALL], [Blockly.Python.ORDER_LOGICAL_NOT, Blockly.Python.ORDER_LOGICAL_NOT], [Blockly.Python.ORDER_LOGICAL_AND, Blockly.Python.ORDER_LOGICAL_AND], [Blockly.Python.ORDER_LOGICAL_OR, Blockly.Python.ORDER_LOGICAL_OR]];\n\n  Blockly.Python.init = function (a) {\n    Blockly.Python.PASS = this.INDENT + \"pass\\n\";\n    Blockly.Python.definitions_ = Object.create(null);\n    Blockly.Python.functionNames_ = Object.create(null);\n    Blockly.Python.variableDB_ ? Blockly.Python.variableDB_.reset() : Blockly.Python.variableDB_ = new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n    Blockly.Python.variableDB_.setVariableMap(a.getVariableMap());\n\n    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(Blockly.Python.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE) + \" = None\");\n\n    a = Blockly.Variables.allUsedVarModels(a);\n\n    for (d = 0; d < a.length; d++) b.push(Blockly.Python.variableDB_.getName(a[d].getId(), Blockly.Variables.NAME_TYPE) + \" = None\");\n\n    Blockly.Python.definitions_.variables = b.join(\"\\n\");\n  };\n\n  Blockly.Python.finish = function (a) {\n    var b = [],\n        c = [],\n        d;\n\n    for (d in Blockly.Python.definitions_) {\n      var e = Blockly.Python.definitions_[d];\n      e.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/) ? b.push(e) : c.push(e);\n    }\n\n    delete Blockly.Python.definitions_;\n    delete Blockly.Python.functionNames_;\n    Blockly.Python.variableDB_.reset();\n    return (b.join(\"\\n\") + \"\\n\\n\" + c.join(\"\\n\\n\")).replace(/\\n\\n+/g, \"\\n\\n\").replace(/\\n*$/, \"\\n\\n\\n\") + a;\n  };\n\n  Blockly.Python.scrubNakedValue = function (a) {\n    return a + \"\\n\";\n  };\n\n  Blockly.Python.quote_ = function (a) {\n    a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\");\n    var b = \"'\";\n    -1 !== a.indexOf(\"'\") && (-1 === a.indexOf('\"') ? b = '\"' : a = a.replace(/'/g, \"\\\\'\"));\n    return b + a + b;\n  };\n\n  Blockly.Python.scrub_ = function (a, b, c) {\n    var d = \"\";\n\n    if (!a.outputConnection || !a.outputConnection.targetConnection) {\n      var e = a.getCommentText();\n      (e = Blockly.utils.string.wrap(e, Blockly.Python.COMMENT_WRAP - 3)) && (d = a.getProcedureDef ? d + ('\"\"\"' + e + '\\n\"\"\"\\n') : d + Blockly.Python.prefixLines(e + \"\\n\", \"# \"));\n\n      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.Python.allNestedComments(e)) && (d += Blockly.Python.prefixLines(e, \"# \"));\n    }\n\n    a = a.nextConnection && a.nextConnection.targetBlock();\n    c = c ? \"\" : Blockly.Python.blockToCode(a);\n    return d + b + c;\n  };\n\n  Blockly.Python.getAdjustedInt = function (a, b, c, d) {\n    c = c || 0;\n    a.workspace.options.oneBasedIndex && c--;\n    var e = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n    a = Blockly.Python.valueToCode(a, b, c ? Blockly.Python.ORDER_ADDITIVE : Blockly.Python.ORDER_NONE) || e;\n    Blockly.isNumber(a) ? (a = parseInt(a, 10) + c, d && (a = -a)) : (a = 0 < c ? \"int(\" + a + \" + \" + c + \")\" : 0 > c ? \"int(\" + a + \" - \" + -c + \")\" : \"int(\" + a + \")\", d && (a = \"-\" + a));\n    return a;\n  };\n\n  Blockly.Python.colour = {};\n\n  Blockly.Python.colour_picker = function (a) {\n    return [Blockly.Python.quote_(a.getFieldValue(\"COLOUR\")), Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.colour_random = function (a) {\n    Blockly.Python.definitions_.import_random = \"import random\";\n    return [\"'#%06x' % random.randint(0, 2**24 - 1)\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.colour_rgb = function (a) {\n    var b = Blockly.Python.provideFunction_(\"colour_rgb\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(r, g, b):\", \"  r = round(min(100, max(0, r)) * 2.55)\", \"  g = round(min(100, max(0, g)) * 2.55)\", \"  b = round(min(100, max(0, b)) * 2.55)\", \"  return '#%02x%02x%02x' % (r, g, b)\"]),\n        c = Blockly.Python.valueToCode(a, \"RED\", Blockly.Python.ORDER_NONE) || 0,\n        d = Blockly.Python.valueToCode(a, \"GREEN\", Blockly.Python.ORDER_NONE) || 0;\n    a = Blockly.Python.valueToCode(a, \"BLUE\", Blockly.Python.ORDER_NONE) || 0;\n    return [b + \"(\" + c + \", \" + d + \", \" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.colour_blend = function (a) {\n    var b = Blockly.Python.provideFunction_(\"colour_blend\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(colour1, colour2, ratio):\", \"  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\", \"  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\", \"  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\", \"  ratio = min(1, max(0, ratio))\", \"  r = round(r1 * (1 - ratio) + r2 * ratio)\", \"  g = round(g1 * (1 - ratio) + g2 * ratio)\", \"  b = round(b1 * (1 - ratio) + b2 * ratio)\", \"  return '#%02x%02x%02x' % (r, g, b)\"]),\n        c = Blockly.Python.valueToCode(a, \"COLOUR1\", Blockly.Python.ORDER_NONE) || \"'#000000'\",\n        d = Blockly.Python.valueToCode(a, \"COLOUR2\", Blockly.Python.ORDER_NONE) || \"'#000000'\";\n    a = Blockly.Python.valueToCode(a, \"RATIO\", Blockly.Python.ORDER_NONE) || 0;\n    return [b + \"(\" + c + \", \" + d + \", \" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists = {};\n\n  Blockly.Python.lists_create_empty = function (a) {\n    return [\"[]\", Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.lists_create_with = function (a) {\n    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Python.valueToCode(a, \"ADD\" + c, Blockly.Python.ORDER_NONE) || \"None\";\n\n    return [\"[\" + b.join(\", \") + \"]\", Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.lists_repeat = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"ITEM\", Blockly.Python.ORDER_NONE) || \"None\";\n    a = Blockly.Python.valueToCode(a, \"NUM\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\";\n    return [\"[\" + b + \"] * \" + a, Blockly.Python.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Python.lists_length = function (a) {\n    return [\"len(\" + (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"[]\") + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists_isEmpty = function (a) {\n    return [\"not len(\" + (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"[]\") + \")\", Blockly.Python.ORDER_LOGICAL_NOT];\n  };\n\n  Blockly.Python.lists_indexOf = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"FIND\", Blockly.Python.ORDER_NONE) || \"[]\",\n        c = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"''\";\n    if (a.workspace.options.oneBasedIndex) var d = \" 0\",\n        e = \" + 1\",\n        f = \"\";else d = \" -1\", e = \"\", f = \" - 1\";\n    if (\"FIRST\" == a.getFieldValue(\"END\")) return a = Blockly.Python.provideFunction_(\"first_index\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(my_list, elem):\", \"  try: index = my_list.index(elem)\" + e, \"  except: index =\" + d, \"  return index\"]), [a + \"(\" + c + \", \" + b + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n    a = Blockly.Python.provideFunction_(\"last_index\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(my_list, elem):\", \"  try: index = len(my_list) - my_list[::-1].index(elem)\" + f, \"  except: index =\" + d, \"  return index\"]);\n    return [a + \"(\" + c + \", \" + b + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists_getIndex = function (a) {\n    var b = a.getFieldValue(\"MODE\") || \"GET\",\n        c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = Blockly.Python.valueToCode(a, \"VALUE\", \"RANDOM\" == c ? Blockly.Python.ORDER_NONE : Blockly.Python.ORDER_MEMBER) || \"[]\";\n\n    switch (c) {\n      case \"FIRST\":\n        if (\"GET\" == b) return [d + \"[0]\", Blockly.Python.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop(0)\", Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".pop(0)\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"GET\" == b) return [d + \"[-1]\", Blockly.Python.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop()\", Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".pop()\\n\";\n        break;\n\n      case \"FROM_START\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT\");\n        if (\"GET\" == b) return [d + \"[\" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop(\" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".pop(\" + a + \")\\n\";\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT\", 1, !0);\n        if (\"GET\" == b) return [d + \"[\" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop(\" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".pop(\" + a + \")\\n\";\n        break;\n\n      case \"RANDOM\":\n        Blockly.Python.definitions_.import_random = \"import random\";\n        if (\"GET\" == b) return [\"random.choice(\" + d + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n        d = Blockly.Python.provideFunction_(\"lists_remove_random_item\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(myList):\", \"  x = int(random.random() * len(myList))\", \"  return myList.pop(x)\"]) + \"(\" + d + \")\";\n        if (\"GET_REMOVE\" == b) return [d, Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \"\\n\";\n    }\n\n    throw Error(\"Unhandled combination (lists_getIndex).\");\n  };\n\n  Blockly.Python.lists_setIndex = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_MEMBER) || \"[]\",\n        c = a.getFieldValue(\"MODE\") || \"GET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        e = Blockly.Python.valueToCode(a, \"TO\", Blockly.Python.ORDER_NONE) || \"None\";\n\n    switch (d) {\n      case \"FIRST\":\n        if (\"SET\" == c) return b + \"[0] = \" + e + \"\\n\";\n        if (\"INSERT\" == c) return b + \".insert(0, \" + e + \")\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"SET\" == c) return b + \"[-1] = \" + e + \"\\n\";\n        if (\"INSERT\" == c) return b + \".append(\" + e + \")\\n\";\n        break;\n\n      case \"FROM_START\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT\");\n        if (\"SET\" == c) return b + \"[\" + a + \"] = \" + e + \"\\n\";\n        if (\"INSERT\" == c) return b + \".insert(\" + a + \", \" + e + \")\\n\";\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT\", 1, !0);\n        if (\"SET\" == c) return b + \"[\" + a + \"] = \" + e + \"\\n\";\n        if (\"INSERT\" == c) return b + \".insert(\" + a + \", \" + e + \")\\n\";\n        break;\n\n      case \"RANDOM\":\n        Blockly.Python.definitions_.import_random = \"import random\";\n        b.match(/^\\w+$/) ? a = \"\" : (a = Blockly.Python.variableDB_.getDistinctName(\"tmp_list\", Blockly.Variables.NAME_TYPE), d = a + \" = \" + b + \"\\n\", b = a, a = d);\n        d = Blockly.Python.variableDB_.getDistinctName(\"tmp_x\", Blockly.Variables.NAME_TYPE);\n        a += d + \" = int(random.random() * len(\" + b + \"))\\n\";\n        if (\"SET\" == c) return a + (b + \"[\" + d + \"] = \" + e + \"\\n\");\n        if (\"INSERT\" == c) return a + (b + \".insert(\" + d + \", \" + e + \")\\n\");\n    }\n\n    throw Error(\"Unhandled combination (lists_setIndex).\");\n  };\n\n  Blockly.Python.lists_getSublist = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_MEMBER) || \"[]\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n\n    switch (c) {\n      case \"FROM_START\":\n        c = Blockly.Python.getAdjustedInt(a, \"AT1\");\n        \"0\" == c && (c = \"\");\n        break;\n\n      case \"FROM_END\":\n        c = Blockly.Python.getAdjustedInt(a, \"AT1\", 1, !0);\n        break;\n\n      case \"FIRST\":\n        c = \"\";\n        break;\n\n      default:\n        throw Error(\"Unhandled option (lists_getSublist)\");\n    }\n\n    switch (d) {\n      case \"FROM_START\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT2\", 1);\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT2\", 0, !0);\n        Blockly.isNumber(String(a)) ? \"0\" == a && (a = \"\") : (Blockly.Python.definitions_.import_sys = \"import sys\", a += \" or sys.maxsize\");\n        break;\n\n      case \"LAST\":\n        a = \"\";\n        break;\n\n      default:\n        throw Error(\"Unhandled option (lists_getSublist)\");\n    }\n\n    return [b + \"[\" + c + \" : \" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.lists_sort = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_NONE) || \"[]\",\n        c = a.getFieldValue(\"TYPE\");\n    a = \"1\" === a.getFieldValue(\"DIRECTION\") ? \"False\" : \"True\";\n    return [Blockly.Python.provideFunction_(\"lists_sort\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(my_list, type, reverse):\", \"  def try_float(s):\", \"    try:\", \"      return float(s)\", \"    except:\", \"      return 0\", \"  key_funcs = {\", '    \"NUMERIC\": try_float,', '    \"TEXT\": str,', '    \"IGNORE_CASE\": lambda s: str(s).lower()', \"  }\", \"  key_func = key_funcs[type]\", \"  list_cpy = list(my_list)\", \"  return sorted(list_cpy, key=key_func, reverse=reverse)\"]) + \"(\" + b + ', \"' + c + '\", ' + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists_split = function (a) {\n    var b = a.getFieldValue(\"MODE\");\n    if (\"SPLIT\" == b) b = Blockly.Python.valueToCode(a, \"INPUT\", Blockly.Python.ORDER_MEMBER) || \"''\", a = Blockly.Python.valueToCode(a, \"DELIM\", Blockly.Python.ORDER_NONE), a = b + \".split(\" + a + \")\";else if (\"JOIN\" == b) b = Blockly.Python.valueToCode(a, \"INPUT\", Blockly.Python.ORDER_NONE) || \"[]\", a = Blockly.Python.valueToCode(a, \"DELIM\", Blockly.Python.ORDER_MEMBER) || \"''\", a = a + \".join(\" + b + \")\";else throw Error(\"Unknown mode: \" + b);\n    return [a, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists_reverse = function (a) {\n    return [\"list(reversed(\" + (Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_NONE) || \"[]\") + \"))\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.logic = {};\n\n  Blockly.Python.controls_if = function (a) {\n    var b = 0,\n        c = \"\";\n    Blockly.Python.STATEMENT_PREFIX && (c += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, a));\n\n    do {\n      var d = Blockly.Python.valueToCode(a, \"IF\" + b, Blockly.Python.ORDER_NONE) || \"False\";\n      var e = Blockly.Python.statementToCode(a, \"DO\" + b) || Blockly.Python.PASS;\n      Blockly.Python.STATEMENT_SUFFIX && (e = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a), Blockly.Python.INDENT) + e);\n      c += (0 == b ? \"if \" : \"elif \") + d + \":\\n\" + e;\n      ++b;\n    } while (a.getInput(\"IF\" + b));\n\n    if (a.getInput(\"ELSE\") || Blockly.Python.STATEMENT_SUFFIX) e = Blockly.Python.statementToCode(a, \"ELSE\") || Blockly.Python.PASS, Blockly.Python.STATEMENT_SUFFIX && (e = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a), Blockly.Python.INDENT) + e), c += \"else:\\n\" + e;\n    return c;\n  };\n\n  Blockly.Python.controls_ifelse = Blockly.Python.controls_if;\n\n  Blockly.Python.logic_compare = function (a) {\n    var b = {\n      EQ: \"==\",\n      NEQ: \"!=\",\n      LT: \"<\",\n      LTE: \"<=\",\n      GT: \">\",\n      GTE: \">=\"\n    }[a.getFieldValue(\"OP\")],\n        c = Blockly.Python.ORDER_RELATIONAL,\n        d = Blockly.Python.valueToCode(a, \"A\", c) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"B\", c) || \"0\";\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.Python.logic_operation = function (a) {\n    var b = \"AND\" == a.getFieldValue(\"OP\") ? \"and\" : \"or\",\n        c = \"and\" == b ? Blockly.Python.ORDER_LOGICAL_AND : Blockly.Python.ORDER_LOGICAL_OR,\n        d = Blockly.Python.valueToCode(a, \"A\", c);\n    a = Blockly.Python.valueToCode(a, \"B\", c);\n\n    if (d || a) {\n      var e = \"and\" == b ? \"True\" : \"False\";\n      d || (d = e);\n      a || (a = e);\n    } else a = d = \"False\";\n\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.Python.logic_negate = function (a) {\n    return [\"not \" + (Blockly.Python.valueToCode(a, \"BOOL\", Blockly.Python.ORDER_LOGICAL_NOT) || \"True\"), Blockly.Python.ORDER_LOGICAL_NOT];\n  };\n\n  Blockly.Python.logic_boolean = function (a) {\n    return [\"TRUE\" == a.getFieldValue(\"BOOL\") ? \"True\" : \"False\", Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.logic_null = function (a) {\n    return [\"None\", Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.logic_ternary = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"IF\", Blockly.Python.ORDER_CONDITIONAL) || \"False\",\n        c = Blockly.Python.valueToCode(a, \"THEN\", Blockly.Python.ORDER_CONDITIONAL) || \"None\";\n    a = Blockly.Python.valueToCode(a, \"ELSE\", Blockly.Python.ORDER_CONDITIONAL) || \"None\";\n    return [c + \" if \" + b + \" else \" + a, Blockly.Python.ORDER_CONDITIONAL];\n  };\n\n  Blockly.Python.loops = {};\n\n  Blockly.Python.controls_repeat_ext = function (a) {\n    var b = a.getField(\"TIMES\") ? String(parseInt(a.getFieldValue(\"TIMES\"), 10)) : Blockly.Python.valueToCode(a, \"TIMES\", Blockly.Python.ORDER_NONE) || \"0\";\n    b = Blockly.isNumber(b) ? parseInt(b, 10) : \"int(\" + b + \")\";\n    var c = Blockly.Python.statementToCode(a, \"DO\");\n    c = Blockly.Python.addLoopTrap(c, a) || Blockly.Python.PASS;\n    return \"for \" + Blockly.Python.variableDB_.getDistinctName(\"count\", Blockly.Variables.NAME_TYPE) + \" in range(\" + b + \"):\\n\" + c;\n  };\n\n  Blockly.Python.controls_repeat = Blockly.Python.controls_repeat_ext;\n\n  Blockly.Python.controls_whileUntil = function (a) {\n    var b = \"UNTIL\" == a.getFieldValue(\"MODE\"),\n        c = Blockly.Python.valueToCode(a, \"BOOL\", b ? Blockly.Python.ORDER_LOGICAL_NOT : Blockly.Python.ORDER_NONE) || \"False\",\n        d = Blockly.Python.statementToCode(a, \"DO\");\n    d = Blockly.Python.addLoopTrap(d, a) || Blockly.Python.PASS;\n    b && (c = \"not \" + c);\n    return \"while \" + c + \":\\n\" + d;\n  };\n\n  Blockly.Python.controls_for = function (a) {\n    var b = Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.Python.valueToCode(a, \"FROM\", Blockly.Python.ORDER_NONE) || \"0\",\n        d = Blockly.Python.valueToCode(a, \"TO\", Blockly.Python.ORDER_NONE) || \"0\",\n        e = Blockly.Python.valueToCode(a, \"BY\", Blockly.Python.ORDER_NONE) || \"1\",\n        f = Blockly.Python.statementToCode(a, \"DO\");\n    f = Blockly.Python.addLoopTrap(f, a) || Blockly.Python.PASS;\n\n    var h = \"\",\n        g = function () {\n      return Blockly.Python.provideFunction_(\"upRange\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(start, stop, step):\", \"  while start <= stop:\", \"    yield start\", \"    start += abs(step)\"]);\n    },\n        k = function () {\n      return Blockly.Python.provideFunction_(\"downRange\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(start, stop, step):\", \"  while start >= stop:\", \"    yield start\", \"    start -= abs(step)\"]);\n    };\n\n    a = function (a, b, c) {\n      return \"(\" + a + \" <= \" + b + \") and \" + g() + \"(\" + a + \", \" + b + \", \" + c + \") or \" + k() + \"(\" + a + \", \" + b + \", \" + c + \")\";\n    };\n\n    if (Blockly.isNumber(c) && Blockly.isNumber(d) && Blockly.isNumber(e)) c = parseFloat(c), d = parseFloat(d), e = Math.abs(parseFloat(e)), 0 === c % 1 && 0 === d % 1 && 0 === e % 1 ? (c <= d ? (d++, a = 0 == c && 1 == e ? d : c + \", \" + d, 1 != e && (a += \", \" + e)) : (d--, a = c + \", \" + d + \", -\" + e), a = \"range(\" + a + \")\") : (a = c < d ? g() : k(), a += \"(\" + c + \", \" + d + \", \" + e + \")\");else {\n      var l = function (a, c) {\n        if (Blockly.isNumber(a)) a = parseFloat(a);else if (a.match(/^\\w+$/)) a = \"float(\" + a + \")\";else {\n          var d = Blockly.Python.variableDB_.getDistinctName(b + c, Blockly.Variables.NAME_TYPE);\n          h += d + \" = float(\" + a + \")\\n\";\n          a = d;\n        }\n        return a;\n      };\n\n      c = l(c, \"_start\");\n      d = l(d, \"_end\");\n      l(e, \"_inc\");\n      a = \"number\" == typeof c && \"number\" == typeof d ? c < d ? g(c, d, e) : k(c, d, e) : a(c, d, e);\n    }\n    return h += \"for \" + b + \" in \" + a + \":\\n\" + f;\n  };\n\n  Blockly.Python.controls_forEach = function (a) {\n    var b = Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_RELATIONAL) || \"[]\",\n        d = Blockly.Python.statementToCode(a, \"DO\");\n    d = Blockly.Python.addLoopTrap(d, a) || Blockly.Python.PASS;\n    return \"for \" + b + \" in \" + c + \":\\n\" + d;\n  };\n\n  Blockly.Python.controls_flow_statements = function (a) {\n    var b = \"\";\n    Blockly.Python.STATEMENT_PREFIX && (b += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, a));\n    Blockly.Python.STATEMENT_SUFFIX && (b += Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a));\n\n    if (Blockly.Python.STATEMENT_PREFIX) {\n      var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);\n      c && !c.suppressPrefixSuffix && (b += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, c));\n    }\n\n    switch (a.getFieldValue(\"FLOW\")) {\n      case \"BREAK\":\n        return b + \"break\\n\";\n\n      case \"CONTINUE\":\n        return b + \"continue\\n\";\n    }\n\n    throw Error(\"Unknown flow statement.\");\n  };\n\n  Blockly.Python.math = {};\n  Blockly.Python.addReservedWords(\"math,random,Number\");\n\n  Blockly.Python.math_number = function (a) {\n    a = parseFloat(a.getFieldValue(\"NUM\"));\n\n    if (Infinity == a) {\n      a = 'float(\"inf\")';\n      var b = Blockly.Python.ORDER_FUNCTION_CALL;\n    } else -Infinity == a ? (a = '-float(\"inf\")', b = Blockly.Python.ORDER_UNARY_SIGN) : b = 0 > a ? Blockly.Python.ORDER_UNARY_SIGN : Blockly.Python.ORDER_ATOMIC;\n\n    return [a, b];\n  };\n\n  Blockly.Python.math_arithmetic = function (a) {\n    var b = {\n      ADD: [\" + \", Blockly.Python.ORDER_ADDITIVE],\n      MINUS: [\" - \", Blockly.Python.ORDER_ADDITIVE],\n      MULTIPLY: [\" * \", Blockly.Python.ORDER_MULTIPLICATIVE],\n      DIVIDE: [\" / \", Blockly.Python.ORDER_MULTIPLICATIVE],\n      POWER: [\" ** \", Blockly.Python.ORDER_EXPONENTIATION]\n    }[a.getFieldValue(\"OP\")],\n        c = b[0];\n    b = b[1];\n    var d = Blockly.Python.valueToCode(a, \"A\", b) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"B\", b) || \"0\";\n    return [d + c + a, b];\n  };\n\n  Blockly.Python.math_single = function (a) {\n    var b = a.getFieldValue(\"OP\");\n\n    if (\"NEG\" == b) {\n      var c = Blockly.Python.valueToCode(a, \"NUM\", Blockly.Python.ORDER_UNARY_SIGN) || \"0\";\n      return [\"-\" + c, Blockly.Python.ORDER_UNARY_SIGN];\n    }\n\n    Blockly.Python.definitions_.import_math = \"import math\";\n    a = \"SIN\" == b || \"COS\" == b || \"TAN\" == b ? Blockly.Python.valueToCode(a, \"NUM\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\" : Blockly.Python.valueToCode(a, \"NUM\", Blockly.Python.ORDER_NONE) || \"0\";\n\n    switch (b) {\n      case \"ABS\":\n        c = \"math.fabs(\" + a + \")\";\n        break;\n\n      case \"ROOT\":\n        c = \"math.sqrt(\" + a + \")\";\n        break;\n\n      case \"LN\":\n        c = \"math.log(\" + a + \")\";\n        break;\n\n      case \"LOG10\":\n        c = \"math.log10(\" + a + \")\";\n        break;\n\n      case \"EXP\":\n        c = \"math.exp(\" + a + \")\";\n        break;\n\n      case \"POW10\":\n        c = \"math.pow(10,\" + a + \")\";\n        break;\n\n      case \"ROUND\":\n        c = \"round(\" + a + \")\";\n        break;\n\n      case \"ROUNDUP\":\n        c = \"math.ceil(\" + a + \")\";\n        break;\n\n      case \"ROUNDDOWN\":\n        c = \"math.floor(\" + a + \")\";\n        break;\n\n      case \"SIN\":\n        c = \"math.sin(\" + a + \" / 180.0 * math.pi)\";\n        break;\n\n      case \"COS\":\n        c = \"math.cos(\" + a + \" / 180.0 * math.pi)\";\n        break;\n\n      case \"TAN\":\n        c = \"math.tan(\" + a + \" / 180.0 * math.pi)\";\n    }\n\n    if (c) return [c, Blockly.Python.ORDER_FUNCTION_CALL];\n\n    switch (b) {\n      case \"ASIN\":\n        c = \"math.asin(\" + a + \") / math.pi * 180\";\n        break;\n\n      case \"ACOS\":\n        c = \"math.acos(\" + a + \") / math.pi * 180\";\n        break;\n\n      case \"ATAN\":\n        c = \"math.atan(\" + a + \") / math.pi * 180\";\n        break;\n\n      default:\n        throw Error(\"Unknown math operator: \" + b);\n    }\n\n    return [c, Blockly.Python.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Python.math_constant = function (a) {\n    var b = {\n      PI: [\"math.pi\", Blockly.Python.ORDER_MEMBER],\n      E: [\"math.e\", Blockly.Python.ORDER_MEMBER],\n      GOLDEN_RATIO: [\"(1 + math.sqrt(5)) / 2\", Blockly.Python.ORDER_MULTIPLICATIVE],\n      SQRT2: [\"math.sqrt(2)\", Blockly.Python.ORDER_MEMBER],\n      SQRT1_2: [\"math.sqrt(1.0 / 2)\", Blockly.Python.ORDER_MEMBER],\n      INFINITY: [\"float('inf')\", Blockly.Python.ORDER_ATOMIC]\n    };\n    a = a.getFieldValue(\"CONSTANT\");\n    \"INFINITY\" != a && (Blockly.Python.definitions_.import_math = \"import math\");\n    return b[a];\n  };\n\n  Blockly.Python.math_number_property = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"NUMBER_TO_CHECK\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\",\n        c = a.getFieldValue(\"PROPERTY\");\n    if (\"PRIME\" == c) return Blockly.Python.definitions_.import_math = \"import math\", Blockly.Python.definitions_.from_numbers_import_Number = \"from numbers import Number\", [Blockly.Python.provideFunction_(\"math_isPrime\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(n):\", \"  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\", \"  # If n is not a number but a string, try parsing it.\", \"  if not isinstance(n, Number):\", \"    try:\", \"      n = float(n)\", \"    except:\", \"      return False\", \"  if n == 2 or n == 3:\", \"    return True\", \"  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\", \"  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\", \"    return False\", \"  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\", \"  for x in range(6, int(math.sqrt(n)) + 2, 6):\", \"    if n % (x - 1) == 0 or n % (x + 1) == 0:\", \"      return False\", \"  return True\"]) + \"(\" + b + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n\n    switch (c) {\n      case \"EVEN\":\n        var d = b + \" % 2 == 0\";\n        break;\n\n      case \"ODD\":\n        d = b + \" % 2 == 1\";\n        break;\n\n      case \"WHOLE\":\n        d = b + \" % 1 == 0\";\n        break;\n\n      case \"POSITIVE\":\n        d = b + \" > 0\";\n        break;\n\n      case \"NEGATIVE\":\n        d = b + \" < 0\";\n        break;\n\n      case \"DIVISIBLE_BY\":\n        a = Blockly.Python.valueToCode(a, \"DIVISOR\", Blockly.Python.ORDER_MULTIPLICATIVE);\n        if (!a || \"0\" == a) return [\"False\", Blockly.Python.ORDER_ATOMIC];\n        d = b + \" % \" + a + \" == 0\";\n    }\n\n    return [d, Blockly.Python.ORDER_RELATIONAL];\n  };\n\n  Blockly.Python.math_change = function (a) {\n    Blockly.Python.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n    var b = Blockly.Python.valueToCode(a, \"DELTA\", Blockly.Python.ORDER_ADDITIVE) || \"0\";\n    a = Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    return a + \" = (\" + a + \" if isinstance(\" + a + \", Number) else 0) + \" + b + \"\\n\";\n  };\n\n  Blockly.Python.math_round = Blockly.Python.math_single;\n  Blockly.Python.math_trig = Blockly.Python.math_single;\n\n  Blockly.Python.math_on_list = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    a = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_NONE) || \"[]\";\n\n    switch (b) {\n      case \"SUM\":\n        b = \"sum(\" + a + \")\";\n        break;\n\n      case \"MIN\":\n        b = \"min(\" + a + \")\";\n        break;\n\n      case \"MAX\":\n        b = \"max(\" + a + \")\";\n        break;\n\n      case \"AVERAGE\":\n        Blockly.Python.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n        b = Blockly.Python.provideFunction_(\"math_mean\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(myList):\", \"  localList = [e for e in myList if isinstance(e, Number)]\", \"  if not localList: return\", \"  return float(sum(localList)) / len(localList)\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"MEDIAN\":\n        Blockly.Python.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n        b = Blockly.Python.provideFunction_(\"math_median\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(myList):\", \"  localList = sorted([e for e in myList if isinstance(e, Number)])\", \"  if not localList: return\", \"  if len(localList) % 2 == 0:\", \"    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\", \"  else:\", \"    return localList[(len(localList) - 1) // 2]\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"MODE\":\n        b = Blockly.Python.provideFunction_(\"math_modes\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(some_list):\", \"  modes = []\", \"  # Using a lists of [item, count] to keep count rather than dict\", '  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.', \"  counts = []\", \"  maxCount = 1\", \"  for item in some_list:\", \"    found = False\", \"    for count in counts:\", \"      if count[0] == item:\", \"        count[1] += 1\", \"        maxCount = max(maxCount, count[1])\", \"        found = True\", \"    if not found:\", \"      counts.append([item, 1])\", \"  for counted_item, item_count in counts:\", \"    if item_count == maxCount:\", \"      modes.append(counted_item)\", \"  return modes\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"STD_DEV\":\n        Blockly.Python.definitions_.import_math = \"import math\";\n        b = Blockly.Python.provideFunction_(\"math_standard_deviation\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(numbers):\", \"  n = len(numbers)\", \"  if n == 0: return\", \"  mean = float(sum(numbers)) / n\", \"  variance = sum((x - mean) ** 2 for x in numbers) / n\", \"  return math.sqrt(variance)\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"RANDOM\":\n        Blockly.Python.definitions_.import_random = \"import random\";\n        b = \"random.choice(\" + a + \")\";\n        break;\n\n      default:\n        throw Error(\"Unknown operator: \" + b);\n    }\n\n    return [b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.math_modulo = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"DIVIDEND\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"DIVISOR\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\";\n    return [b + \" % \" + a, Blockly.Python.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Python.math_constrain = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"0\",\n        c = Blockly.Python.valueToCode(a, \"LOW\", Blockly.Python.ORDER_NONE) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"HIGH\", Blockly.Python.ORDER_NONE) || \"float('inf')\";\n    return [\"min(max(\" + b + \", \" + c + \"), \" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.math_random_int = function (a) {\n    Blockly.Python.definitions_.import_random = \"import random\";\n    var b = Blockly.Python.valueToCode(a, \"FROM\", Blockly.Python.ORDER_NONE) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"TO\", Blockly.Python.ORDER_NONE) || \"0\";\n    return [\"random.randint(\" + b + \", \" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.math_random_float = function (a) {\n    Blockly.Python.definitions_.import_random = \"import random\";\n    return [\"random.random()\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.math_atan2 = function (a) {\n    Blockly.Python.definitions_.import_math = \"import math\";\n    var b = Blockly.Python.valueToCode(a, \"X\", Blockly.Python.ORDER_NONE) || \"0\";\n    return [\"math.atan2(\" + (Blockly.Python.valueToCode(a, \"Y\", Blockly.Python.ORDER_NONE) || \"0\") + \", \" + b + \") / math.pi * 180\", Blockly.Python.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Python.procedures = {};\n\n  Blockly.Python.procedures_defreturn = function (a) {\n    for (var b = [], c, d = a.workspace, e = Blockly.Variables.allUsedVarModels(d) || [], f = 0; c = e[f]; f++) c = c.name, -1 == a.arguments_.indexOf(c) && b.push(Blockly.Python.variableDB_.getName(c, Blockly.Variables.NAME_TYPE));\n\n    d = Blockly.Variables.allDeveloperVariables(d);\n\n    for (f = 0; f < d.length; f++) b.push(Blockly.Python.variableDB_.getName(d[f], Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n\n    b = b.length ? Blockly.Python.INDENT + \"global \" + b.join(\", \") + \"\\n\" : \"\";\n    d = Blockly.Python.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE);\n    e = \"\";\n    Blockly.Python.STATEMENT_PREFIX && (e += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, a));\n    Blockly.Python.STATEMENT_SUFFIX && (e += Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a));\n    e && (e = Blockly.Python.prefixLines(e, Blockly.Python.INDENT));\n    c = \"\";\n    Blockly.Python.INFINITE_LOOP_TRAP && (c = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.INFINITE_LOOP_TRAP, a), Blockly.Python.INDENT));\n    var h = Blockly.Python.statementToCode(a, \"STACK\"),\n        g = Blockly.Python.valueToCode(a, \"RETURN\", Blockly.Python.ORDER_NONE) || \"\",\n        k = \"\";\n    h && g && (k = e);\n    g ? g = Blockly.Python.INDENT + \"return \" + g + \"\\n\" : h || (h = Blockly.Python.PASS);\n    var l = [];\n\n    for (f = 0; f < a.arguments_.length; f++) l[f] = Blockly.Python.variableDB_.getName(a.arguments_[f], Blockly.Variables.NAME_TYPE);\n\n    b = \"def \" + d + \"(\" + l.join(\", \") + \"):\\n\" + b + e + c + h + k + g;\n    b = Blockly.Python.scrub_(a, b);\n    Blockly.Python.definitions_[\"%\" + d] = b;\n    return null;\n  };\n\n  Blockly.Python.procedures_defnoreturn = Blockly.Python.procedures_defreturn;\n\n  Blockly.Python.procedures_callreturn = function (a) {\n    for (var b = Blockly.Python.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.Python.valueToCode(a, \"ARG\" + d, Blockly.Python.ORDER_NONE) || \"None\";\n\n    return [b + \"(\" + c.join(\", \") + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.procedures_callnoreturn = function (a) {\n    return Blockly.Python.procedures_callreturn(a)[0] + \"\\n\";\n  };\n\n  Blockly.Python.procedures_ifreturn = function (a) {\n    var b = \"if \" + (Blockly.Python.valueToCode(a, \"CONDITION\", Blockly.Python.ORDER_NONE) || \"False\") + \":\\n\";\n    Blockly.Python.STATEMENT_SUFFIX && (b += Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a), Blockly.Python.INDENT));\n    a.hasReturnValue_ ? (a = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"None\", b += Blockly.Python.INDENT + \"return \" + a + \"\\n\") : b += Blockly.Python.INDENT + \"return\\n\";\n    return b;\n  };\n\n  Blockly.Python.texts = {};\n\n  Blockly.Python.text = function (a) {\n    return [Blockly.Python.quote_(a.getFieldValue(\"TEXT\")), Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.text.forceString_ = function (a) {\n    return Blockly.Python.text.forceString_.strRegExp.test(a) ? a : \"str(\" + a + \")\";\n  };\n\n  Blockly.Python.text.forceString_.strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n  Blockly.Python.text_join = function (a) {\n    switch (a.itemCount_) {\n      case 0:\n        return [\"''\", Blockly.Python.ORDER_ATOMIC];\n\n      case 1:\n        return a = Blockly.Python.valueToCode(a, \"ADD0\", Blockly.Python.ORDER_NONE) || \"''\", a = Blockly.Python.text.forceString_(a), [a, Blockly.Python.ORDER_FUNCTION_CALL];\n\n      case 2:\n        var b = Blockly.Python.valueToCode(a, \"ADD0\", Blockly.Python.ORDER_NONE) || \"''\";\n        a = Blockly.Python.valueToCode(a, \"ADD1\", Blockly.Python.ORDER_NONE) || \"''\";\n        a = Blockly.Python.text.forceString_(b) + \" + \" + Blockly.Python.text.forceString_(a);\n        return [a, Blockly.Python.ORDER_ADDITIVE];\n\n      default:\n        b = [];\n\n        for (var c = 0; c < a.itemCount_; c++) b[c] = Blockly.Python.valueToCode(a, \"ADD\" + c, Blockly.Python.ORDER_NONE) || \"''\";\n\n        a = Blockly.Python.variableDB_.getDistinctName(\"x\", Blockly.Variables.NAME_TYPE);\n        a = \"''.join([str(\" + a + \") for \" + a + \" in [\" + b.join(\", \") + \"]])\";\n        return [a, Blockly.Python.ORDER_FUNCTION_CALL];\n    }\n  };\n\n  Blockly.Python.text_append = function (a) {\n    var b = Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    a = Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_NONE) || \"''\";\n    return b + \" = str(\" + b + \") + \" + Blockly.Python.text.forceString_(a) + \"\\n\";\n  };\n\n  Blockly.Python.text_length = function (a) {\n    return [\"len(\" + (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"''\") + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_isEmpty = function (a) {\n    return [\"not len(\" + (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"''\") + \")\", Blockly.Python.ORDER_LOGICAL_NOT];\n  };\n\n  Blockly.Python.text_indexOf = function (a) {\n    var b = \"FIRST\" == a.getFieldValue(\"END\") ? \"find\" : \"rfind\",\n        c = Blockly.Python.valueToCode(a, \"FIND\", Blockly.Python.ORDER_NONE) || \"''\";\n    b = (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_MEMBER) || \"''\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Blockly.Python.ORDER_ADDITIVE] : [b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_charAt = function (a) {\n    var b = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        c = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_MEMBER) || \"''\";\n\n    switch (b) {\n      case \"FIRST\":\n        return [c + \"[0]\", Blockly.Python.ORDER_MEMBER];\n\n      case \"LAST\":\n        return [c + \"[-1]\", Blockly.Python.ORDER_MEMBER];\n\n      case \"FROM_START\":\n        return a = Blockly.Python.getAdjustedInt(a, \"AT\"), [c + \"[\" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n\n      case \"FROM_END\":\n        return a = Blockly.Python.getAdjustedInt(a, \"AT\", 1, !0), [c + \"[\" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n\n      case \"RANDOM\":\n        return Blockly.Python.definitions_.import_random = \"import random\", [Blockly.Python.provideFunction_(\"text_random_letter\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(text):\", \"  x = int(random.random() * len(text))\", \"  return text[x];\"]) + \"(\" + c + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n    }\n\n    throw Error(\"Unhandled option (text_charAt).\");\n  };\n\n  Blockly.Python.text_getSubstring = function (a) {\n    var b = a.getFieldValue(\"WHERE1\"),\n        c = a.getFieldValue(\"WHERE2\"),\n        d = Blockly.Python.valueToCode(a, \"STRING\", Blockly.Python.ORDER_MEMBER) || \"''\";\n\n    switch (b) {\n      case \"FROM_START\":\n        b = Blockly.Python.getAdjustedInt(a, \"AT1\");\n        \"0\" == b && (b = \"\");\n        break;\n\n      case \"FROM_END\":\n        b = Blockly.Python.getAdjustedInt(a, \"AT1\", 1, !0);\n        break;\n\n      case \"FIRST\":\n        b = \"\";\n        break;\n\n      default:\n        throw Error(\"Unhandled option (text_getSubstring)\");\n    }\n\n    switch (c) {\n      case \"FROM_START\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT2\", 1);\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT2\", 0, !0);\n        Blockly.isNumber(String(a)) ? \"0\" == a && (a = \"\") : (Blockly.Python.definitions_.import_sys = \"import sys\", a += \" or sys.maxsize\");\n        break;\n\n      case \"LAST\":\n        a = \"\";\n        break;\n\n      default:\n        throw Error(\"Unhandled option (text_getSubstring)\");\n    }\n\n    return [d + \"[\" + b + \" : \" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.text_changeCase = function (a) {\n    var b = {\n      UPPERCASE: \".upper()\",\n      LOWERCASE: \".lower()\",\n      TITLECASE: \".title()\"\n    }[a.getFieldValue(\"CASE\")];\n    return [(Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\") + b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_trim = function (a) {\n    var b = {\n      LEFT: \".lstrip()\",\n      RIGHT: \".rstrip()\",\n      BOTH: \".strip()\"\n    }[a.getFieldValue(\"MODE\")];\n    return [(Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\") + b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_print = function (a) {\n    return \"print(\" + (Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_NONE) || \"''\") + \")\\n\";\n  };\n\n  Blockly.Python.text_prompt_ext = function (a) {\n    var b = Blockly.Python.provideFunction_(\"text_prompt\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(msg):\", \"  try:\", \"    return raw_input(msg)\", \"  except NameError:\", \"    return input(msg)\"]),\n        c = a.getField(\"TEXT\") ? Blockly.Python.quote_(a.getFieldValue(\"TEXT\")) : Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_NONE) || \"''\";\n    b = b + \"(\" + c + \")\";\n    \"NUMBER\" == a.getFieldValue(\"TYPE\") && (b = \"float(\" + b + \")\");\n    return [b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_prompt = Blockly.Python.text_prompt_ext;\n\n  Blockly.Python.text_count = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\";\n    a = Blockly.Python.valueToCode(a, \"SUB\", Blockly.Python.ORDER_NONE) || \"''\";\n    return [b + \".count(\" + a + \")\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.text_replace = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\",\n        c = Blockly.Python.valueToCode(a, \"FROM\", Blockly.Python.ORDER_NONE) || \"''\";\n    a = Blockly.Python.valueToCode(a, \"TO\", Blockly.Python.ORDER_NONE) || \"''\";\n    return [b + \".replace(\" + c + \", \" + a + \")\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.text_reverse = function (a) {\n    return [(Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\") + \"[::-1]\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.variables = {};\n\n  Blockly.Python.variables_get = function (a) {\n    return [Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE), Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.variables_set = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"0\";\n    return Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE) + \" = \" + b + \"\\n\";\n  };\n\n  Blockly.Python.variablesDynamic = {};\n  Blockly.Python.variables_get_dynamic = Blockly.Python.variables_get;\n  Blockly.Python.variables_set_dynamic = Blockly.Python.variables_set;\n  return Blockly.Python;\n};","map":null,"metadata":{},"sourceType":"script"}