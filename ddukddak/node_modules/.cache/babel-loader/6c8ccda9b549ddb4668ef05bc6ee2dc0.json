{"ast":null,"code":"module.exports = function (Blockly) {\n  // Do not edit this file; automatically generated by build.py.\n  'use strict';\n\n  Blockly.JavaScript = new Blockly.Generator(\"JavaScript\");\n  Blockly.JavaScript.addReservedWords(\"Blockly,break,case,catch,continue,debugger,default,delete,do,else,finally,for,function,if,in,instanceof,new,return,switch,this,throw,try,typeof,var,void,while,with,class,enum,export,extends,import,super,implements,interface,let,package,private,protected,public,static,yield,const,null,true,false,Array,ArrayBuffer,Boolean,Date,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Error,eval,EvalError,Float32Array,Float64Array,Function,Infinity,Int16Array,Int32Array,Int8Array,isFinite,isNaN,Iterator,JSON,Math,NaN,Number,Object,parseFloat,parseInt,RangeError,ReferenceError,RegExp,StopIteration,String,SyntaxError,TypeError,Uint16Array,Uint32Array,Uint8Array,Uint8ClampedArray,undefined,uneval,URIError,applicationCache,closed,Components,content,_content,controllers,crypto,defaultStatus,dialogArguments,directories,document,frameElement,frames,fullScreen,globalStorage,history,innerHeight,innerWidth,length,location,locationbar,localStorage,menubar,messageManager,mozAnimationStartTime,mozInnerScreenX,mozInnerScreenY,mozPaintCount,name,navigator,opener,outerHeight,outerWidth,pageXOffset,pageYOffset,parent,performance,personalbar,pkcs11,returnValue,screen,screenX,screenY,scrollbars,scrollMaxX,scrollMaxY,scrollX,scrollY,self,sessionStorage,sidebar,status,statusbar,toolbar,top,URL,window,addEventListener,alert,atob,back,blur,btoa,captureEvents,clearImmediate,clearInterval,clearTimeout,close,confirm,disableExternalCapture,dispatchEvent,dump,enableExternalCapture,escape,find,focus,forward,GeckoActiveXObject,getAttention,getAttentionWithCycleCount,getComputedStyle,getSelection,home,matchMedia,maximize,minimize,moveBy,moveTo,mozRequestAnimationFrame,open,openDialog,postMessage,print,prompt,QueryInterface,releaseEvents,removeEventListener,resizeBy,resizeTo,restore,routeEvent,scroll,scrollBy,scrollByLines,scrollByPages,scrollTo,setCursor,setImmediate,setInterval,setResizable,setTimeout,showModalDialog,sizeToContent,stop,unescape,updateCommands,XPCNativeWrapper,XPCSafeJSObjectWrapper,onabort,onbeforeunload,onblur,onchange,onclick,onclose,oncontextmenu,ondevicemotion,ondeviceorientation,ondragdrop,onerror,onfocus,onhashchange,onkeydown,onkeypress,onkeyup,onload,onmousedown,onmousemove,onmouseout,onmouseover,onmouseup,onmozbeforepaint,onpaint,onpopstate,onreset,onresize,onscroll,onselect,onsubmit,onunload,onpageshow,onpagehide,Image,Option,Worker,Event,Range,File,FileReader,Blob,BlobBuilder,Attr,CDATASection,CharacterData,Comment,console,DocumentFragment,DocumentType,DomConfiguration,DOMError,DOMErrorHandler,DOMException,DOMImplementation,DOMImplementationList,DOMImplementationRegistry,DOMImplementationSource,DOMLocator,DOMObject,DOMString,DOMStringList,DOMTimeStamp,DOMUserData,Entity,EntityReference,MediaQueryList,MediaQueryListListener,NameList,NamedNodeMap,Node,NodeFilter,NodeIterator,NodeList,Notation,Plugin,PluginArray,ProcessingInstruction,SharedWorker,Text,TimeRanges,Treewalker,TypeInfo,UserDataHandler,Worker,WorkerGlobalScope,HTMLDocument,HTMLElement,HTMLAnchorElement,HTMLAppletElement,HTMLAudioElement,HTMLAreaElement,HTMLBaseElement,HTMLBaseFontElement,HTMLBodyElement,HTMLBRElement,HTMLButtonElement,HTMLCanvasElement,HTMLDirectoryElement,HTMLDivElement,HTMLDListElement,HTMLEmbedElement,HTMLFieldSetElement,HTMLFontElement,HTMLFormElement,HTMLFrameElement,HTMLFrameSetElement,HTMLHeadElement,HTMLHeadingElement,HTMLHtmlElement,HTMLHRElement,HTMLIFrameElement,HTMLImageElement,HTMLInputElement,HTMLKeygenElement,HTMLLabelElement,HTMLLIElement,HTMLLinkElement,HTMLMapElement,HTMLMenuElement,HTMLMetaElement,HTMLModElement,HTMLObjectElement,HTMLOListElement,HTMLOptGroupElement,HTMLOptionElement,HTMLOutputElement,HTMLParagraphElement,HTMLParamElement,HTMLPreElement,HTMLQuoteElement,HTMLScriptElement,HTMLSelectElement,HTMLSourceElement,HTMLSpanElement,HTMLStyleElement,HTMLTableElement,HTMLTableCaptionElement,HTMLTableCellElement,HTMLTableDataCellElement,HTMLTableHeaderCellElement,HTMLTableColElement,HTMLTableRowElement,HTMLTableSectionElement,HTMLTextAreaElement,HTMLTimeElement,HTMLTitleElement,HTMLTrackElement,HTMLUListElement,HTMLUnknownElement,HTMLVideoElement,HTMLCanvasElement,CanvasRenderingContext2D,CanvasGradient,CanvasPattern,TextMetrics,ImageData,CanvasPixelArray,HTMLAudioElement,HTMLVideoElement,NotifyAudioAvailableEvent,HTMLCollection,HTMLAllCollection,HTMLFormControlsCollection,HTMLOptionsCollection,HTMLPropertiesCollection,DOMTokenList,DOMSettableTokenList,DOMStringMap,RadioNodeList,SVGDocument,SVGElement,SVGAElement,SVGAltGlyphElement,SVGAltGlyphDefElement,SVGAltGlyphItemElement,SVGAnimationElement,SVGAnimateElement,SVGAnimateColorElement,SVGAnimateMotionElement,SVGAnimateTransformElement,SVGSetElement,SVGCircleElement,SVGClipPathElement,SVGColorProfileElement,SVGCursorElement,SVGDefsElement,SVGDescElement,SVGEllipseElement,SVGFilterElement,SVGFilterPrimitiveStandardAttributes,SVGFEBlendElement,SVGFEColorMatrixElement,SVGFEComponentTransferElement,SVGFECompositeElement,SVGFEConvolveMatrixElement,SVGFEDiffuseLightingElement,SVGFEDisplacementMapElement,SVGFEDistantLightElement,SVGFEFloodElement,SVGFEGaussianBlurElement,SVGFEImageElement,SVGFEMergeElement,SVGFEMergeNodeElement,SVGFEMorphologyElement,SVGFEOffsetElement,SVGFEPointLightElement,SVGFESpecularLightingElement,SVGFESpotLightElement,SVGFETileElement,SVGFETurbulenceElement,SVGComponentTransferFunctionElement,SVGFEFuncRElement,SVGFEFuncGElement,SVGFEFuncBElement,SVGFEFuncAElement,SVGFontElement,SVGFontFaceElement,SVGFontFaceFormatElement,SVGFontFaceNameElement,SVGFontFaceSrcElement,SVGFontFaceUriElement,SVGForeignObjectElement,SVGGElement,SVGGlyphElement,SVGGlyphRefElement,SVGGradientElement,SVGLinearGradientElement,SVGRadialGradientElement,SVGHKernElement,SVGImageElement,SVGLineElement,SVGMarkerElement,SVGMaskElement,SVGMetadataElement,SVGMissingGlyphElement,SVGMPathElement,SVGPathElement,SVGPatternElement,SVGPolylineElement,SVGPolygonElement,SVGRectElement,SVGScriptElement,SVGStopElement,SVGStyleElement,SVGSVGElement,SVGSwitchElement,SVGSymbolElement,SVGTextElement,SVGTextPathElement,SVGTitleElement,SVGTRefElement,SVGTSpanElement,SVGUseElement,SVGViewElement,SVGVKernElement,SVGAngle,SVGColor,SVGICCColor,SVGElementInstance,SVGElementInstanceList,SVGLength,SVGLengthList,SVGMatrix,SVGNumber,SVGNumberList,SVGPaint,SVGPoint,SVGPointList,SVGPreserveAspectRatio,SVGRect,SVGStringList,SVGTransform,SVGTransformList,SVGAnimatedAngle,SVGAnimatedBoolean,SVGAnimatedEnumeration,SVGAnimatedInteger,SVGAnimatedLength,SVGAnimatedLengthList,SVGAnimatedNumber,SVGAnimatedNumberList,SVGAnimatedPreserveAspectRatio,SVGAnimatedRect,SVGAnimatedString,SVGAnimatedTransformList,SVGPathSegList,SVGPathSeg,SVGPathSegArcAbs,SVGPathSegArcRel,SVGPathSegClosePath,SVGPathSegCurvetoCubicAbs,SVGPathSegCurvetoCubicRel,SVGPathSegCurvetoCubicSmoothAbs,SVGPathSegCurvetoCubicSmoothRel,SVGPathSegCurvetoQuadraticAbs,SVGPathSegCurvetoQuadraticRel,SVGPathSegCurvetoQuadraticSmoothAbs,SVGPathSegCurvetoQuadraticSmoothRel,SVGPathSegLinetoAbs,SVGPathSegLinetoHorizontalAbs,SVGPathSegLinetoHorizontalRel,SVGPathSegLinetoRel,SVGPathSegLinetoVerticalAbs,SVGPathSegLinetoVerticalRel,SVGPathSegMovetoAbs,SVGPathSegMovetoRel,ElementTimeControl,TimeEvent,SVGAnimatedPathData,SVGAnimatedPoints,SVGColorProfileRule,SVGCSSRule,SVGExternalResourcesRequired,SVGFitToViewBox,SVGLangSpace,SVGLocatable,SVGRenderingIntent,SVGStylable,SVGTests,SVGTextContentElement,SVGTextPositioningElement,SVGTransformable,SVGUnitTypes,SVGURIReference,SVGViewSpec,SVGZoomAndPan\");\n  Blockly.JavaScript.ORDER_ATOMIC = 0;\n  Blockly.JavaScript.ORDER_NEW = 1.1;\n  Blockly.JavaScript.ORDER_MEMBER = 1.2;\n  Blockly.JavaScript.ORDER_FUNCTION_CALL = 2;\n  Blockly.JavaScript.ORDER_INCREMENT = 3;\n  Blockly.JavaScript.ORDER_DECREMENT = 3;\n  Blockly.JavaScript.ORDER_BITWISE_NOT = 4.1;\n  Blockly.JavaScript.ORDER_UNARY_PLUS = 4.2;\n  Blockly.JavaScript.ORDER_UNARY_NEGATION = 4.3;\n  Blockly.JavaScript.ORDER_LOGICAL_NOT = 4.4;\n  Blockly.JavaScript.ORDER_TYPEOF = 4.5;\n  Blockly.JavaScript.ORDER_VOID = 4.6;\n  Blockly.JavaScript.ORDER_DELETE = 4.7;\n  Blockly.JavaScript.ORDER_AWAIT = 4.8;\n  Blockly.JavaScript.ORDER_EXPONENTIATION = 5;\n  Blockly.JavaScript.ORDER_MULTIPLICATION = 5.1;\n  Blockly.JavaScript.ORDER_DIVISION = 5.2;\n  Blockly.JavaScript.ORDER_MODULUS = 5.3;\n  Blockly.JavaScript.ORDER_SUBTRACTION = 6.1;\n  Blockly.JavaScript.ORDER_ADDITION = 6.2;\n  Blockly.JavaScript.ORDER_BITWISE_SHIFT = 7;\n  Blockly.JavaScript.ORDER_RELATIONAL = 8;\n  Blockly.JavaScript.ORDER_IN = 8;\n  Blockly.JavaScript.ORDER_INSTANCEOF = 8;\n  Blockly.JavaScript.ORDER_EQUALITY = 9;\n  Blockly.JavaScript.ORDER_BITWISE_AND = 10;\n  Blockly.JavaScript.ORDER_BITWISE_XOR = 11;\n  Blockly.JavaScript.ORDER_BITWISE_OR = 12;\n  Blockly.JavaScript.ORDER_LOGICAL_AND = 13;\n  Blockly.JavaScript.ORDER_LOGICAL_OR = 14;\n  Blockly.JavaScript.ORDER_CONDITIONAL = 15;\n  Blockly.JavaScript.ORDER_ASSIGNMENT = 16;\n  Blockly.JavaScript.ORDER_YIELD = 17;\n  Blockly.JavaScript.ORDER_COMMA = 18;\n  Blockly.JavaScript.ORDER_NONE = 99;\n  Blockly.JavaScript.ORDER_OVERRIDES = [[Blockly.JavaScript.ORDER_FUNCTION_CALL, Blockly.JavaScript.ORDER_MEMBER], [Blockly.JavaScript.ORDER_FUNCTION_CALL, Blockly.JavaScript.ORDER_FUNCTION_CALL], [Blockly.JavaScript.ORDER_MEMBER, Blockly.JavaScript.ORDER_MEMBER], [Blockly.JavaScript.ORDER_MEMBER, Blockly.JavaScript.ORDER_FUNCTION_CALL], [Blockly.JavaScript.ORDER_LOGICAL_NOT, Blockly.JavaScript.ORDER_LOGICAL_NOT], [Blockly.JavaScript.ORDER_MULTIPLICATION, Blockly.JavaScript.ORDER_MULTIPLICATION], [Blockly.JavaScript.ORDER_ADDITION, Blockly.JavaScript.ORDER_ADDITION], [Blockly.JavaScript.ORDER_LOGICAL_AND, Blockly.JavaScript.ORDER_LOGICAL_AND], [Blockly.JavaScript.ORDER_LOGICAL_OR, Blockly.JavaScript.ORDER_LOGICAL_OR]];\n\n  Blockly.JavaScript.init = function (a) {\n    Blockly.JavaScript.definitions_ = Object.create(null);\n    Blockly.JavaScript.functionNames_ = Object.create(null);\n    Blockly.JavaScript.variableDB_ ? Blockly.JavaScript.variableDB_.reset() : Blockly.JavaScript.variableDB_ = new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n    Blockly.JavaScript.variableDB_.setVariableMap(a.getVariableMap());\n\n    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(Blockly.JavaScript.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n\n    a = Blockly.Variables.allUsedVarModels(a);\n\n    for (d = 0; d < a.length; d++) b.push(Blockly.JavaScript.variableDB_.getName(a[d].getId(), Blockly.Variables.NAME_TYPE));\n\n    b.length && (Blockly.JavaScript.definitions_.variables = \"var \" + b.join(\", \") + \";\");\n  };\n\n  Blockly.JavaScript.finish = function (a) {\n    var b = [],\n        c;\n\n    for (c in Blockly.JavaScript.definitions_) b.push(Blockly.JavaScript.definitions_[c]);\n\n    delete Blockly.JavaScript.definitions_;\n    delete Blockly.JavaScript.functionNames_;\n    Blockly.JavaScript.variableDB_.reset();\n    return b.join(\"\\n\\n\") + \"\\n\\n\\n\" + a;\n  };\n\n  Blockly.JavaScript.scrubNakedValue = function (a) {\n    return a + \";\\n\";\n  };\n\n  Blockly.JavaScript.quote_ = function (a) {\n    a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/'/g, \"\\\\'\");\n    return \"'\" + a + \"'\";\n  };\n\n  Blockly.JavaScript.scrub_ = function (a, b, c) {\n    var d = \"\";\n\n    if (!a.outputConnection || !a.outputConnection.targetConnection) {\n      var e = a.getCommentText();\n      (e = Blockly.utils.string.wrap(e, Blockly.JavaScript.COMMENT_WRAP - 3)) && (d = a.getProcedureDef ? d + (\"/**\\n\" + Blockly.JavaScript.prefixLines(e + \"\\n\", \" * \") + \" */\\n\") : d + Blockly.JavaScript.prefixLines(e + \"\\n\", \"// \"));\n\n      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.JavaScript.allNestedComments(e)) && (d += Blockly.JavaScript.prefixLines(e, \"// \"));\n    }\n\n    a = a.nextConnection && a.nextConnection.targetBlock();\n    c = c ? \"\" : Blockly.JavaScript.blockToCode(a);\n    return d + b + c;\n  };\n\n  Blockly.JavaScript.getAdjusted = function (a, b, c, d, e) {\n    c = c || 0;\n    e = e || Blockly.JavaScript.ORDER_NONE;\n    a.workspace.options.oneBasedIndex && c--;\n    var f = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n    a = 0 < c ? Blockly.JavaScript.valueToCode(a, b, Blockly.JavaScript.ORDER_ADDITION) || f : 0 > c ? Blockly.JavaScript.valueToCode(a, b, Blockly.JavaScript.ORDER_SUBTRACTION) || f : d ? Blockly.JavaScript.valueToCode(a, b, Blockly.JavaScript.ORDER_UNARY_NEGATION) || f : Blockly.JavaScript.valueToCode(a, b, e) || f;\n    if (Blockly.isNumber(a)) a = parseFloat(a) + c, d && (a = -a);else {\n      if (0 < c) {\n        a = a + \" + \" + c;\n        var g = Blockly.JavaScript.ORDER_ADDITION;\n      } else 0 > c && (a = a + \" - \" + -c, g = Blockly.JavaScript.ORDER_SUBTRACTION);\n\n      d && (a = c ? \"-(\" + a + \")\" : \"-\" + a, g = Blockly.JavaScript.ORDER_UNARY_NEGATION);\n      g = Math.floor(g);\n      e = Math.floor(e);\n      g && e >= g && (a = \"(\" + a + \")\");\n    }\n    return a;\n  };\n\n  Blockly.JavaScript.colour = {};\n\n  Blockly.JavaScript.colour_picker = function (a) {\n    return [Blockly.JavaScript.quote_(a.getFieldValue(\"COLOUR\")), Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  Blockly.JavaScript.colour_random = function (a) {\n    return [Blockly.JavaScript.provideFunction_(\"colourRandom\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"() {\", \"  var num = Math.floor(Math.random() * Math.pow(2, 24));\", \"  return '#' + ('00000' + num.toString(16)).substr(-6);\", \"}\"]) + \"()\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.colour_rgb = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"RED\", Blockly.JavaScript.ORDER_COMMA) || 0,\n        c = Blockly.JavaScript.valueToCode(a, \"GREEN\", Blockly.JavaScript.ORDER_COMMA) || 0;\n    a = Blockly.JavaScript.valueToCode(a, \"BLUE\", Blockly.JavaScript.ORDER_COMMA) || 0;\n    return [Blockly.JavaScript.provideFunction_(\"colourRgb\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(r, g, b) {\", \"  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\", \"  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\", \"  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\", \"  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\", \"  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\", \"  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\", \"  return '#' + r + g + b;\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.colour_blend = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"COLOUR1\", Blockly.JavaScript.ORDER_COMMA) || \"'#000000'\",\n        c = Blockly.JavaScript.valueToCode(a, \"COLOUR2\", Blockly.JavaScript.ORDER_COMMA) || \"'#000000'\";\n    a = Blockly.JavaScript.valueToCode(a, \"RATIO\", Blockly.JavaScript.ORDER_COMMA) || .5;\n    return [Blockly.JavaScript.provideFunction_(\"colourBlend\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(c1, c2, ratio) {\", \"  ratio = Math.max(Math.min(Number(ratio), 1), 0);\", \"  var r1 = parseInt(c1.substring(1, 3), 16);\", \"  var g1 = parseInt(c1.substring(3, 5), 16);\", \"  var b1 = parseInt(c1.substring(5, 7), 16);\", \"  var r2 = parseInt(c2.substring(1, 3), 16);\", \"  var g2 = parseInt(c2.substring(3, 5), 16);\", \"  var b2 = parseInt(c2.substring(5, 7), 16);\", \"  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\", \"  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\", \"  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\", \"  r = ('0' + (r || 0).toString(16)).slice(-2);\", \"  g = ('0' + (g || 0).toString(16)).slice(-2);\", \"  b = ('0' + (b || 0).toString(16)).slice(-2);\", \"  return '#' + r + g + b;\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.lists = {};\n\n  Blockly.JavaScript.lists_create_empty = function (a) {\n    return [\"[]\", Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  Blockly.JavaScript.lists_create_with = function (a) {\n    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.JavaScript.valueToCode(a, \"ADD\" + c, Blockly.JavaScript.ORDER_COMMA) || \"null\";\n\n    return [\"[\" + b.join(\", \") + \"]\", Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  Blockly.JavaScript.lists_repeat = function (a) {\n    var b = Blockly.JavaScript.provideFunction_(\"listsRepeat\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(value, n) {\", \"  var array = [];\", \"  for (var i = 0; i < n; i++) {\", \"    array[i] = value;\", \"  }\", \"  return array;\", \"}\"]),\n        c = Blockly.JavaScript.valueToCode(a, \"ITEM\", Blockly.JavaScript.ORDER_COMMA) || \"null\";\n    a = Blockly.JavaScript.valueToCode(a, \"NUM\", Blockly.JavaScript.ORDER_COMMA) || \"0\";\n    return [b + \"(\" + c + \", \" + a + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.lists_length = function (a) {\n    return [(Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_MEMBER) || \"[]\") + \".length\", Blockly.JavaScript.ORDER_MEMBER];\n  };\n\n  Blockly.JavaScript.lists_isEmpty = function (a) {\n    return [\"!\" + (Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_MEMBER) || \"[]\") + \".length\", Blockly.JavaScript.ORDER_LOGICAL_NOT];\n  };\n\n  Blockly.JavaScript.lists_indexOf = function (a) {\n    var b = \"FIRST\" == a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        c = Blockly.JavaScript.valueToCode(a, \"FIND\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n    b = (Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_MEMBER) || \"[]\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Blockly.JavaScript.ORDER_ADDITION] : [b, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.lists_getIndex = function (a) {\n    var b = a.getFieldValue(\"MODE\") || \"GET\",\n        c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = Blockly.JavaScript.valueToCode(a, \"VALUE\", \"RANDOM\" == c ? Blockly.JavaScript.ORDER_COMMA : Blockly.JavaScript.ORDER_MEMBER) || \"[]\";\n\n    switch (c) {\n      case \"FIRST\":\n        if (\"GET\" == b) return [d + \"[0]\", Blockly.JavaScript.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".shift()\", Blockly.JavaScript.ORDER_MEMBER];\n        if (\"REMOVE\" == b) return d + \".shift();\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"GET\" == b) return [d + \".slice(-1)[0]\", Blockly.JavaScript.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop()\", Blockly.JavaScript.ORDER_MEMBER];\n        if (\"REMOVE\" == b) return d + \".pop();\\n\";\n        break;\n\n      case \"FROM_START\":\n        a = Blockly.JavaScript.getAdjusted(a, \"AT\");\n        if (\"GET\" == b) return [d + \"[\" + a + \"]\", Blockly.JavaScript.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".splice(\" + a + \", 1)[0]\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".splice(\" + a + \", 1);\\n\";\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.JavaScript.getAdjusted(a, \"AT\", 1, !0);\n        if (\"GET\" == b) return [d + \".slice(\" + a + \")[0]\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n        if (\"GET_REMOVE\" == b) return [d + \".splice(\" + a + \", 1)[0]\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".splice(\" + a + \", 1);\";\n        break;\n\n      case \"RANDOM\":\n        d = Blockly.JavaScript.provideFunction_(\"listsGetRandomItem\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(list, remove) {\", \"  var x = Math.floor(Math.random() * list.length);\", \"  if (remove) {\", \"    return list.splice(x, 1)[0];\", \"  } else {\", \"    return list[x];\", \"  }\", \"}\"]) + \"(\" + d + \", \" + (\"GET\" != b) + \")\";\n        if (\"GET\" == b || \"GET_REMOVE\" == b) return [d, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \";\\n\";\n    }\n\n    throw Error(\"Unhandled combination (lists_getIndex).\");\n  };\n\n  Blockly.JavaScript.lists_setIndex = function (a) {\n    function b() {\n      if (c.match(/^\\w+$/)) return \"\";\n      var a = Blockly.JavaScript.variableDB_.getDistinctName(\"tmpList\", Blockly.Variables.NAME_TYPE),\n          b = \"var \" + a + \" = \" + c + \";\\n\";\n      c = a;\n      return b;\n    }\n\n    var c = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_MEMBER) || \"[]\",\n        d = a.getFieldValue(\"MODE\") || \"GET\",\n        e = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        f = Blockly.JavaScript.valueToCode(a, \"TO\", Blockly.JavaScript.ORDER_ASSIGNMENT) || \"null\";\n\n    switch (e) {\n      case \"FIRST\":\n        if (\"SET\" == d) return c + \"[0] = \" + f + \";\\n\";\n        if (\"INSERT\" == d) return c + \".unshift(\" + f + \");\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"SET\" == d) return a = b(), a + (c + \"[\" + c + \".length - 1] = \" + f + \";\\n\");\n        if (\"INSERT\" == d) return c + \".push(\" + f + \");\\n\";\n        break;\n\n      case \"FROM_START\":\n        e = Blockly.JavaScript.getAdjusted(a, \"AT\");\n        if (\"SET\" == d) return c + \"[\" + e + \"] = \" + f + \";\\n\";\n        if (\"INSERT\" == d) return c + \".splice(\" + e + \", 0, \" + f + \");\\n\";\n        break;\n\n      case \"FROM_END\":\n        e = Blockly.JavaScript.getAdjusted(a, \"AT\", 1, !1, Blockly.JavaScript.ORDER_SUBTRACTION);\n        a = b();\n        if (\"SET\" == d) return a + (c + \"[\" + c + \".length - \" + e + \"] = \" + f + \";\\n\");\n        if (\"INSERT\" == d) return a + (c + \".splice(\" + c + \".length - \" + e + \", 0, \" + f + \");\\n\");\n        break;\n\n      case \"RANDOM\":\n        a = b();\n        e = Blockly.JavaScript.variableDB_.getDistinctName(\"tmpX\", Blockly.Variables.NAME_TYPE);\n        a += \"var \" + e + \" = Math.floor(Math.random() * \" + c + \".length);\\n\";\n        if (\"SET\" == d) return a + (c + \"[\" + e + \"] = \" + f + \";\\n\");\n        if (\"INSERT\" == d) return a + (c + \".splice(\" + e + \", 0, \" + f + \");\\n\");\n    }\n\n    throw Error(\"Unhandled combination (lists_setIndex).\");\n  };\n\n  Blockly.JavaScript.lists.getIndex_ = function (a, b, c) {\n    return \"FIRST\" == b ? \"0\" : \"FROM_END\" == b ? a + \".length - 1 - \" + c : \"LAST\" == b ? a + \".length - 1\" : c;\n  };\n\n  Blockly.JavaScript.lists_getSublist = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_MEMBER) || \"[]\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n    if (\"FIRST\" == c && \"LAST\" == d) b += \".slice(0)\";else if (b.match(/^\\w+$/) || \"FROM_END\" != c && \"FROM_START\" == d) {\n      switch (c) {\n        case \"FROM_START\":\n          var e = Blockly.JavaScript.getAdjusted(a, \"AT1\");\n          break;\n\n        case \"FROM_END\":\n          e = Blockly.JavaScript.getAdjusted(a, \"AT1\", 1, !1, Blockly.JavaScript.ORDER_SUBTRACTION);\n          e = b + \".length - \" + e;\n          break;\n\n        case \"FIRST\":\n          e = \"0\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n\n      switch (d) {\n        case \"FROM_START\":\n          a = Blockly.JavaScript.getAdjusted(a, \"AT2\", 1);\n          break;\n\n        case \"FROM_END\":\n          a = Blockly.JavaScript.getAdjusted(a, \"AT2\", 0, !1, Blockly.JavaScript.ORDER_SUBTRACTION);\n          a = b + \".length - \" + a;\n          break;\n\n        case \"LAST\":\n          a = b + \".length\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n\n      b = b + \".slice(\" + e + \", \" + a + \")\";\n    } else {\n      e = Blockly.JavaScript.getAdjusted(a, \"AT1\");\n      a = Blockly.JavaScript.getAdjusted(a, \"AT2\");\n      var f = Blockly.JavaScript.lists.getIndex_,\n          g = {\n        FIRST: \"First\",\n        LAST: \"Last\",\n        FROM_START: \"FromStart\",\n        FROM_END: \"FromEnd\"\n      };\n      b = Blockly.JavaScript.provideFunction_(\"subsequence\" + g[c] + g[d], [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(sequence\" + (\"FROM_END\" == c || \"FROM_START\" == c ? \", at1\" : \"\") + (\"FROM_END\" == d || \"FROM_START\" == d ? \", at2\" : \"\") + \") {\", \"  var start = \" + f(\"sequence\", c, \"at1\") + \";\", \"  var end = \" + f(\"sequence\", d, \"at2\") + \" + 1;\", \"  return sequence.slice(start, end);\", \"}\"]) + \"(\" + b + (\"FROM_END\" == c || \"FROM_START\" == c ? \", \" + e : \"\") + (\"FROM_END\" == d || \"FROM_START\" == d ? \", \" + a : \"\") + \")\";\n    }\n    return [b, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.lists_sort = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_FUNCTION_CALL) || \"[]\",\n        c = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n    a = a.getFieldValue(\"TYPE\");\n    var d = Blockly.JavaScript.provideFunction_(\"listsGetSortCompare\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(type, direction) {\", \"  var compareFuncs = {\", '    \"NUMERIC\": function(a, b) {', \"        return parseFloat(a) - parseFloat(b); },\", '    \"TEXT\": function(a, b) {', \"        return a.toString() > b.toString() ? 1 : -1; },\", '    \"IGNORE_CASE\": function(a, b) {', \"        return a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1; },\", \"  };\", \"  var compare = compareFuncs[type];\", \"  return function(a, b) { return compare(a, b) * direction; }\", \"}\"]);\n    return [b + \".slice().sort(\" + d + '(\"' + a + '\", ' + c + \"))\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.lists_split = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"INPUT\", Blockly.JavaScript.ORDER_MEMBER),\n        c = Blockly.JavaScript.valueToCode(a, \"DELIM\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n    a = a.getFieldValue(\"MODE\");\n    if (\"SPLIT\" == a) b || (b = \"''\"), a = \"split\";else if (\"JOIN\" == a) b || (b = \"[]\"), a = \"join\";else throw Error(\"Unknown mode: \" + a);\n    return [b + \".\" + a + \"(\" + c + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.lists_reverse = function (a) {\n    return [(Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_FUNCTION_CALL) || \"[]\") + \".slice().reverse()\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.logic = {};\n\n  Blockly.JavaScript.controls_if = function (a) {\n    var b = 0,\n        c = \"\";\n    Blockly.JavaScript.STATEMENT_PREFIX && (c += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_PREFIX, a));\n\n    do {\n      var d = Blockly.JavaScript.valueToCode(a, \"IF\" + b, Blockly.JavaScript.ORDER_NONE) || \"false\";\n      var e = Blockly.JavaScript.statementToCode(a, \"DO\" + b);\n      Blockly.JavaScript.STATEMENT_SUFFIX && (e = Blockly.JavaScript.prefixLines(Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX, a), Blockly.JavaScript.INDENT) + e);\n      c += (0 < b ? \" else \" : \"\") + \"if (\" + d + \") {\\n\" + e + \"}\";\n      ++b;\n    } while (a.getInput(\"IF\" + b));\n\n    if (a.getInput(\"ELSE\") || Blockly.JavaScript.STATEMENT_SUFFIX) e = Blockly.JavaScript.statementToCode(a, \"ELSE\"), Blockly.JavaScript.STATEMENT_SUFFIX && (e = Blockly.JavaScript.prefixLines(Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX, a), Blockly.JavaScript.INDENT) + e), c += \" else {\\n\" + e + \"}\";\n    return c + \"\\n\";\n  };\n\n  Blockly.JavaScript.controls_ifelse = Blockly.JavaScript.controls_if;\n\n  Blockly.JavaScript.logic_compare = function (a) {\n    var b = {\n      EQ: \"==\",\n      NEQ: \"!=\",\n      LT: \"<\",\n      LTE: \"<=\",\n      GT: \">\",\n      GTE: \">=\"\n    }[a.getFieldValue(\"OP\")],\n        c = \"==\" == b || \"!=\" == b ? Blockly.JavaScript.ORDER_EQUALITY : Blockly.JavaScript.ORDER_RELATIONAL,\n        d = Blockly.JavaScript.valueToCode(a, \"A\", c) || \"0\";\n    a = Blockly.JavaScript.valueToCode(a, \"B\", c) || \"0\";\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.JavaScript.logic_operation = function (a) {\n    var b = \"AND\" == a.getFieldValue(\"OP\") ? \"&&\" : \"||\",\n        c = \"&&\" == b ? Blockly.JavaScript.ORDER_LOGICAL_AND : Blockly.JavaScript.ORDER_LOGICAL_OR,\n        d = Blockly.JavaScript.valueToCode(a, \"A\", c);\n    a = Blockly.JavaScript.valueToCode(a, \"B\", c);\n\n    if (d || a) {\n      var e = \"&&\" == b ? \"true\" : \"false\";\n      d || (d = e);\n      a || (a = e);\n    } else a = d = \"false\";\n\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.JavaScript.logic_negate = function (a) {\n    var b = Blockly.JavaScript.ORDER_LOGICAL_NOT;\n    return [\"!\" + (Blockly.JavaScript.valueToCode(a, \"BOOL\", b) || \"true\"), b];\n  };\n\n  Blockly.JavaScript.logic_boolean = function (a) {\n    return [\"TRUE\" == a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  Blockly.JavaScript.logic_null = function (a) {\n    return [\"null\", Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  Blockly.JavaScript.logic_ternary = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"IF\", Blockly.JavaScript.ORDER_CONDITIONAL) || \"false\",\n        c = Blockly.JavaScript.valueToCode(a, \"THEN\", Blockly.JavaScript.ORDER_CONDITIONAL) || \"null\";\n    a = Blockly.JavaScript.valueToCode(a, \"ELSE\", Blockly.JavaScript.ORDER_CONDITIONAL) || \"null\";\n    return [b + \" ? \" + c + \" : \" + a, Blockly.JavaScript.ORDER_CONDITIONAL];\n  };\n\n  Blockly.JavaScript.loops = {};\n\n  Blockly.JavaScript.controls_repeat_ext = function (a) {\n    var b = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : Blockly.JavaScript.valueToCode(a, \"TIMES\", Blockly.JavaScript.ORDER_ASSIGNMENT) || \"0\",\n        c = Blockly.JavaScript.statementToCode(a, \"DO\");\n    c = Blockly.JavaScript.addLoopTrap(c, a);\n    a = \"\";\n    var d = Blockly.JavaScript.variableDB_.getDistinctName(\"count\", Blockly.Variables.NAME_TYPE),\n        e = b;\n    b.match(/^\\w+$/) || Blockly.isNumber(b) || (e = Blockly.JavaScript.variableDB_.getDistinctName(\"repeat_end\", Blockly.Variables.NAME_TYPE), a += \"var \" + e + \" = \" + b + \";\\n\");\n    return a + (\"for (var \" + d + \" = 0; \" + d + \" < \" + e + \"; \" + d + \"++) {\\n\" + c + \"}\\n\");\n  };\n\n  Blockly.JavaScript.controls_repeat = Blockly.JavaScript.controls_repeat_ext;\n\n  Blockly.JavaScript.controls_whileUntil = function (a) {\n    var b = \"UNTIL\" == a.getFieldValue(\"MODE\"),\n        c = Blockly.JavaScript.valueToCode(a, \"BOOL\", b ? Blockly.JavaScript.ORDER_LOGICAL_NOT : Blockly.JavaScript.ORDER_NONE) || \"false\",\n        d = Blockly.JavaScript.statementToCode(a, \"DO\");\n    d = Blockly.JavaScript.addLoopTrap(d, a);\n    b && (c = \"!\" + c);\n    return \"while (\" + c + \") {\\n\" + d + \"}\\n\";\n  };\n\n  Blockly.JavaScript.controls_for = function (a) {\n    var b = Blockly.JavaScript.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.JavaScript.valueToCode(a, \"FROM\", Blockly.JavaScript.ORDER_ASSIGNMENT) || \"0\",\n        d = Blockly.JavaScript.valueToCode(a, \"TO\", Blockly.JavaScript.ORDER_ASSIGNMENT) || \"0\",\n        e = Blockly.JavaScript.valueToCode(a, \"BY\", Blockly.JavaScript.ORDER_ASSIGNMENT) || \"1\",\n        f = Blockly.JavaScript.statementToCode(a, \"DO\");\n    f = Blockly.JavaScript.addLoopTrap(f, a);\n\n    if (Blockly.isNumber(c) && Blockly.isNumber(d) && Blockly.isNumber(e)) {\n      var g = parseFloat(c) <= parseFloat(d);\n      a = \"for (\" + b + \" = \" + c + \"; \" + b + (g ? \" <= \" : \" >= \") + d + \"; \" + b;\n      b = Math.abs(parseFloat(e));\n      a = (1 == b ? a + (g ? \"++\" : \"--\") : a + ((g ? \" += \" : \" -= \") + b)) + (\") {\\n\" + f + \"}\\n\");\n    } else a = \"\", g = c, c.match(/^\\w+$/) || Blockly.isNumber(c) || (g = Blockly.JavaScript.variableDB_.getDistinctName(b + \"_start\", Blockly.Variables.NAME_TYPE), a += \"var \" + g + \" = \" + c + \";\\n\"), c = d, d.match(/^\\w+$/) || Blockly.isNumber(d) || (c = Blockly.JavaScript.variableDB_.getDistinctName(b + \"_end\", Blockly.Variables.NAME_TYPE), a += \"var \" + c + \" = \" + d + \";\\n\"), d = Blockly.JavaScript.variableDB_.getDistinctName(b + \"_inc\", Blockly.Variables.NAME_TYPE), a += \"var \" + d + \" = \", a = Blockly.isNumber(e) ? a + (Math.abs(e) + \";\\n\") : a + (\"Math.abs(\" + e + \");\\n\"), a = a + (\"if (\" + g + \" > \" + c + \") {\\n\") + (Blockly.JavaScript.INDENT + d + \" = -\" + d + \";\\n\"), a += \"}\\n\", a += \"for (\" + b + \" = \" + g + \"; \" + d + \" >= 0 ? \" + b + \" <= \" + c + \" : \" + b + \" >= \" + c + \"; \" + b + \" += \" + d + \") {\\n\" + f + \"}\\n\";\n\n    return a;\n  };\n\n  Blockly.JavaScript.controls_forEach = function (a) {\n    var b = Blockly.JavaScript.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_ASSIGNMENT) || \"[]\",\n        d = Blockly.JavaScript.statementToCode(a, \"DO\");\n    d = Blockly.JavaScript.addLoopTrap(d, a);\n    a = \"\";\n    var e = c;\n    c.match(/^\\w+$/) || (e = Blockly.JavaScript.variableDB_.getDistinctName(b + \"_list\", Blockly.Variables.NAME_TYPE), a += \"var \" + e + \" = \" + c + \";\\n\");\n    c = Blockly.JavaScript.variableDB_.getDistinctName(b + \"_index\", Blockly.Variables.NAME_TYPE);\n    d = Blockly.JavaScript.INDENT + b + \" = \" + e + \"[\" + c + \"];\\n\" + d;\n    return a + (\"for (var \" + c + \" in \" + e + \") {\\n\" + d + \"}\\n\");\n  };\n\n  Blockly.JavaScript.controls_flow_statements = function (a) {\n    var b = \"\";\n    Blockly.JavaScript.STATEMENT_PREFIX && (b += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_PREFIX, a));\n    Blockly.JavaScript.STATEMENT_SUFFIX && (b += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX, a));\n\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\n      var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);\n      c && !c.suppressPrefixSuffix && (b += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_PREFIX, c));\n    }\n\n    switch (a.getFieldValue(\"FLOW\")) {\n      case \"BREAK\":\n        return b + \"break;\\n\";\n\n      case \"CONTINUE\":\n        return b + \"continue;\\n\";\n    }\n\n    throw Error(\"Unknown flow statement.\");\n  };\n\n  Blockly.JavaScript.math = {};\n\n  Blockly.JavaScript.math_number = function (a) {\n    a = parseFloat(a.getFieldValue(\"NUM\"));\n    return [a, 0 <= a ? Blockly.JavaScript.ORDER_ATOMIC : Blockly.JavaScript.ORDER_UNARY_NEGATION];\n  };\n\n  Blockly.JavaScript.math_arithmetic = function (a) {\n    var b = {\n      ADD: [\" + \", Blockly.JavaScript.ORDER_ADDITION],\n      MINUS: [\" - \", Blockly.JavaScript.ORDER_SUBTRACTION],\n      MULTIPLY: [\" * \", Blockly.JavaScript.ORDER_MULTIPLICATION],\n      DIVIDE: [\" / \", Blockly.JavaScript.ORDER_DIVISION],\n      POWER: [null, Blockly.JavaScript.ORDER_COMMA]\n    }[a.getFieldValue(\"OP\")],\n        c = b[0];\n    b = b[1];\n    var d = Blockly.JavaScript.valueToCode(a, \"A\", b) || \"0\";\n    a = Blockly.JavaScript.valueToCode(a, \"B\", b) || \"0\";\n    return c ? [d + c + a, b] : [\"Math.pow(\" + d + \", \" + a + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.math_single = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    if (\"NEG\" == b) return a = Blockly.JavaScript.valueToCode(a, \"NUM\", Blockly.JavaScript.ORDER_UNARY_NEGATION) || \"0\", \"-\" == a[0] && (a = \" \" + a), [\"-\" + a, Blockly.JavaScript.ORDER_UNARY_NEGATION];\n    a = \"SIN\" == b || \"COS\" == b || \"TAN\" == b ? Blockly.JavaScript.valueToCode(a, \"NUM\", Blockly.JavaScript.ORDER_DIVISION) || \"0\" : Blockly.JavaScript.valueToCode(a, \"NUM\", Blockly.JavaScript.ORDER_NONE) || \"0\";\n\n    switch (b) {\n      case \"ABS\":\n        var c = \"Math.abs(\" + a + \")\";\n        break;\n\n      case \"ROOT\":\n        c = \"Math.sqrt(\" + a + \")\";\n        break;\n\n      case \"LN\":\n        c = \"Math.log(\" + a + \")\";\n        break;\n\n      case \"EXP\":\n        c = \"Math.exp(\" + a + \")\";\n        break;\n\n      case \"POW10\":\n        c = \"Math.pow(10,\" + a + \")\";\n        break;\n\n      case \"ROUND\":\n        c = \"Math.round(\" + a + \")\";\n        break;\n\n      case \"ROUNDUP\":\n        c = \"Math.ceil(\" + a + \")\";\n        break;\n\n      case \"ROUNDDOWN\":\n        c = \"Math.floor(\" + a + \")\";\n        break;\n\n      case \"SIN\":\n        c = \"Math.sin(\" + a + \" / 180 * Math.PI)\";\n        break;\n\n      case \"COS\":\n        c = \"Math.cos(\" + a + \" / 180 * Math.PI)\";\n        break;\n\n      case \"TAN\":\n        c = \"Math.tan(\" + a + \" / 180 * Math.PI)\";\n    }\n\n    if (c) return [c, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n    switch (b) {\n      case \"LOG10\":\n        c = \"Math.log(\" + a + \") / Math.log(10)\";\n        break;\n\n      case \"ASIN\":\n        c = \"Math.asin(\" + a + \") / Math.PI * 180\";\n        break;\n\n      case \"ACOS\":\n        c = \"Math.acos(\" + a + \") / Math.PI * 180\";\n        break;\n\n      case \"ATAN\":\n        c = \"Math.atan(\" + a + \") / Math.PI * 180\";\n        break;\n\n      default:\n        throw Error(\"Unknown math operator: \" + b);\n    }\n\n    return [c, Blockly.JavaScript.ORDER_DIVISION];\n  };\n\n  Blockly.JavaScript.math_constant = function (a) {\n    return {\n      PI: [\"Math.PI\", Blockly.JavaScript.ORDER_MEMBER],\n      E: [\"Math.E\", Blockly.JavaScript.ORDER_MEMBER],\n      GOLDEN_RATIO: [\"(1 + Math.sqrt(5)) / 2\", Blockly.JavaScript.ORDER_DIVISION],\n      SQRT2: [\"Math.SQRT2\", Blockly.JavaScript.ORDER_MEMBER],\n      SQRT1_2: [\"Math.SQRT1_2\", Blockly.JavaScript.ORDER_MEMBER],\n      INFINITY: [\"Infinity\", Blockly.JavaScript.ORDER_ATOMIC]\n    }[a.getFieldValue(\"CONSTANT\")];\n  };\n\n  Blockly.JavaScript.math_number_property = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"NUMBER_TO_CHECK\", Blockly.JavaScript.ORDER_MODULUS) || \"0\",\n        c = a.getFieldValue(\"PROPERTY\");\n    if (\"PRIME\" == c) return [Blockly.JavaScript.provideFunction_(\"mathIsPrime\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(n) {\", \"  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\", \"  if (n == 2 || n == 3) {\", \"    return true;\", \"  }\", \"  // False if n is NaN, negative, is 1, or not whole.\", \"  // And false if n is divisible by 2 or 3.\", \"  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {\", \"    return false;\", \"  }\", \"  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\", \"  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\", \"    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\", \"      return false;\", \"    }\", \"  }\", \"  return true;\", \"}\"]) + \"(\" + b + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n    switch (c) {\n      case \"EVEN\":\n        var d = b + \" % 2 == 0\";\n        break;\n\n      case \"ODD\":\n        d = b + \" % 2 == 1\";\n        break;\n\n      case \"WHOLE\":\n        d = b + \" % 1 == 0\";\n        break;\n\n      case \"POSITIVE\":\n        d = b + \" > 0\";\n        break;\n\n      case \"NEGATIVE\":\n        d = b + \" < 0\";\n        break;\n\n      case \"DIVISIBLE_BY\":\n        a = Blockly.JavaScript.valueToCode(a, \"DIVISOR\", Blockly.JavaScript.ORDER_MODULUS) || \"0\", d = b + \" % \" + a + \" == 0\";\n    }\n\n    return [d, Blockly.JavaScript.ORDER_EQUALITY];\n  };\n\n  Blockly.JavaScript.math_change = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"DELTA\", Blockly.JavaScript.ORDER_ADDITION) || \"0\";\n    a = Blockly.JavaScript.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    return a + \" = (typeof \" + a + \" == 'number' ? \" + a + \" : 0) + \" + b + \";\\n\";\n  };\n\n  Blockly.JavaScript.math_round = Blockly.JavaScript.math_single;\n  Blockly.JavaScript.math_trig = Blockly.JavaScript.math_single;\n\n  Blockly.JavaScript.math_on_list = function (a) {\n    var b = a.getFieldValue(\"OP\");\n\n    switch (b) {\n      case \"SUM\":\n        a = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_MEMBER) || \"[]\";\n        a += \".reduce(function(x, y) {return x + y;})\";\n        break;\n\n      case \"MIN\":\n        a = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_COMMA) || \"[]\";\n        a = \"Math.min.apply(null, \" + a + \")\";\n        break;\n\n      case \"MAX\":\n        a = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_COMMA) || \"[]\";\n        a = \"Math.max.apply(null, \" + a + \")\";\n        break;\n\n      case \"AVERAGE\":\n        b = Blockly.JavaScript.provideFunction_(\"mathMean\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(myList) {\", \"  return myList.reduce(function(x, y) {return x + y;}) / myList.length;\", \"}\"]);\n        a = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"MEDIAN\":\n        b = Blockly.JavaScript.provideFunction_(\"mathMedian\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(myList) {\", \"  var localList = myList.filter(function (x) {return typeof x == 'number';});\", \"  if (!localList.length) return null;\", \"  localList.sort(function(a, b) {return b - a;});\", \"  if (localList.length % 2 == 0) {\", \"    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\", \"  } else {\", \"    return localList[(localList.length - 1) / 2];\", \"  }\", \"}\"]);\n        a = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"MODE\":\n        b = Blockly.JavaScript.provideFunction_(\"mathModes\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(values) {\", \"  var modes = [];\", \"  var counts = [];\", \"  var maxCount = 0;\", \"  for (var i = 0; i < values.length; i++) {\", \"    var value = values[i];\", \"    var found = false;\", \"    var thisCount;\", \"    for (var j = 0; j < counts.length; j++) {\", \"      if (counts[j][0] === value) {\", \"        thisCount = ++counts[j][1];\", \"        found = true;\", \"        break;\", \"      }\", \"    }\", \"    if (!found) {\", \"      counts.push([value, 1]);\", \"      thisCount = 1;\", \"    }\", \"    maxCount = Math.max(thisCount, maxCount);\", \"  }\", \"  for (var j = 0; j < counts.length; j++) {\", \"    if (counts[j][1] == maxCount) {\", \"        modes.push(counts[j][0]);\", \"    }\", \"  }\", \"  return modes;\", \"}\"]);\n        a = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"STD_DEV\":\n        b = Blockly.JavaScript.provideFunction_(\"mathStandardDeviation\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(numbers) {\", \"  var n = numbers.length;\", \"  if (!n) return null;\", \"  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\", \"  var variance = 0;\", \"  for (var j = 0; j < n; j++) {\", \"    variance += Math.pow(numbers[j] - mean, 2);\", \"  }\", \"  variance = variance / n;\", \"  return Math.sqrt(variance);\", \"}\"]);\n        a = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"RANDOM\":\n        b = Blockly.JavaScript.provideFunction_(\"mathRandomList\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(list) {\", \"  var x = Math.floor(Math.random() * list.length);\", \"  return list[x];\", \"}\"]);\n        a = Blockly.JavaScript.valueToCode(a, \"LIST\", Blockly.JavaScript.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      default:\n        throw Error(\"Unknown operator: \" + b);\n    }\n\n    return [a, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.math_modulo = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"DIVIDEND\", Blockly.JavaScript.ORDER_MODULUS) || \"0\";\n    a = Blockly.JavaScript.valueToCode(a, \"DIVISOR\", Blockly.JavaScript.ORDER_MODULUS) || \"0\";\n    return [b + \" % \" + a, Blockly.JavaScript.ORDER_MODULUS];\n  };\n\n  Blockly.JavaScript.math_constrain = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_COMMA) || \"0\",\n        c = Blockly.JavaScript.valueToCode(a, \"LOW\", Blockly.JavaScript.ORDER_COMMA) || \"0\";\n    a = Blockly.JavaScript.valueToCode(a, \"HIGH\", Blockly.JavaScript.ORDER_COMMA) || \"Infinity\";\n    return [\"Math.min(Math.max(\" + b + \", \" + c + \"), \" + a + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.math_random_int = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"FROM\", Blockly.JavaScript.ORDER_COMMA) || \"0\";\n    a = Blockly.JavaScript.valueToCode(a, \"TO\", Blockly.JavaScript.ORDER_COMMA) || \"0\";\n    return [Blockly.JavaScript.provideFunction_(\"mathRandomInt\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(a, b) {\", \"  if (a > b) {\", \"    // Swap a and b to ensure a is smaller.\", \"    var c = a;\", \"    a = b;\", \"    b = c;\", \"  }\", \"  return Math.floor(Math.random() * (b - a + 1) + a);\", \"}\"]) + \"(\" + b + \", \" + a + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.math_random_float = function (a) {\n    return [\"Math.random()\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.math_atan2 = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"X\", Blockly.JavaScript.ORDER_COMMA) || \"0\";\n    return [\"Math.atan2(\" + (Blockly.JavaScript.valueToCode(a, \"Y\", Blockly.JavaScript.ORDER_COMMA) || \"0\") + \", \" + b + \") / Math.PI * 180\", Blockly.JavaScript.ORDER_DIVISION];\n  };\n\n  Blockly.JavaScript.procedures = {};\n\n  Blockly.JavaScript.procedures_defreturn = function (a) {\n    var b = Blockly.JavaScript.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE),\n        c = \"\";\n    Blockly.JavaScript.STATEMENT_PREFIX && (c += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_PREFIX, a));\n    Blockly.JavaScript.STATEMENT_SUFFIX && (c += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX, a));\n    c && (c = Blockly.JavaScript.prefixLines(c, Blockly.JavaScript.INDENT));\n    var d = \"\";\n    Blockly.JavaScript.INFINITE_LOOP_TRAP && (d = Blockly.JavaScript.prefixLines(Blockly.JavaScript.injectId(Blockly.JavaScript.INFINITE_LOOP_TRAP, a), Blockly.JavaScript.INDENT));\n    var e = Blockly.JavaScript.statementToCode(a, \"STACK\"),\n        f = Blockly.JavaScript.valueToCode(a, \"RETURN\", Blockly.JavaScript.ORDER_NONE) || \"\",\n        g = \"\";\n    e && f && (g = c);\n    f && (f = Blockly.JavaScript.INDENT + \"return \" + f + \";\\n\");\n\n    for (var k = [], h = 0; h < a.arguments_.length; h++) k[h] = Blockly.JavaScript.variableDB_.getName(a.arguments_[h], Blockly.Variables.NAME_TYPE);\n\n    c = \"function \" + b + \"(\" + k.join(\", \") + \") {\\n\" + c + d + e + g + f + \"}\";\n    c = Blockly.JavaScript.scrub_(a, c);\n    Blockly.JavaScript.definitions_[\"%\" + b] = c;\n    return null;\n  };\n\n  Blockly.JavaScript.procedures_defnoreturn = Blockly.JavaScript.procedures_defreturn;\n\n  Blockly.JavaScript.procedures_callreturn = function (a) {\n    for (var b = Blockly.JavaScript.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.JavaScript.valueToCode(a, \"ARG\" + d, Blockly.JavaScript.ORDER_COMMA) || \"null\";\n\n    return [b + \"(\" + c.join(\", \") + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.procedures_callnoreturn = function (a) {\n    return Blockly.JavaScript.procedures_callreturn(a)[0] + \";\\n\";\n  };\n\n  Blockly.JavaScript.procedures_ifreturn = function (a) {\n    var b = \"if (\" + (Blockly.JavaScript.valueToCode(a, \"CONDITION\", Blockly.JavaScript.ORDER_NONE) || \"false\") + \") {\\n\";\n    Blockly.JavaScript.STATEMENT_SUFFIX && (b += Blockly.JavaScript.prefixLines(Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX, a), Blockly.JavaScript.INDENT));\n    a.hasReturnValue_ ? (a = Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_NONE) || \"null\", b += Blockly.JavaScript.INDENT + \"return \" + a + \";\\n\") : b += Blockly.JavaScript.INDENT + \"return;\\n\";\n    return b + \"}\\n\";\n  };\n\n  Blockly.JavaScript.texts = {};\n\n  Blockly.JavaScript.text = function (a) {\n    return [Blockly.JavaScript.quote_(a.getFieldValue(\"TEXT\")), Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  Blockly.JavaScript.text.forceString_ = function (a) {\n    return Blockly.JavaScript.text.forceString_.strRegExp.test(a) ? a : \"String(\" + a + \")\";\n  };\n\n  Blockly.JavaScript.text.forceString_.strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n  Blockly.JavaScript.text_join = function (a) {\n    switch (a.itemCount_) {\n      case 0:\n        return [\"''\", Blockly.JavaScript.ORDER_ATOMIC];\n\n      case 1:\n        return a = Blockly.JavaScript.valueToCode(a, \"ADD0\", Blockly.JavaScript.ORDER_NONE) || \"''\", a = Blockly.JavaScript.text.forceString_(a), [a, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case 2:\n        var b = Blockly.JavaScript.valueToCode(a, \"ADD0\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n        a = Blockly.JavaScript.valueToCode(a, \"ADD1\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n        a = Blockly.JavaScript.text.forceString_(b) + \" + \" + Blockly.JavaScript.text.forceString_(a);\n        return [a, Blockly.JavaScript.ORDER_ADDITION];\n\n      default:\n        b = Array(a.itemCount_);\n\n        for (var c = 0; c < a.itemCount_; c++) b[c] = Blockly.JavaScript.valueToCode(a, \"ADD\" + c, Blockly.JavaScript.ORDER_COMMA) || \"''\";\n\n        a = \"[\" + b.join(\",\") + \"].join('')\";\n        return [a, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n    }\n  };\n\n  Blockly.JavaScript.text_append = function (a) {\n    var b = Blockly.JavaScript.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    a = Blockly.JavaScript.valueToCode(a, \"TEXT\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n    return b + \" += \" + Blockly.JavaScript.text.forceString_(a) + \";\\n\";\n  };\n\n  Blockly.JavaScript.text_length = function (a) {\n    return [(Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_FUNCTION_CALL) || \"''\") + \".length\", Blockly.JavaScript.ORDER_MEMBER];\n  };\n\n  Blockly.JavaScript.text_isEmpty = function (a) {\n    return [\"!\" + (Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_MEMBER) || \"''\") + \".length\", Blockly.JavaScript.ORDER_LOGICAL_NOT];\n  };\n\n  Blockly.JavaScript.text_indexOf = function (a) {\n    var b = \"FIRST\" == a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        c = Blockly.JavaScript.valueToCode(a, \"FIND\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n    b = (Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_MEMBER) || \"''\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Blockly.JavaScript.ORDER_ADDITION] : [b, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.text_charAt = function (a) {\n    var b = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        c = Blockly.JavaScript.valueToCode(a, \"VALUE\", \"RANDOM\" == b ? Blockly.JavaScript.ORDER_NONE : Blockly.JavaScript.ORDER_MEMBER) || \"''\";\n\n    switch (b) {\n      case \"FIRST\":\n        return [c + \".charAt(0)\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case \"LAST\":\n        return [c + \".slice(-1)\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case \"FROM_START\":\n        return a = Blockly.JavaScript.getAdjusted(a, \"AT\"), [c + \".charAt(\" + a + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case \"FROM_END\":\n        return a = Blockly.JavaScript.getAdjusted(a, \"AT\", 1, !0), [c + \".slice(\" + a + \").charAt(0)\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n\n      case \"RANDOM\":\n        return [Blockly.JavaScript.provideFunction_(\"textRandomLetter\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(text) {\", \"  var x = Math.floor(Math.random() * text.length);\", \"  return text[x];\", \"}\"]) + \"(\" + c + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n    }\n\n    throw Error(\"Unhandled option (text_charAt).\");\n  };\n\n  Blockly.JavaScript.text.getIndex_ = function (a, b, c) {\n    return \"FIRST\" == b ? \"0\" : \"FROM_END\" == b ? a + \".length - 1 - \" + c : \"LAST\" == b ? a + \".length - 1\" : c;\n  };\n\n  Blockly.JavaScript.text_getSubstring = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"STRING\", Blockly.JavaScript.ORDER_FUNCTION_CALL) || \"''\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n    if (\"FIRST\" != c || \"LAST\" != d) if (b.match(/^'?\\w+'?$/) || \"FROM_END\" != c && \"LAST\" != c && \"FROM_END\" != d && \"LAST\" != d) {\n      switch (c) {\n        case \"FROM_START\":\n          var e = Blockly.JavaScript.getAdjusted(a, \"AT1\");\n          break;\n\n        case \"FROM_END\":\n          e = Blockly.JavaScript.getAdjusted(a, \"AT1\", 1, !1, Blockly.JavaScript.ORDER_SUBTRACTION);\n          e = b + \".length - \" + e;\n          break;\n\n        case \"FIRST\":\n          e = \"0\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (text_getSubstring).\");\n      }\n\n      switch (d) {\n        case \"FROM_START\":\n          a = Blockly.JavaScript.getAdjusted(a, \"AT2\", 1);\n          break;\n\n        case \"FROM_END\":\n          a = Blockly.JavaScript.getAdjusted(a, \"AT2\", 0, !1, Blockly.JavaScript.ORDER_SUBTRACTION);\n          a = b + \".length - \" + a;\n          break;\n\n        case \"LAST\":\n          a = b + \".length\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (text_getSubstring).\");\n      }\n\n      b = b + \".slice(\" + e + \", \" + a + \")\";\n    } else {\n      e = Blockly.JavaScript.getAdjusted(a, \"AT1\");\n      a = Blockly.JavaScript.getAdjusted(a, \"AT2\");\n      var f = Blockly.JavaScript.text.getIndex_,\n          g = {\n        FIRST: \"First\",\n        LAST: \"Last\",\n        FROM_START: \"FromStart\",\n        FROM_END: \"FromEnd\"\n      };\n      b = Blockly.JavaScript.provideFunction_(\"subsequence\" + g[c] + g[d], [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(sequence\" + (\"FROM_END\" == c || \"FROM_START\" == c ? \", at1\" : \"\") + (\"FROM_END\" == d || \"FROM_START\" == d ? \", at2\" : \"\") + \") {\", \"  var start = \" + f(\"sequence\", c, \"at1\") + \";\", \"  var end = \" + f(\"sequence\", d, \"at2\") + \" + 1;\", \"  return sequence.slice(start, end);\", \"}\"]) + \"(\" + b + (\"FROM_END\" == c || \"FROM_START\" == c ? \", \" + e : \"\") + (\"FROM_END\" == d || \"FROM_START\" == d ? \", \" + a : \"\") + \")\";\n    }\n    return [b, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.text_changeCase = function (a) {\n    var b = {\n      UPPERCASE: \".toUpperCase()\",\n      LOWERCASE: \".toLowerCase()\",\n      TITLECASE: null\n    }[a.getFieldValue(\"CASE\")];\n    a = Blockly.JavaScript.valueToCode(a, \"TEXT\", b ? Blockly.JavaScript.ORDER_MEMBER : Blockly.JavaScript.ORDER_NONE) || \"''\";\n    return [b ? a + b : Blockly.JavaScript.provideFunction_(\"textToTitleCase\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(str) {\", \"  return str.replace(/\\\\S+/g,\", \"      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\", \"}\"]) + \"(\" + a + \")\", Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.text_trim = function (a) {\n    var b = {\n      LEFT: \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n      RIGHT: \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n      BOTH: \".trim()\"\n    }[a.getFieldValue(\"MODE\")];\n    return [(Blockly.JavaScript.valueToCode(a, \"TEXT\", Blockly.JavaScript.ORDER_MEMBER) || \"''\") + b, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.text_print = function (a) {\n    return \"window.alert(\" + (Blockly.JavaScript.valueToCode(a, \"TEXT\", Blockly.JavaScript.ORDER_NONE) || \"''\") + \");\\n\";\n  };\n\n  Blockly.JavaScript.text_prompt_ext = function (a) {\n    var b = \"window.prompt(\" + (a.getField(\"TEXT\") ? Blockly.JavaScript.quote_(a.getFieldValue(\"TEXT\")) : Blockly.JavaScript.valueToCode(a, \"TEXT\", Blockly.JavaScript.ORDER_NONE) || \"''\") + \")\";\n    \"NUMBER\" == a.getFieldValue(\"TYPE\") && (b = \"parseFloat(\" + b + \")\");\n    return [b, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.JavaScript.text_prompt = Blockly.JavaScript.text_prompt_ext;\n\n  Blockly.JavaScript.text_count = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"TEXT\", Blockly.JavaScript.ORDER_MEMBER) || \"''\";\n    a = Blockly.JavaScript.valueToCode(a, \"SUB\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n    return [Blockly.JavaScript.provideFunction_(\"textCount\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(haystack, needle) {\", \"  if (needle.length === 0) {\", \"    return haystack.length + 1;\", \"  } else {\", \"    return haystack.split(needle).length - 1;\", \"  }\", \"}\"]) + \"(\" + b + \", \" + a + \")\", Blockly.JavaScript.ORDER_SUBTRACTION];\n  };\n\n  Blockly.JavaScript.text_replace = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"TEXT\", Blockly.JavaScript.ORDER_MEMBER) || \"''\",\n        c = Blockly.JavaScript.valueToCode(a, \"FROM\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n    a = Blockly.JavaScript.valueToCode(a, \"TO\", Blockly.JavaScript.ORDER_NONE) || \"''\";\n    return [Blockly.JavaScript.provideFunction_(\"textReplace\", [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(haystack, needle, replacement) {\", '  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g,\"\\\\\\\\$1\")', '                 .replace(/\\\\x08/g,\"\\\\\\\\x08\");', \"  return haystack.replace(new RegExp(needle, 'g'), replacement);\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", Blockly.JavaScript.ORDER_MEMBER];\n  };\n\n  Blockly.JavaScript.text_reverse = function (a) {\n    return [(Blockly.JavaScript.valueToCode(a, \"TEXT\", Blockly.JavaScript.ORDER_MEMBER) || \"''\") + \".split('').reverse().join('')\", Blockly.JavaScript.ORDER_MEMBER];\n  };\n\n  Blockly.JavaScript.variables = {};\n\n  Blockly.JavaScript.variables_get = function (a) {\n    return [Blockly.JavaScript.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE), Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\n  Blockly.JavaScript.variables_set = function (a) {\n    var b = Blockly.JavaScript.valueToCode(a, \"VALUE\", Blockly.JavaScript.ORDER_ASSIGNMENT) || \"0\";\n    return Blockly.JavaScript.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE) + \" = \" + b + \";\\n\";\n  };\n\n  Blockly.JavaScript.variablesDynamic = {};\n  Blockly.JavaScript.variables_get_dynamic = Blockly.JavaScript.variables_get;\n  Blockly.JavaScript.variables_set_dynamic = Blockly.JavaScript.variables_set;\n  return Blockly.JavaScript;\n};","map":null,"metadata":{},"sourceType":"script"}