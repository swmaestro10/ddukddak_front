{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _browser = require('node-blockly/browser');\n\nvar _browser2 = _interopRequireDefault(_browser);\n\nvar _BlocklyToolbox = require('./BlocklyToolbox');\n\nvar _BlocklyToolbox2 = _interopRequireDefault(_BlocklyToolbox);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar styles = null;\n\nvar initTools = function initTools(tools) {\n  tools.forEach(function (tool) {\n    _browser2.default.Blocks[tool.name] = tool.block;\n    _browser2.default.JavaScript[tool.name] = tool.generator;\n  });\n};\n\nvar BlocklyDrawer = function (_Component) {\n  _inherits(BlocklyDrawer, _Component);\n\n  function BlocklyDrawer(props) {\n    _classCallCheck(this, BlocklyDrawer);\n\n    var _this = _possibleConstructorReturn(this, (BlocklyDrawer.__proto__ || Object.getPrototypeOf(BlocklyDrawer)).call(this, props));\n\n    _this.onResize = _this.onResize.bind(_this);\n    _this.wrapper = null;\n    _this.content = null;\n    return _this;\n  }\n\n  _createClass(BlocklyDrawer, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      initTools(this.props.tools);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.wrapper) {\n        window.addEventListener('resize', this.onResize, false);\n        this.onResize();\n        this.workspacePlayground = _browser2.default.inject(this.content, Object.assign({\n          toolbox: this.toolbox\n        }, this.props.injectOptions));\n\n        if (this.props.workspaceXML) {\n          _browser2.default.Xml.domToWorkspace(_browser2.default.Xml.textToDom(this.props.workspaceXML), this.workspacePlayground);\n        }\n\n        _browser2.default.svgResize(this.workspacePlayground);\n\n        this.workspacePlayground.addChangeListener(function () {\n          var code = _this2.props.language ? _this2.props.language.workspaceToCode(_this2.workspacePlayground) : null;\n\n          var xml = _browser2.default.Xml.workspaceToDom(_this2.workspacePlayground);\n\n          var xmlText = _browser2.default.Xml.domToText(xml);\n\n          _this2.props.onChange(code, xmlText);\n        });\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      initTools(nextProps.tools);\n      this.workspacePlayground.clear();\n\n      if (nextProps.workspaceXML) {\n        var dom = _browser2.default.Xml.textToDom(nextProps.workspaceXML);\n\n        _browser2.default.Xml.domToWorkspace(dom, this.workspacePlayground);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }, {\n    key: 'onResize',\n    value: function onResize() {\n      var element = this.wrapper;\n\n      do {\n        element = element.offsetParent;\n      } while (element);\n\n      this.content.style.width = this.wrapper.offsetWidth + 'px';\n      this.content.style.height = this.wrapper.offsetHeight + 'px';\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var wrapperStyle = Object.assign({}, styles.wrapper, this.props.style);\n      return _react2.default.createElement('div', {\n        className: this.props.className,\n        style: wrapperStyle,\n        ref: function ref(wrapper) {\n          _this3.wrapper = wrapper;\n        }\n      }, _react2.default.createElement('div', {\n        style: styles.content,\n        ref: function ref(content) {\n          _this3.content = content;\n        }\n      }), _react2.default.createElement(_BlocklyToolbox2.default, {\n        onRef: function onRef(toolbox) {\n          _this3.toolbox = toolbox;\n        },\n        tools: this.props.tools,\n        appearance: this.props.appearance,\n        onUpdate: function onUpdate() {\n          if (_this3.workspacePlayground && _this3.toolbox) {\n            _this3.workspacePlayground.updateToolbox(_this3.toolbox.outerHTML);\n          }\n        }\n      }, this.props.children));\n    }\n  }]);\n\n  return BlocklyDrawer;\n}(_react.Component);\n\nBlocklyDrawer.defaultProps = {\n  onChange: function onChange() {},\n  tools: [],\n  workspaceXML: '',\n  injectOptions: {},\n  language: _browser2.default.JavaScript,\n  appearance: {},\n  className: '',\n  style: {}\n};\nBlocklyDrawer.propTypes = {\n  tools: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    name: _propTypes2.default.string,\n    category: _propTypes2.default.string,\n    block: _propTypes2.default.shape({\n      init: _propTypes2.default.func\n    }),\n    generator: _propTypes2.default.func\n  })).isRequired,\n  onChange: _propTypes2.default.func,\n  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),\n  workspaceXML: _propTypes2.default.string,\n  injectOptions: _propTypes2.default.object,\n  language: _propTypes2.default.object,\n  appearance: _propTypes2.default.object,\n  className: _propTypes2.default.string,\n  style: _propTypes2.default.object\n};\nstyles = {\n  wrapper: {\n    minHeight: '400px',\n    position: 'relative'\n  },\n  content: {\n    position: 'absolute'\n  }\n};\nexports.default = BlocklyDrawer;","map":null,"metadata":{},"sourceType":"script"}