{"ast":null,"code":"module.exports = function (Blockly) {\n  // Do not edit this file; automatically generated by build.py.\n  'use strict';\n\n  Blockly.PHP = new Blockly.Generator(\"PHP\");\n  Blockly.PHP.addReservedWords(\"__halt_compiler,abstract,and,array,as,break,callable,case,catch,class,clone,const,continue,declare,default,die,do,echo,else,elseif,empty,enddeclare,endfor,endforeach,endif,endswitch,endwhile,eval,exit,extends,final,for,foreach,function,global,goto,if,implements,include,include_once,instanceof,insteadof,interface,isset,list,namespace,new,or,print,private,protected,public,require,require_once,return,static,switch,throw,trait,try,unset,use,var,while,xor,PHP_VERSION,PHP_MAJOR_VERSION,PHP_MINOR_VERSION,PHP_RELEASE_VERSION,PHP_VERSION_ID,PHP_EXTRA_VERSION,PHP_ZTS,PHP_DEBUG,PHP_MAXPATHLEN,PHP_OS,PHP_SAPI,PHP_EOL,PHP_INT_MAX,PHP_INT_SIZE,DEFAULT_INCLUDE_PATH,PEAR_INSTALL_DIR,PEAR_EXTENSION_DIR,PHP_EXTENSION_DIR,PHP_PREFIX,PHP_BINDIR,PHP_BINARY,PHP_MANDIR,PHP_LIBDIR,PHP_DATADIR,PHP_SYSCONFDIR,PHP_LOCALSTATEDIR,PHP_CONFIG_FILE_PATH,PHP_CONFIG_FILE_SCAN_DIR,PHP_SHLIB_SUFFIX,E_ERROR,E_WARNING,E_PARSE,E_NOTICE,E_CORE_ERROR,E_CORE_WARNING,E_COMPILE_ERROR,E_COMPILE_WARNING,E_USER_ERROR,E_USER_WARNING,E_USER_NOTICE,E_DEPRECATED,E_USER_DEPRECATED,E_ALL,E_STRICT,__COMPILER_HALT_OFFSET__,TRUE,FALSE,NULL,__CLASS__,__DIR__,__FILE__,__FUNCTION__,__LINE__,__METHOD__,__NAMESPACE__,__TRAIT__\");\n  Blockly.PHP.ORDER_ATOMIC = 0;\n  Blockly.PHP.ORDER_CLONE = 1;\n  Blockly.PHP.ORDER_NEW = 1;\n  Blockly.PHP.ORDER_MEMBER = 2.1;\n  Blockly.PHP.ORDER_FUNCTION_CALL = 2.2;\n  Blockly.PHP.ORDER_POWER = 3;\n  Blockly.PHP.ORDER_INCREMENT = 4;\n  Blockly.PHP.ORDER_DECREMENT = 4;\n  Blockly.PHP.ORDER_BITWISE_NOT = 4;\n  Blockly.PHP.ORDER_CAST = 4;\n  Blockly.PHP.ORDER_SUPPRESS_ERROR = 4;\n  Blockly.PHP.ORDER_INSTANCEOF = 5;\n  Blockly.PHP.ORDER_LOGICAL_NOT = 6;\n  Blockly.PHP.ORDER_UNARY_PLUS = 7.1;\n  Blockly.PHP.ORDER_UNARY_NEGATION = 7.2;\n  Blockly.PHP.ORDER_MULTIPLICATION = 8.1;\n  Blockly.PHP.ORDER_DIVISION = 8.2;\n  Blockly.PHP.ORDER_MODULUS = 8.3;\n  Blockly.PHP.ORDER_ADDITION = 9.1;\n  Blockly.PHP.ORDER_SUBTRACTION = 9.2;\n  Blockly.PHP.ORDER_STRING_CONCAT = 9.3;\n  Blockly.PHP.ORDER_BITWISE_SHIFT = 10;\n  Blockly.PHP.ORDER_RELATIONAL = 11;\n  Blockly.PHP.ORDER_EQUALITY = 12;\n  Blockly.PHP.ORDER_REFERENCE = 13;\n  Blockly.PHP.ORDER_BITWISE_AND = 13;\n  Blockly.PHP.ORDER_BITWISE_XOR = 14;\n  Blockly.PHP.ORDER_BITWISE_OR = 15;\n  Blockly.PHP.ORDER_LOGICAL_AND = 16;\n  Blockly.PHP.ORDER_LOGICAL_OR = 17;\n  Blockly.PHP.ORDER_IF_NULL = 18;\n  Blockly.PHP.ORDER_CONDITIONAL = 19;\n  Blockly.PHP.ORDER_ASSIGNMENT = 20;\n  Blockly.PHP.ORDER_LOGICAL_AND_WEAK = 21;\n  Blockly.PHP.ORDER_LOGICAL_XOR = 22;\n  Blockly.PHP.ORDER_LOGICAL_OR_WEAK = 23;\n  Blockly.PHP.ORDER_COMMA = 24;\n  Blockly.PHP.ORDER_NONE = 99;\n  Blockly.PHP.ORDER_OVERRIDES = [[Blockly.PHP.ORDER_MEMBER, Blockly.PHP.ORDER_FUNCTION_CALL], [Blockly.PHP.ORDER_MEMBER, Blockly.PHP.ORDER_MEMBER], [Blockly.PHP.ORDER_LOGICAL_NOT, Blockly.PHP.ORDER_LOGICAL_NOT], [Blockly.PHP.ORDER_MULTIPLICATION, Blockly.PHP.ORDER_MULTIPLICATION], [Blockly.PHP.ORDER_ADDITION, Blockly.PHP.ORDER_ADDITION], [Blockly.PHP.ORDER_LOGICAL_AND, Blockly.PHP.ORDER_LOGICAL_AND], [Blockly.PHP.ORDER_LOGICAL_OR, Blockly.PHP.ORDER_LOGICAL_OR]];\n\n  Blockly.PHP.init = function (a) {\n    Blockly.PHP.definitions_ = Object.create(null);\n    Blockly.PHP.functionNames_ = Object.create(null);\n    Blockly.PHP.variableDB_ ? Blockly.PHP.variableDB_.reset() : Blockly.PHP.variableDB_ = new Blockly.Names(Blockly.PHP.RESERVED_WORDS_, \"$\");\n    Blockly.PHP.variableDB_.setVariableMap(a.getVariableMap());\n\n    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(Blockly.PHP.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE) + \";\");\n\n    a = Blockly.Variables.allUsedVarModels(a);\n\n    for (d = 0; c = a[d]; d++) b.push(Blockly.PHP.variableDB_.getName(c.getId(), Blockly.Variables.NAME_TYPE) + \";\");\n\n    Blockly.PHP.definitions_.variables = b.join(\"\\n\");\n  };\n\n  Blockly.PHP.finish = function (a) {\n    var b = [],\n        c;\n\n    for (c in Blockly.PHP.definitions_) b.push(Blockly.PHP.definitions_[c]);\n\n    delete Blockly.PHP.definitions_;\n    delete Blockly.PHP.functionNames_;\n    Blockly.PHP.variableDB_.reset();\n    return b.join(\"\\n\\n\") + \"\\n\\n\\n\" + a;\n  };\n\n  Blockly.PHP.scrubNakedValue = function (a) {\n    return a + \";\\n\";\n  };\n\n  Blockly.PHP.quote_ = function (a) {\n    a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/'/g, \"\\\\'\");\n    return \"'\" + a + \"'\";\n  };\n\n  Blockly.PHP.scrub_ = function (a, b, c) {\n    var d = \"\";\n\n    if (!a.outputConnection || !a.outputConnection.targetConnection) {\n      var e = a.getCommentText();\n      (e = Blockly.utils.string.wrap(e, Blockly.PHP.COMMENT_WRAP - 3)) && (d += Blockly.PHP.prefixLines(e, \"// \") + \"\\n\");\n\n      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.PHP.allNestedComments(e)) && (d += Blockly.PHP.prefixLines(e, \"// \"));\n    }\n\n    a = a.nextConnection && a.nextConnection.targetBlock();\n    c = c ? \"\" : Blockly.PHP.blockToCode(a);\n    return d + b + c;\n  };\n\n  Blockly.PHP.getAdjusted = function (a, b, c, d, e) {\n    c = c || 0;\n    e = e || Blockly.PHP.ORDER_NONE;\n    a.workspace.options.oneBasedIndex && c--;\n    var f = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n    a = 0 < c ? Blockly.PHP.valueToCode(a, b, Blockly.PHP.ORDER_ADDITION) || f : 0 > c ? Blockly.PHP.valueToCode(a, b, Blockly.PHP.ORDER_SUBTRACTION) || f : d ? Blockly.PHP.valueToCode(a, b, Blockly.PHP.ORDER_UNARY_NEGATION) || f : Blockly.PHP.valueToCode(a, b, e) || f;\n    if (Blockly.isNumber(a)) a = parseFloat(a) + c, d && (a = -a);else {\n      if (0 < c) {\n        a = a + \" + \" + c;\n        var g = Blockly.PHP.ORDER_ADDITION;\n      } else 0 > c && (a = a + \" - \" + -c, g = Blockly.PHP.ORDER_SUBTRACTION);\n\n      d && (a = c ? \"-(\" + a + \")\" : \"-\" + a, g = Blockly.PHP.ORDER_UNARY_NEGATION);\n      g = Math.floor(g);\n      e = Math.floor(e);\n      g && e >= g && (a = \"(\" + a + \")\");\n    }\n    return a;\n  };\n\n  Blockly.PHP.colour = {};\n\n  Blockly.PHP.colour_picker = function (a) {\n    return [Blockly.PHP.quote_(a.getFieldValue(\"COLOUR\")), Blockly.PHP.ORDER_ATOMIC];\n  };\n\n  Blockly.PHP.colour_random = function (a) {\n    return [Blockly.PHP.provideFunction_(\"colour_random\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"() {\", \"  return '#' . str_pad(dechex(mt_rand(0, 0xFFFFFF)), 6, '0', STR_PAD_LEFT);\", \"}\"]) + \"()\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.colour_rgb = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"RED\", Blockly.PHP.ORDER_COMMA) || 0,\n        c = Blockly.PHP.valueToCode(a, \"GREEN\", Blockly.PHP.ORDER_COMMA) || 0;\n    a = Blockly.PHP.valueToCode(a, \"BLUE\", Blockly.PHP.ORDER_COMMA) || 0;\n    return [Blockly.PHP.provideFunction_(\"colour_rgb\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($r, $g, $b) {\", \"  $r = round(max(min($r, 100), 0) * 2.55);\", \"  $g = round(max(min($g, 100), 0) * 2.55);\", \"  $b = round(max(min($b, 100), 0) * 2.55);\", \"  $hex = '#';\", \"  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\", \"  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\", \"  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\", \"  return $hex;\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.colour_blend = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"COLOUR1\", Blockly.PHP.ORDER_COMMA) || \"'#000000'\",\n        c = Blockly.PHP.valueToCode(a, \"COLOUR2\", Blockly.PHP.ORDER_COMMA) || \"'#000000'\";\n    a = Blockly.PHP.valueToCode(a, \"RATIO\", Blockly.PHP.ORDER_COMMA) || .5;\n    return [Blockly.PHP.provideFunction_(\"colour_blend\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($c1, $c2, $ratio) {\", \"  $ratio = max(min($ratio, 1), 0);\", \"  $r1 = hexdec(substr($c1, 1, 2));\", \"  $g1 = hexdec(substr($c1, 3, 2));\", \"  $b1 = hexdec(substr($c1, 5, 2));\", \"  $r2 = hexdec(substr($c2, 1, 2));\", \"  $g2 = hexdec(substr($c2, 3, 2));\", \"  $b2 = hexdec(substr($c2, 5, 2));\", \"  $r = round($r1 * (1 - $ratio) + $r2 * $ratio);\", \"  $g = round($g1 * (1 - $ratio) + $g2 * $ratio);\", \"  $b = round($b1 * (1 - $ratio) + $b2 * $ratio);\", \"  $hex = '#';\", \"  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\", \"  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\", \"  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\", \"  return $hex;\", \"}\"]) + \"(\" + b + \", \" + c + \", \" + a + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists = {};\n\n  Blockly.PHP.lists_create_empty = function (a) {\n    return [\"array()\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_create_with = function (a) {\n    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.PHP.valueToCode(a, \"ADD\" + c, Blockly.PHP.ORDER_COMMA) || \"null\";\n\n    b = \"array(\" + b.join(\", \") + \")\";\n    return [b, Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_repeat = function (a) {\n    var b = Blockly.PHP.provideFunction_(\"lists_repeat\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($value, $count) {\", \"  $array = array();\", \"  for ($index = 0; $index < $count; $index++) {\", \"    $array[] = $value;\", \"  }\", \"  return $array;\", \"}\"]),\n        c = Blockly.PHP.valueToCode(a, \"ITEM\", Blockly.PHP.ORDER_COMMA) || \"null\";\n    a = Blockly.PHP.valueToCode(a, \"NUM\", Blockly.PHP.ORDER_COMMA) || \"0\";\n    return [b + \"(\" + c + \", \" + a + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_length = function (a) {\n    var b = Blockly.PHP.provideFunction_(\"length\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($value) {\", \"  if (is_string($value)) {\", \"    return strlen($value);\", \"  } else {\", \"    return count($value);\", \"  }\", \"}\"]);\n    a = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"''\";\n    return [b + \"(\" + a + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_isEmpty = function (a) {\n    return [\"empty(\" + (Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_FUNCTION_CALL) || \"array()\") + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_indexOf = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"FIND\", Blockly.PHP.ORDER_NONE) || \"''\",\n        c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_MEMBER) || \"[]\";\n    if (a.workspace.options.oneBasedIndex) var d = \" 0\",\n        e = \" + 1\";else d = \" -1\", e = \"\";\n    return [(\"FIRST\" == a.getFieldValue(\"END\") ? Blockly.PHP.provideFunction_(\"indexOf\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($haystack, $needle) {\", \"  for ($index = 0; $index < count($haystack); $index++) {\", \"    if ($haystack[$index] == $needle) return $index\" + e + \";\", \"  }\", \"  return \" + d + \";\", \"}\"]) : Blockly.PHP.provideFunction_(\"lastIndexOf\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($haystack, $needle) {\", \"  $last = \" + d + \";\", \"  for ($index = 0; $index < count($haystack); $index++) {\", \"    if ($haystack[$index] == $needle) $last = $index\" + e + \";\", \"  }\", \"  return $last;\", \"}\"])) + \"(\" + c + \", \" + b + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_getIndex = function (a) {\n    var b = a.getFieldValue(\"MODE\") || \"GET\";\n\n    switch (a.getFieldValue(\"WHERE\") || \"FROM_START\") {\n      case \"FIRST\":\n        if (\"GET\" == b) {\n          var c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_MEMBER) || \"array()\";\n          return [c + \"[0]\", Blockly.PHP.ORDER_MEMBER];\n        }\n\n        if (\"GET_REMOVE\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"array()\", [\"array_shift(\" + c + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"array()\", \"array_shift(\" + c + \");\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"GET\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"array()\", [\"end(\" + c + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n        if (\"GET_REMOVE\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"array()\", [\"array_pop(\" + c + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"array()\", \"array_pop(\" + c + \");\\n\";\n        break;\n\n      case \"FROM_START\":\n        var d = Blockly.PHP.getAdjusted(a, \"AT\");\n        if (\"GET\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_MEMBER) || \"array()\", [c + \"[\" + d + \"]\", Blockly.PHP.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_COMMA) || \"array()\", [\"array_splice(\" + c + \", \" + d + \", 1)[0]\", Blockly.PHP.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_COMMA) || \"array()\", \"array_splice(\" + c + \", \" + d + \", 1);\\n\";\n        break;\n\n      case \"FROM_END\":\n        if (\"GET\" == b) return c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_COMMA) || \"array()\", d = Blockly.PHP.getAdjusted(a, \"AT\", 1, !0), [\"array_slice(\" + c + \", \" + d + \", 1)[0]\", Blockly.PHP.ORDER_FUNCTION_CALL];\n\n        if (\"GET_REMOVE\" == b || \"REMOVE\" == b) {\n          c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"array()\";\n          d = Blockly.PHP.getAdjusted(a, \"AT\", 1, !1, Blockly.PHP.ORDER_SUBTRACTION);\n          c = \"array_splice(\" + c + \", count(\" + c + \") - \" + d + \", 1)[0]\";\n          if (\"GET_REMOVE\" == b) return [c, Blockly.PHP.ORDER_FUNCTION_CALL];\n          if (\"REMOVE\" == b) return c + \";\\n\";\n        }\n\n        break;\n\n      case \"RANDOM\":\n        c = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"array()\";\n        if (\"GET\" == b) return b = Blockly.PHP.provideFunction_(\"lists_get_random_item\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($list) {\", \"  return $list[rand(0,count($list)-1)];\", \"}\"]), [b + \"(\" + c + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n        if (\"GET_REMOVE\" == b) return b = Blockly.PHP.provideFunction_(\"lists_get_remove_random_item\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"(&$list) {\", \"  $x = rand(0,count($list)-1);\", \"  unset($list[$x]);\", \"  return array_values($list);\", \"}\"]), [b + \"(\" + c + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return b = Blockly.PHP.provideFunction_(\"lists_remove_random_item\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"(&$list) {\", \"  unset($list[rand(0,count($list)-1)]);\", \"}\"]), b + \"(\" + c + \");\\n\";\n    }\n\n    throw Error(\"Unhandled combination (lists_getIndex).\");\n  };\n\n  Blockly.PHP.lists_setIndex = function (a) {\n    var b = a.getFieldValue(\"MODE\") || \"GET\",\n        c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = Blockly.PHP.valueToCode(a, \"TO\", Blockly.PHP.ORDER_ASSIGNMENT) || \"null\";\n\n    switch (c) {\n      case \"FIRST\":\n        if (\"SET\" == b) return c = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_MEMBER) || \"array()\", c + \"[0] = \" + d + \";\\n\";\n        if (\"INSERT\" == b) return c = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_COMMA) || \"array()\", \"array_unshift(\" + c + \", \" + d + \");\\n\";\n        break;\n\n      case \"LAST\":\n        c = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_COMMA) || \"array()\";\n        if (\"SET\" == b) return b = Blockly.PHP.provideFunction_(\"lists_set_last_item\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"(&$list, $value) {\", \"  $list[count($list) - 1] = $value;\", \"}\"]), b + \"(\" + c + \", \" + d + \");\\n\";\n        if (\"INSERT\" == b) return \"array_push(\" + c + \", \" + d + \");\\n\";\n        break;\n\n      case \"FROM_START\":\n        var e = Blockly.PHP.getAdjusted(a, \"AT\");\n        if (\"SET\" == b) return c = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_MEMBER) || \"array()\", c + \"[\" + e + \"] = \" + d + \";\\n\";\n        if (\"INSERT\" == b) return c = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_COMMA) || \"array()\", \"array_splice(\" + c + \", \" + e + \", 0, \" + d + \");\\n\";\n        break;\n\n      case \"FROM_END\":\n        c = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_COMMA) || \"array()\";\n        e = Blockly.PHP.getAdjusted(a, \"AT\", 1);\n        if (\"SET\" == b) return b = Blockly.PHP.provideFunction_(\"lists_set_from_end\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"(&$list, $at, $value) {\", \"  $list[count($list) - $at] = $value;\", \"}\"]), b + \"(\" + c + \", \" + e + \", \" + d + \");\\n\";\n        if (\"INSERT\" == b) return b = Blockly.PHP.provideFunction_(\"lists_insert_from_end\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"(&$list, $at, $value) {\", \"  return array_splice($list, count($list) - $at, 0, $value);\", \"}\"]), b + \"(\" + c + \", \" + e + \", \" + d + \");\\n\";\n        break;\n\n      case \"RANDOM\":\n        c = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_REFERENCE) || \"array()\";\n        c.match(/^\\$\\w+$/) ? a = \"\" : (a = Blockly.PHP.variableDB_.getDistinctName(\"tmp_list\", Blockly.Variables.NAME_TYPE), e = a + \" = &\" + c + \";\\n\", c = a, a = e);\n        e = Blockly.PHP.variableDB_.getDistinctName(\"tmp_x\", Blockly.Variables.NAME_TYPE);\n        a += e + \" = rand(0, count(\" + c + \")-1);\\n\";\n        if (\"SET\" == b) return a + (c + \"[\" + e + \"] = \" + d + \";\\n\");\n        if (\"INSERT\" == b) return a + (\"array_splice(\" + c + \", \" + e + \", 0, \" + d + \");\\n\");\n    }\n\n    throw Error(\"Unhandled combination (lists_setIndex).\");\n  };\n\n  Blockly.PHP.lists_getSublist = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_COMMA) || \"array()\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n    if (\"FIRST\" != c || \"LAST\" != d) if (b.match(/^\\$\\w+$/) || \"FROM_END\" != c && \"FROM_START\" == d) {\n      switch (c) {\n        case \"FROM_START\":\n          var e = Blockly.PHP.getAdjusted(a, \"AT1\");\n          break;\n\n        case \"FROM_END\":\n          e = Blockly.PHP.getAdjusted(a, \"AT1\", 1, !1, Blockly.PHP.ORDER_SUBTRACTION);\n          e = \"count(\" + b + \") - \" + e;\n          break;\n\n        case \"FIRST\":\n          e = \"0\";\n          break;\n\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n\n      switch (d) {\n        case \"FROM_START\":\n          a = Blockly.PHP.getAdjusted(a, \"AT2\", 0, !1, Blockly.PHP.ORDER_SUBTRACTION);\n          c = a + \" - \";\n          c = Blockly.isNumber(String(e)) || String(e).match(/^\\(.+\\)$/) ? c + e : c + (\"(\" + e + \")\");\n          c += \" + 1\";\n          break;\n\n        case \"FROM_END\":\n          a = Blockly.PHP.getAdjusted(a, \"AT2\", 0, !1, Blockly.PHP.ORDER_SUBTRACTION);\n          c = \"count(\" + b + \") - \" + a + \" - \";\n          c = Blockly.isNumber(String(e)) || String(e).match(/^\\(.+\\)$/) ? c + e : c + (\"(\" + e + \")\");\n          break;\n\n        case \"LAST\":\n          c = \"count(\" + b + \") - \";\n          c = Blockly.isNumber(String(e)) || String(e).match(/^\\(.+\\)$/) ? c + e : c + (\"(\" + e + \")\");\n          break;\n\n        default:\n          throw Error(\"Unhandled option (lists_getSublist).\");\n      }\n\n      b = \"array_slice(\" + b + \", \" + e + \", \" + c + \")\";\n    } else e = Blockly.PHP.getAdjusted(a, \"AT1\"), a = Blockly.PHP.getAdjusted(a, \"AT2\"), b = Blockly.PHP.provideFunction_(\"lists_get_sublist\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($list, $where1, $at1, $where2, $at2) {\", \"  if ($where1 == 'FROM_END') {\", \"    $at1 = count($list) - 1 - $at1;\", \"  } else if ($where1 == 'FIRST') {\", \"    $at1 = 0;\", \"  } else if ($where1 != 'FROM_START'){\", \"    throw new Exception('Unhandled option (lists_get_sublist).');\", \"  }\", \"  $length = 0;\", \"  if ($where2 == 'FROM_START') {\", \"    $length = $at2 - $at1 + 1;\", \"  } else if ($where2 == 'FROM_END') {\", \"    $length = count($list) - $at1 - $at2;\", \"  } else if ($where2 == 'LAST') {\", \"    $length = count($list) - $at1;\", \"  } else {\", \"    throw new Exception('Unhandled option (lists_get_sublist).');\", \"  }\", \"  return array_slice($list, $at1, $length);\", \"}\"]) + \"(\" + b + \", '\" + c + \"', \" + e + \", '\" + d + \"', \" + a + \")\";\n    return [b, Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_sort = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_COMMA) || \"array()\",\n        c = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n    a = a.getFieldValue(\"TYPE\");\n    return [Blockly.PHP.provideFunction_(\"lists_sort\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($list, $type, $direction) {\", \"  $sortCmpFuncs = array(\", '    \"NUMERIC\" => \"strnatcasecmp\",', '    \"TEXT\" => \"strcmp\",', '    \"IGNORE_CASE\" => \"strcasecmp\"', \"  );\", \"  $sortCmp = $sortCmpFuncs[$type];\", \"  $list2 = $list;\", \"  usort($list2, $sortCmp);\", \"  if ($direction == -1) {\", \"    $list2 = array_reverse($list2);\", \"  }\", \"  return $list2;\", \"}\"]) + \"(\" + b + ', \"' + a + '\", ' + c + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_split = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"INPUT\", Blockly.PHP.ORDER_COMMA),\n        c = Blockly.PHP.valueToCode(a, \"DELIM\", Blockly.PHP.ORDER_COMMA) || \"''\";\n    a = a.getFieldValue(\"MODE\");\n    if (\"SPLIT\" == a) b || (b = \"''\"), a = \"explode\";else if (\"JOIN\" == a) b || (b = \"array()\"), a = \"implode\";else throw Error(\"Unknown mode: \" + a);\n    return [a + \"(\" + c + \", \" + b + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.lists_reverse = function (a) {\n    return [\"array_reverse(\" + (Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_COMMA) || \"[]\") + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.logic = {};\n\n  Blockly.PHP.controls_if = function (a) {\n    var b = 0,\n        c = \"\";\n    Blockly.PHP.STATEMENT_PREFIX && (c += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_PREFIX, a));\n\n    do {\n      var d = Blockly.PHP.valueToCode(a, \"IF\" + b, Blockly.PHP.ORDER_NONE) || \"false\";\n      var e = Blockly.PHP.statementToCode(a, \"DO\" + b);\n      Blockly.PHP.STATEMENT_SUFFIX && (e = Blockly.PHP.prefixLines(Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, a), Blockly.PHP.INDENT) + e);\n      c += (0 < b ? \" else \" : \"\") + \"if (\" + d + \") {\\n\" + e + \"}\";\n      ++b;\n    } while (a.getInput(\"IF\" + b));\n\n    if (a.getInput(\"ELSE\") || Blockly.PHP.STATEMENT_SUFFIX) e = Blockly.PHP.statementToCode(a, \"ELSE\"), Blockly.PHP.STATEMENT_SUFFIX && (e = Blockly.PHP.prefixLines(Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, a), Blockly.PHP.INDENT) + e), c += \" else {\\n\" + e + \"}\";\n    return c + \"\\n\";\n  };\n\n  Blockly.PHP.controls_ifelse = Blockly.PHP.controls_if;\n\n  Blockly.PHP.logic_compare = function (a) {\n    var b = {\n      EQ: \"==\",\n      NEQ: \"!=\",\n      LT: \"<\",\n      LTE: \"<=\",\n      GT: \">\",\n      GTE: \">=\"\n    }[a.getFieldValue(\"OP\")],\n        c = \"==\" == b || \"!=\" == b ? Blockly.PHP.ORDER_EQUALITY : Blockly.PHP.ORDER_RELATIONAL,\n        d = Blockly.PHP.valueToCode(a, \"A\", c) || \"0\";\n    a = Blockly.PHP.valueToCode(a, \"B\", c) || \"0\";\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.PHP.logic_operation = function (a) {\n    var b = \"AND\" == a.getFieldValue(\"OP\") ? \"&&\" : \"||\",\n        c = \"&&\" == b ? Blockly.PHP.ORDER_LOGICAL_AND : Blockly.PHP.ORDER_LOGICAL_OR,\n        d = Blockly.PHP.valueToCode(a, \"A\", c);\n    a = Blockly.PHP.valueToCode(a, \"B\", c);\n\n    if (d || a) {\n      var e = \"&&\" == b ? \"true\" : \"false\";\n      d || (d = e);\n      a || (a = e);\n    } else a = d = \"false\";\n\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.PHP.logic_negate = function (a) {\n    var b = Blockly.PHP.ORDER_LOGICAL_NOT;\n    return [\"!\" + (Blockly.PHP.valueToCode(a, \"BOOL\", b) || \"true\"), b];\n  };\n\n  Blockly.PHP.logic_boolean = function (a) {\n    return [\"TRUE\" == a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", Blockly.PHP.ORDER_ATOMIC];\n  };\n\n  Blockly.PHP.logic_null = function (a) {\n    return [\"null\", Blockly.PHP.ORDER_ATOMIC];\n  };\n\n  Blockly.PHP.logic_ternary = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"IF\", Blockly.PHP.ORDER_CONDITIONAL) || \"false\",\n        c = Blockly.PHP.valueToCode(a, \"THEN\", Blockly.PHP.ORDER_CONDITIONAL) || \"null\";\n    a = Blockly.PHP.valueToCode(a, \"ELSE\", Blockly.PHP.ORDER_CONDITIONAL) || \"null\";\n    return [b + \" ? \" + c + \" : \" + a, Blockly.PHP.ORDER_CONDITIONAL];\n  };\n\n  Blockly.PHP.loops = {};\n\n  Blockly.PHP.controls_repeat_ext = function (a) {\n    var b = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : Blockly.PHP.valueToCode(a, \"TIMES\", Blockly.PHP.ORDER_ASSIGNMENT) || \"0\",\n        c = Blockly.PHP.statementToCode(a, \"DO\");\n    c = Blockly.PHP.addLoopTrap(c, a);\n    a = \"\";\n    var d = Blockly.PHP.variableDB_.getDistinctName(\"count\", Blockly.Variables.NAME_TYPE),\n        e = b;\n    b.match(/^\\w+$/) || Blockly.isNumber(b) || (e = Blockly.PHP.variableDB_.getDistinctName(\"repeat_end\", Blockly.Variables.NAME_TYPE), a += e + \" = \" + b + \";\\n\");\n    return a + (\"for (\" + d + \" = 0; \" + d + \" < \" + e + \"; \" + d + \"++) {\\n\" + c + \"}\\n\");\n  };\n\n  Blockly.PHP.controls_repeat = Blockly.PHP.controls_repeat_ext;\n\n  Blockly.PHP.controls_whileUntil = function (a) {\n    var b = \"UNTIL\" == a.getFieldValue(\"MODE\"),\n        c = Blockly.PHP.valueToCode(a, \"BOOL\", b ? Blockly.PHP.ORDER_LOGICAL_NOT : Blockly.PHP.ORDER_NONE) || \"false\",\n        d = Blockly.PHP.statementToCode(a, \"DO\");\n    d = Blockly.PHP.addLoopTrap(d, a);\n    b && (c = \"!\" + c);\n    return \"while (\" + c + \") {\\n\" + d + \"}\\n\";\n  };\n\n  Blockly.PHP.controls_for = function (a) {\n    var b = Blockly.PHP.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.PHP.valueToCode(a, \"FROM\", Blockly.PHP.ORDER_ASSIGNMENT) || \"0\",\n        d = Blockly.PHP.valueToCode(a, \"TO\", Blockly.PHP.ORDER_ASSIGNMENT) || \"0\",\n        e = Blockly.PHP.valueToCode(a, \"BY\", Blockly.PHP.ORDER_ASSIGNMENT) || \"1\",\n        f = Blockly.PHP.statementToCode(a, \"DO\");\n    f = Blockly.PHP.addLoopTrap(f, a);\n\n    if (Blockly.isNumber(c) && Blockly.isNumber(d) && Blockly.isNumber(e)) {\n      var g = parseFloat(c) <= parseFloat(d);\n      a = \"for (\" + b + \" = \" + c + \"; \" + b + (g ? \" <= \" : \" >= \") + d + \"; \" + b;\n      b = Math.abs(parseFloat(e));\n      a = (1 == b ? a + (g ? \"++\" : \"--\") : a + ((g ? \" += \" : \" -= \") + b)) + (\") {\\n\" + f + \"}\\n\");\n    } else a = \"\", g = c, c.match(/^\\w+$/) || Blockly.isNumber(c) || (g = Blockly.PHP.variableDB_.getDistinctName(b + \"_start\", Blockly.Variables.NAME_TYPE), a += g + \" = \" + c + \";\\n\"), c = d, d.match(/^\\w+$/) || Blockly.isNumber(d) || (c = Blockly.PHP.variableDB_.getDistinctName(b + \"_end\", Blockly.Variables.NAME_TYPE), a += c + \" = \" + d + \";\\n\"), d = Blockly.PHP.variableDB_.getDistinctName(b + \"_inc\", Blockly.Variables.NAME_TYPE), a += d + \" = \", a = Blockly.isNumber(e) ? a + (Math.abs(e) + \";\\n\") : a + (\"abs(\" + e + \");\\n\"), a = a + (\"if (\" + g + \" > \" + c + \") {\\n\") + (Blockly.PHP.INDENT + d + \" = -\" + d + \";\\n\"), a += \"}\\n\", a += \"for (\" + b + \" = \" + g + \"; \" + d + \" >= 0 ? \" + b + \" <= \" + c + \" : \" + b + \" >= \" + c + \"; \" + b + \" += \" + d + \") {\\n\" + f + \"}\\n\";\n\n    return a;\n  };\n\n  Blockly.PHP.controls_forEach = function (a) {\n    var b = Blockly.PHP.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE),\n        c = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_ASSIGNMENT) || \"[]\",\n        d = Blockly.PHP.statementToCode(a, \"DO\");\n    d = Blockly.PHP.addLoopTrap(d, a);\n    return \"foreach (\" + c + \" as \" + b + \") {\\n\" + d + \"}\\n\";\n  };\n\n  Blockly.PHP.controls_flow_statements = function (a) {\n    var b = \"\";\n    Blockly.PHP.STATEMENT_PREFIX && (b += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_PREFIX, a));\n    Blockly.PHP.STATEMENT_SUFFIX && (b += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, a));\n\n    if (Blockly.PHP.STATEMENT_PREFIX) {\n      var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);\n      c && !c.suppressPrefixSuffix && (b += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_PREFIX, c));\n    }\n\n    switch (a.getFieldValue(\"FLOW\")) {\n      case \"BREAK\":\n        return b + \"break;\\n\";\n\n      case \"CONTINUE\":\n        return b + \"continue;\\n\";\n    }\n\n    throw Error(\"Unknown flow statement.\");\n  };\n\n  Blockly.PHP.math = {};\n\n  Blockly.PHP.math_number = function (a) {\n    a = parseFloat(a.getFieldValue(\"NUM\"));\n    var b = 0 <= a ? Blockly.PHP.ORDER_ATOMIC : Blockly.PHP.ORDER_UNARY_NEGATION;\n    Infinity == a ? a = \"INF\" : -Infinity == a && (a = \"-INF\");\n    return [a, b];\n  };\n\n  Blockly.PHP.math_arithmetic = function (a) {\n    var b = {\n      ADD: [\" + \", Blockly.PHP.ORDER_ADDITION],\n      MINUS: [\" - \", Blockly.PHP.ORDER_SUBTRACTION],\n      MULTIPLY: [\" * \", Blockly.PHP.ORDER_MULTIPLICATION],\n      DIVIDE: [\" / \", Blockly.PHP.ORDER_DIVISION],\n      POWER: [\" ** \", Blockly.PHP.ORDER_POWER]\n    }[a.getFieldValue(\"OP\")],\n        c = b[0];\n    b = b[1];\n    var d = Blockly.PHP.valueToCode(a, \"A\", b) || \"0\";\n    a = Blockly.PHP.valueToCode(a, \"B\", b) || \"0\";\n    return [d + c + a, b];\n  };\n\n  Blockly.PHP.math_single = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    if (\"NEG\" == b) return a = Blockly.PHP.valueToCode(a, \"NUM\", Blockly.PHP.ORDER_UNARY_NEGATION) || \"0\", \"-\" == a[0] && (a = \" \" + a), [\"-\" + a, Blockly.PHP.ORDER_UNARY_NEGATION];\n    a = \"SIN\" == b || \"COS\" == b || \"TAN\" == b ? Blockly.PHP.valueToCode(a, \"NUM\", Blockly.PHP.ORDER_DIVISION) || \"0\" : Blockly.PHP.valueToCode(a, \"NUM\", Blockly.PHP.ORDER_NONE) || \"0\";\n\n    switch (b) {\n      case \"ABS\":\n        var c = \"abs(\" + a + \")\";\n        break;\n\n      case \"ROOT\":\n        c = \"sqrt(\" + a + \")\";\n        break;\n\n      case \"LN\":\n        c = \"log(\" + a + \")\";\n        break;\n\n      case \"EXP\":\n        c = \"exp(\" + a + \")\";\n        break;\n\n      case \"POW10\":\n        c = \"pow(10,\" + a + \")\";\n        break;\n\n      case \"ROUND\":\n        c = \"round(\" + a + \")\";\n        break;\n\n      case \"ROUNDUP\":\n        c = \"ceil(\" + a + \")\";\n        break;\n\n      case \"ROUNDDOWN\":\n        c = \"floor(\" + a + \")\";\n        break;\n\n      case \"SIN\":\n        c = \"sin(\" + a + \" / 180 * pi())\";\n        break;\n\n      case \"COS\":\n        c = \"cos(\" + a + \" / 180 * pi())\";\n        break;\n\n      case \"TAN\":\n        c = \"tan(\" + a + \" / 180 * pi())\";\n    }\n\n    if (c) return [c, Blockly.PHP.ORDER_FUNCTION_CALL];\n\n    switch (b) {\n      case \"LOG10\":\n        c = \"log(\" + a + \") / log(10)\";\n        break;\n\n      case \"ASIN\":\n        c = \"asin(\" + a + \") / pi() * 180\";\n        break;\n\n      case \"ACOS\":\n        c = \"acos(\" + a + \") / pi() * 180\";\n        break;\n\n      case \"ATAN\":\n        c = \"atan(\" + a + \") / pi() * 180\";\n        break;\n\n      default:\n        throw Error(\"Unknown math operator: \" + b);\n    }\n\n    return [c, Blockly.PHP.ORDER_DIVISION];\n  };\n\n  Blockly.PHP.math_constant = function (a) {\n    return {\n      PI: [\"M_PI\", Blockly.PHP.ORDER_ATOMIC],\n      E: [\"M_E\", Blockly.PHP.ORDER_ATOMIC],\n      GOLDEN_RATIO: [\"(1 + sqrt(5)) / 2\", Blockly.PHP.ORDER_DIVISION],\n      SQRT2: [\"M_SQRT2\", Blockly.PHP.ORDER_ATOMIC],\n      SQRT1_2: [\"M_SQRT1_2\", Blockly.PHP.ORDER_ATOMIC],\n      INFINITY: [\"INF\", Blockly.PHP.ORDER_ATOMIC]\n    }[a.getFieldValue(\"CONSTANT\")];\n  };\n\n  Blockly.PHP.math_number_property = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"NUMBER_TO_CHECK\", Blockly.PHP.ORDER_MODULUS) || \"0\",\n        c = a.getFieldValue(\"PROPERTY\");\n    if (\"PRIME\" == c) return [Blockly.PHP.provideFunction_(\"math_isPrime\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($n) {\", \"  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\", \"  if ($n == 2 || $n == 3) {\", \"    return true;\", \"  }\", \"  // False if n is NaN, negative, is 1, or not whole.\", \"  // And false if n is divisible by 2 or 3.\", \"  if (!is_numeric($n) || $n <= 1 || $n % 1 != 0 || $n % 2 == 0 || $n % 3 == 0) {\", \"    return false;\", \"  }\", \"  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\", \"  for ($x = 6; $x <= sqrt($n) + 1; $x += 6) {\", \"    if ($n % ($x - 1) == 0 || $n % ($x + 1) == 0) {\", \"      return false;\", \"    }\", \"  }\", \"  return true;\", \"}\"]) + \"(\" + b + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n\n    switch (c) {\n      case \"EVEN\":\n        var d = b + \" % 2 == 0\";\n        break;\n\n      case \"ODD\":\n        d = b + \" % 2 == 1\";\n        break;\n\n      case \"WHOLE\":\n        d = \"is_int(\" + b + \")\";\n        break;\n\n      case \"POSITIVE\":\n        d = b + \" > 0\";\n        break;\n\n      case \"NEGATIVE\":\n        d = b + \" < 0\";\n        break;\n\n      case \"DIVISIBLE_BY\":\n        a = Blockly.PHP.valueToCode(a, \"DIVISOR\", Blockly.PHP.ORDER_MODULUS) || \"0\", d = b + \" % \" + a + \" == 0\";\n    }\n\n    return [d, Blockly.PHP.ORDER_EQUALITY];\n  };\n\n  Blockly.PHP.math_change = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"DELTA\", Blockly.PHP.ORDER_ADDITION) || \"0\";\n    return Blockly.PHP.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE) + \" += \" + b + \";\\n\";\n  };\n\n  Blockly.PHP.math_round = Blockly.PHP.math_single;\n  Blockly.PHP.math_trig = Blockly.PHP.math_single;\n\n  Blockly.PHP.math_on_list = function (a) {\n    var b = a.getFieldValue(\"OP\");\n\n    switch (b) {\n      case \"SUM\":\n        a = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_FUNCTION_CALL) || \"array()\";\n        a = \"array_sum(\" + a + \")\";\n        break;\n\n      case \"MIN\":\n        a = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_FUNCTION_CALL) || \"array()\";\n        a = \"min(\" + a + \")\";\n        break;\n\n      case \"MAX\":\n        a = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_FUNCTION_CALL) || \"array()\";\n        a = \"max(\" + a + \")\";\n        break;\n\n      case \"AVERAGE\":\n        b = Blockly.PHP.provideFunction_(\"math_mean\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($myList) {\", \"  return array_sum($myList) / count($myList);\", \"}\"]);\n        a = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_NONE) || \"array()\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"MEDIAN\":\n        b = Blockly.PHP.provideFunction_(\"math_median\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($arr) {\", \"  sort($arr,SORT_NUMERIC);\", \"  return (count($arr) % 2) ? $arr[floor(count($arr)/2)] : \", \"      ($arr[floor(count($arr)/2)] + $arr[floor(count($arr)/2) - 1]) / 2;\", \"}\"]);\n        a = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"MODE\":\n        b = Blockly.PHP.provideFunction_(\"math_modes\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($values) {\", \"  if (empty($values)) return array();\", \"  $counts = array_count_values($values);\", \"  arsort($counts); // Sort counts in descending order\", \"  $modes = array_keys($counts, current($counts), true);\", \"  return $modes;\", \"}\"]);\n        a = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"STD_DEV\":\n        b = Blockly.PHP.provideFunction_(\"math_standard_deviation\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($numbers) {\", \"  $n = count($numbers);\", \"  if (!$n) return null;\", \"  $mean = array_sum($numbers) / count($numbers);\", \"  foreach($numbers as $key => $num) $devs[$key] = pow($num - $mean, 2);\", \"  return sqrt(array_sum($devs) / (count($devs) - 1));\", \"}\"]);\n        a = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      case \"RANDOM\":\n        b = Blockly.PHP.provideFunction_(\"math_random_list\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($list) {\", \"  $x = rand(0, count($list)-1);\", \"  return $list[$x];\", \"}\"]);\n        a = Blockly.PHP.valueToCode(a, \"LIST\", Blockly.PHP.ORDER_NONE) || \"[]\";\n        a = b + \"(\" + a + \")\";\n        break;\n\n      default:\n        throw Error(\"Unknown operator: \" + b);\n    }\n\n    return [a, Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.math_modulo = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"DIVIDEND\", Blockly.PHP.ORDER_MODULUS) || \"0\";\n    a = Blockly.PHP.valueToCode(a, \"DIVISOR\", Blockly.PHP.ORDER_MODULUS) || \"0\";\n    return [b + \" % \" + a, Blockly.PHP.ORDER_MODULUS];\n  };\n\n  Blockly.PHP.math_constrain = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_COMMA) || \"0\",\n        c = Blockly.PHP.valueToCode(a, \"LOW\", Blockly.PHP.ORDER_COMMA) || \"0\";\n    a = Blockly.PHP.valueToCode(a, \"HIGH\", Blockly.PHP.ORDER_COMMA) || \"Infinity\";\n    return [\"min(max(\" + b + \", \" + c + \"), \" + a + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.math_random_int = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"FROM\", Blockly.PHP.ORDER_COMMA) || \"0\";\n    a = Blockly.PHP.valueToCode(a, \"TO\", Blockly.PHP.ORDER_COMMA) || \"0\";\n    return [Blockly.PHP.provideFunction_(\"math_random_int\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($a, $b) {\", \"  if ($a > $b) {\", \"    return rand($b, $a);\", \"  }\", \"  return rand($a, $b);\", \"}\"]) + \"(\" + b + \", \" + a + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.math_random_float = function (a) {\n    return [\"(float)rand()/(float)getrandmax()\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.math_atan2 = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"X\", Blockly.PHP.ORDER_COMMA) || \"0\";\n    return [\"atan2(\" + (Blockly.PHP.valueToCode(a, \"Y\", Blockly.PHP.ORDER_COMMA) || \"0\") + \", \" + b + \") / pi() * 180\", Blockly.PHP.ORDER_DIVISION];\n  };\n\n  Blockly.PHP.procedures = {};\n\n  Blockly.PHP.procedures_defreturn = function (a) {\n    for (var b = [], c, d = a.workspace, e = Blockly.Variables.allUsedVarModels(d) || [], f = 0; c = e[f]; f++) c = c.name, -1 == a.arguments_.indexOf(c) && b.push(Blockly.PHP.variableDB_.getName(c, Blockly.Variables.NAME_TYPE));\n\n    d = Blockly.Variables.allDeveloperVariables(d);\n\n    for (f = 0; f < d.length; f++) b.push(Blockly.PHP.variableDB_.getName(d[f], Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n\n    b = b.length ? Blockly.PHP.INDENT + \"global \" + b.join(\", \") + \";\\n\" : \"\";\n    d = Blockly.PHP.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE);\n    e = \"\";\n    Blockly.PHP.STATEMENT_PREFIX && (e += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_PREFIX, a));\n    Blockly.PHP.STATEMENT_SUFFIX && (e += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, a));\n    e && (e = Blockly.PHP.prefixLines(e, Blockly.PHP.INDENT));\n    c = \"\";\n    Blockly.PHP.INFINITE_LOOP_TRAP && (c = Blockly.PHP.prefixLines(Blockly.PHP.injectId(Blockly.PHP.INFINITE_LOOP_TRAP, a), Blockly.PHP.INDENT));\n    var g = Blockly.PHP.statementToCode(a, \"STACK\"),\n        h = Blockly.PHP.valueToCode(a, \"RETURN\", Blockly.PHP.ORDER_NONE) || \"\",\n        k = \"\";\n    g && h && (k = e);\n    h && (h = Blockly.PHP.INDENT + \"return \" + h + \";\\n\");\n    var l = [];\n\n    for (f = 0; f < a.arguments_.length; f++) l[f] = Blockly.PHP.variableDB_.getName(a.arguments_[f], Blockly.Variables.NAME_TYPE);\n\n    b = \"function \" + d + \"(\" + l.join(\", \") + \") {\\n\" + b + e + c + g + k + h + \"}\";\n    b = Blockly.PHP.scrub_(a, b);\n    Blockly.PHP.definitions_[\"%\" + d] = b;\n    return null;\n  };\n\n  Blockly.PHP.procedures_defnoreturn = Blockly.PHP.procedures_defreturn;\n\n  Blockly.PHP.procedures_callreturn = function (a) {\n    for (var b = Blockly.PHP.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.Procedures.NAME_TYPE), c = [], d = 0; d < a.arguments_.length; d++) c[d] = Blockly.PHP.valueToCode(a, \"ARG\" + d, Blockly.PHP.ORDER_COMMA) || \"null\";\n\n    return [b + \"(\" + c.join(\", \") + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.procedures_callnoreturn = function (a) {\n    return Blockly.PHP.procedures_callreturn(a)[0] + \";\\n\";\n  };\n\n  Blockly.PHP.procedures_ifreturn = function (a) {\n    var b = \"if (\" + (Blockly.PHP.valueToCode(a, \"CONDITION\", Blockly.PHP.ORDER_NONE) || \"false\") + \") {\\n\";\n    Blockly.PHP.STATEMENT_SUFFIX && (b += Blockly.PHP.prefixLines(Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, a), Blockly.PHP.INDENT));\n    a.hasReturnValue_ ? (a = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"null\", b += Blockly.PHP.INDENT + \"return \" + a + \";\\n\") : b += Blockly.PHP.INDENT + \"return;\\n\";\n    return b + \"}\\n\";\n  };\n\n  Blockly.PHP.texts = {};\n\n  Blockly.PHP.text = function (a) {\n    return [Blockly.PHP.quote_(a.getFieldValue(\"TEXT\")), Blockly.PHP.ORDER_ATOMIC];\n  };\n\n  Blockly.PHP.text_join = function (a) {\n    if (0 == a.itemCount_) return [\"''\", Blockly.PHP.ORDER_ATOMIC];\n    if (1 == a.itemCount_) return [Blockly.PHP.valueToCode(a, \"ADD0\", Blockly.PHP.ORDER_NONE) || \"''\", Blockly.PHP.ORDER_FUNCTION_CALL];\n\n    if (2 == a.itemCount_) {\n      var b = Blockly.PHP.valueToCode(a, \"ADD0\", Blockly.PHP.ORDER_ATOMIC) || \"''\";\n      a = Blockly.PHP.valueToCode(a, \"ADD1\", Blockly.PHP.ORDER_ATOMIC) || \"''\";\n      return [b + \" . \" + a, Blockly.PHP.ORDER_STRING_CONCAT];\n    }\n\n    b = Array(a.itemCount_);\n\n    for (var c = 0; c < a.itemCount_; c++) b[c] = Blockly.PHP.valueToCode(a, \"ADD\" + c, Blockly.PHP.ORDER_COMMA) || \"''\";\n\n    a = \"implode('', array(\" + b.join(\",\") + \"))\";\n    return [a, Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_append = function (a) {\n    var b = Blockly.PHP.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE);\n    a = Blockly.PHP.valueToCode(a, \"TEXT\", Blockly.PHP.ORDER_ASSIGNMENT) || \"''\";\n    return b + \" .= \" + a + \";\\n\";\n  };\n\n  Blockly.PHP.text_length = function (a) {\n    var b = Blockly.PHP.provideFunction_(\"length\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($value) {\", \"  if (is_string($value)) {\", \"    return strlen($value);\", \"  } else {\", \"    return count($value);\", \"  }\", \"}\"]);\n    a = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"''\";\n    return [b + \"(\" + a + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_isEmpty = function (a) {\n    return [\"empty(\" + (Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"''\") + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_indexOf = function (a) {\n    var b = \"FIRST\" == a.getFieldValue(\"END\") ? \"strpos\" : \"strrpos\",\n        c = Blockly.PHP.valueToCode(a, \"FIND\", Blockly.PHP.ORDER_NONE) || \"''\",\n        d = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_NONE) || \"''\";\n    if (a.workspace.options.oneBasedIndex) var e = \" 0\",\n        f = \" + 1\";else e = \" -1\", f = \"\";\n    return [Blockly.PHP.provideFunction_(\"FIRST\" == a.getFieldValue(\"END\") ? \"text_indexOf\" : \"text_lastIndexOf\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($text, $search) {\", \"  $pos = \" + b + \"($text, $search);\", \"  return $pos === false ? \" + e + \" : $pos\" + f + \";\", \"}\"]) + \"(\" + d + \", \" + c + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_charAt = function (a) {\n    var b = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        c = Blockly.PHP.valueToCode(a, \"VALUE\", \"RANDOM\" == b ? Blockly.PHP.ORDER_NONE : Blockly.PHP.ORDER_COMMA) || \"''\";\n\n    switch (b) {\n      case \"FIRST\":\n        return [\"substr(\" + c + \", 0, 1)\", Blockly.PHP.ORDER_FUNCTION_CALL];\n\n      case \"LAST\":\n        return [\"substr(\" + c + \", -1)\", Blockly.PHP.ORDER_FUNCTION_CALL];\n\n      case \"FROM_START\":\n        return a = Blockly.PHP.getAdjusted(a, \"AT\"), [\"substr(\" + c + \", \" + a + \", 1)\", Blockly.PHP.ORDER_FUNCTION_CALL];\n\n      case \"FROM_END\":\n        return a = Blockly.PHP.getAdjusted(a, \"AT\", 1, !0), [\"substr(\" + c + \", \" + a + \", 1)\", Blockly.PHP.ORDER_FUNCTION_CALL];\n\n      case \"RANDOM\":\n        return [Blockly.PHP.provideFunction_(\"text_random_letter\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($text) {\", \"  return $text[rand(0, strlen($text) - 1)];\", \"}\"]) + \"(\" + c + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n    }\n\n    throw Error(\"Unhandled option (text_charAt).\");\n  };\n\n  Blockly.PHP.text_getSubstring = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"STRING\", Blockly.PHP.ORDER_FUNCTION_CALL) || \"''\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n\n    if (\"FIRST\" != c || \"LAST\" != d) {\n      var e = Blockly.PHP.getAdjusted(a, \"AT1\");\n      a = Blockly.PHP.getAdjusted(a, \"AT2\");\n      b = Blockly.PHP.provideFunction_(\"text_get_substring\", [\"function \" + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + \"($text, $where1, $at1, $where2, $at2) {\", \"  if ($where1 == 'FROM_END') {\", \"    $at1 = strlen($text) - 1 - $at1;\", \"  } else if ($where1 == 'FIRST') {\", \"    $at1 = 0;\", \"  } else if ($where1 != 'FROM_START'){\", \"    throw new Exception('Unhandled option (text_get_substring).');\", \"  }\", \"  $length = 0;\", \"  if ($where2 == 'FROM_START') {\", \"    $length = $at2 - $at1 + 1;\", \"  } else if ($where2 == 'FROM_END') {\", \"    $length = strlen($text) - $at1 - $at2;\", \"  } else if ($where2 == 'LAST') {\", \"    $length = strlen($text) - $at1;\", \"  } else {\", \"    throw new Exception('Unhandled option (text_get_substring).');\", \"  }\", \"  return substr($text, $at1, $length);\", \"}\"]) + \"(\" + b + \", '\" + c + \"', \" + e + \", '\" + d + \"', \" + a + \")\";\n    }\n\n    return [b, Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_changeCase = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"TEXT\", Blockly.PHP.ORDER_NONE) || \"''\";\n    if (\"UPPERCASE\" == a.getFieldValue(\"CASE\")) var c = \"strtoupper(\" + b + \")\";else \"LOWERCASE\" == a.getFieldValue(\"CASE\") ? c = \"strtolower(\" + b + \")\" : \"TITLECASE\" == a.getFieldValue(\"CASE\") && (c = \"ucwords(strtolower(\" + b + \"))\");\n    return [c, Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_trim = function (a) {\n    var b = {\n      LEFT: \"ltrim\",\n      RIGHT: \"rtrim\",\n      BOTH: \"trim\"\n    }[a.getFieldValue(\"MODE\")];\n    a = Blockly.PHP.valueToCode(a, \"TEXT\", Blockly.PHP.ORDER_NONE) || \"''\";\n    return [b + \"(\" + a + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_print = function (a) {\n    return \"print(\" + (Blockly.PHP.valueToCode(a, \"TEXT\", Blockly.PHP.ORDER_NONE) || \"''\") + \");\\n\";\n  };\n\n  Blockly.PHP.text_prompt_ext = function (a) {\n    var b = \"readline(\" + (a.getField(\"TEXT\") ? Blockly.PHP.quote_(a.getFieldValue(\"TEXT\")) : Blockly.PHP.valueToCode(a, \"TEXT\", Blockly.PHP.ORDER_NONE) || \"''\") + \")\";\n    \"NUMBER\" == a.getFieldValue(\"TYPE\") && (b = \"floatval(\" + b + \")\");\n    return [b, Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_prompt = Blockly.PHP.text_prompt_ext;\n\n  Blockly.PHP.text_count = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"TEXT\", Blockly.PHP.ORDER_MEMBER) || \"''\";\n    a = Blockly.PHP.valueToCode(a, \"SUB\", Blockly.PHP.ORDER_NONE) || \"''\";\n    return [\"strlen(\" + a + \") === 0 ? strlen(\" + b + \") + 1 : substr_count(\" + b + \", \" + a + \")\", Blockly.PHP.ORDER_CONDITIONAL];\n  };\n\n  Blockly.PHP.text_replace = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"TEXT\", Blockly.PHP.ORDER_MEMBER) || \"''\",\n        c = Blockly.PHP.valueToCode(a, \"FROM\", Blockly.PHP.ORDER_NONE) || \"''\";\n    a = Blockly.PHP.valueToCode(a, \"TO\", Blockly.PHP.ORDER_NONE) || \"''\";\n    return [\"str_replace(\" + c + \", \" + a + \", \" + b + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.text_reverse = function (a) {\n    return [\"strrev(\" + (Blockly.PHP.valueToCode(a, \"TEXT\", Blockly.PHP.ORDER_MEMBER) || \"''\") + \")\", Blockly.PHP.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.PHP.variables = {};\n\n  Blockly.PHP.variables_get = function (a) {\n    return [Blockly.PHP.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE), Blockly.PHP.ORDER_ATOMIC];\n  };\n\n  Blockly.PHP.variables_set = function (a) {\n    var b = Blockly.PHP.valueToCode(a, \"VALUE\", Blockly.PHP.ORDER_ASSIGNMENT) || \"0\";\n    return Blockly.PHP.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.Variables.NAME_TYPE) + \" = \" + b + \";\\n\";\n  };\n\n  Blockly.PHP.variablesDynamic = {};\n  Blockly.PHP.variables_get_dynamic = Blockly.PHP.variables_get;\n  Blockly.PHP.variables_set_dynamic = Blockly.PHP.variables_set;\n  return Blockly.PHP;\n};","map":null,"metadata":{},"sourceType":"script"}