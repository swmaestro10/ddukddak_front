{"ast":null,"code":"//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_dummy',\n//\t\t\t\t\t\t},\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_value',\n//\t\t\t\t\t\t\tname : 'number_b',\n//\t\t\t\t\t\t\tcheck : 'Number'\n//\t\t\t\t\t\t}\n//\t\t\t\t\tinputsInline : true,\n//\t\t\t\t\toutput: 'String',\n//\t\t\t\t\tnextStatement : null,\n//\t\t\t\t\tpreviousStatement : null,\nimport Blockly from 'node-blockly/browser'; // Category : Data\n\nconst TrainData = {\n  name: 'TrainData',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 데이터 %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NUM',\n          check: 'Int'\n        }],\n        colour: 210,\n        tooltip: 'TrainData'\n      });\n    }\n  },\n  generator: block => {\n    const num = \"'\".concat(block.getFieldValue('NUM'), \"'\");\n    const code = \"training_num = \".concat(num, \"<br />\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst TestData = {\n  name: 'TestData',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '테스트 데이터 %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NUM',\n          check: 'Int'\n        }],\n        colour: 220,\n        tooltip: 'TestData'\n      });\n    }\n  },\n  generator: block => {\n    const num = \"'\".concat(block.getFieldValue('NUM'), \"'\");\n    const code = \"test_num = \".concat(num, \"<br />\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n}; // Category : Layer\n\nconst ModelLayer1 = {\n  name: 'ModelLayer1',\n  category: 'Layer',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 방법 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"A 방법\", \"nn.ReLU\"], [\"B 방법\", \"nn.LogSigmoid\"]]\n        }],\n        colour: 160,\n        tooltip: 'ModelLayer1',\n        nextStatement: null\n      });\n    }\n  },\n  generator: block => {\n    const model = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"\".concat(model, \"<br />\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst ModelLayer2 = {\n  name: 'ModelLayer2',\n  category: 'Layer',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 방법 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"A 방법\", \"nn.ReLU\"], [\"B 방법\", \"nn.LogSigmoid\"]]\n        }],\n        colour: 165,\n        tooltip: 'ModelLayer2',\n        nextStatement: null,\n        previousStatement: null\n      });\n    }\n  },\n  generator: block => {\n    const model = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"\".concat(model, \"<br />\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst ModelLayer3 = {\n  name: 'ModelLayer3',\n  category: 'Layer',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 방법 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"A 방법\", \"nn.ReLU\"], [\"B 방법\", \"nn.LogSigmoid\"]]\n        }],\n        colour: 170,\n        tooltip: 'ModelLayer3',\n        previousStatement: null\n      });\n    }\n  },\n  generator: block => {\n    const model = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"\".concat(model, \"<br />\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n}; // Category : Training\n\nconst LearningRate = {\n  name: 'LearningRate',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 속도 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"느리게\", \"500\"], [\"보통\", \"1000\"], [\"빠르게\", \"2000\"]]\n        }],\n        colour: 110,\n        tooltip: 'LearningRate'\n      });\n    }\n  },\n  generator: block => {\n    const select = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"learning_rate = \".concat(select, \"<br />\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst Epochs = {\n  name: 'Epochs',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '복습 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"한다\", \"1\"], [\"안한다\", \"2\"]]\n        }],\n        colour: 120,\n        tooltip: 'Epochs'\n      });\n    }\n  },\n  generator: block => {\n    const select = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"num_epochs = \".concat(select, \"<br />\");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst blocks = [TrainData, TestData, ModelLayer1, ModelLayer2, ModelLayer3, LearningRate, Epochs];\nexport { blocks };","map":{"version":3,"sources":["/home/codeup/ddukddak/ddukddak_front/ddukddak/src/container/blocks.js"],"names":["Blockly","TrainData","name","category","block","init","jsonInit","message0","args0","type","check","colour","tooltip","generator","num","getFieldValue","code","Python","ORDER_ATOMIC","TestData","ModelLayer1","options","nextStatement","model","ModelLayer2","previousStatement","ModelLayer3","LearningRate","select","Epochs","blocks"],"mappings":"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","sourcesContent":["//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_dummy',\n//\t\t\t\t\t\t},\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_value',\n//\t\t\t\t\t\t\tname : 'number_b',\n//\t\t\t\t\t\t\tcheck : 'Number'\n//\t\t\t\t\t\t}\n//\t\t\t\t\tinputsInline : true,\n//\t\t\t\t\toutput: 'String',\n//\t\t\t\t\tnextStatement : null,\n//\t\t\t\t\tpreviousStatement : null,\nimport Blockly from 'node-blockly/browser';\n\n// Category : Data\nconst TrainData = {\n\tname : 'TrainData',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 데이터 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype: 'field_input',\n\t\t\t\t\tname: 'NUM',\n\t\t\t\t\tcheck: 'Int', \n\t\t\t\t},],\n\t\t\t\tcolour: 210,\n\t\t\t\ttooltip: 'TrainData',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst num = `'${block.getFieldValue('NUM')}'`;\n\t\tconst code = `training_num = ${num}<br />`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst TestData = {\n\tname : 'TestData',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '테스트 데이터 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype: 'field_input',\n\t\t\t\t\tname: 'NUM',\n\t\t\t\t\tcheck: 'Int', \n\t\t\t\t},],\n\t\t\t\tcolour: 220,\n\t\t\t\ttooltip: 'TestData',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst num = `'${block.getFieldValue('NUM')}'`;\n\t\tconst code = `test_num = ${num}<br />`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n\n// Category : Layer\nconst ModelLayer1 = {\n\tname : 'ModelLayer1',\n\tcategory : 'Layer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 방법 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"A 방법\",\"nn.ReLU\"],\n\t\t\t\t\t\t[\"B 방법\",\"nn.LogSigmoid\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 160,\n\t\t\t\ttooltip : 'ModelLayer1',\n\t\t\t\tnextStatement : null,\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst model = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `${model}<br />`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst ModelLayer2 = {\n\tname : 'ModelLayer2',\n\tcategory : 'Layer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 방법 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"A 방법\",\"nn.ReLU\"],\n\t\t\t\t\t\t[\"B 방법\",\"nn.LogSigmoid\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 165,\n\t\t\t\ttooltip : 'ModelLayer2',\n\t\t\t\tnextStatement : null,\n\t\t\t\tpreviousStatement : null,\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst model = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `${model}<br />`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst ModelLayer3 = {\n\tname : 'ModelLayer3',\n\tcategory : 'Layer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 방법 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"A 방법\",\"nn.ReLU\"],\n\t\t\t\t\t\t[\"B 방법\",\"nn.LogSigmoid\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 170,\n\t\t\t\ttooltip : 'ModelLayer3',\n\t\t\t\tpreviousStatement : null,\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst model = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `${model}<br />`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n \n// Category : Training\nconst LearningRate = {\n\tname : 'LearningRate',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 속도 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"느리게\",\"500\"],\n\t\t\t\t\t\t[\"보통\",\"1000\"],\n\t\t\t\t\t\t[\"빠르게\",\"2000\"]\n\t\t\t\t\t],\n\t\t\t\t},],\n\t\t\t\tcolour : 110,\n\t\t\t\ttooltip : 'LearningRate',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst select = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `learning_rate = ${select}<br />`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst Epochs = {\n\tname : 'Epochs',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '복습 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"한다\",\"1\"],\n\t\t\t\t\t\t[\"안한다\",\"2\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 120,\n\t\t\t\ttooltip : 'Epochs',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst select = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `num_epochs = ${select}<br />`;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n\nconst blocks = [\n\tTrainData, \n\tTestData, \n\tModelLayer1, \n\tModelLayer2,\n\tModelLayer3,\n\tLearningRate,\n\tEpochs\n]\n\nexport {\n\tblocks\n};"]},"metadata":{},"sourceType":"module"}