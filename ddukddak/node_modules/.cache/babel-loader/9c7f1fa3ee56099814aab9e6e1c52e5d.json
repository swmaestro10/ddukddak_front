{"ast":null,"code":"//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_dummy',\n//\t\t\t\t\t\t},\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_value',\n//\t\t\t\t\t\t\tname : 'number_b',\n//\t\t\t\t\t\t\tcheck : 'Number'\n//\t\t\t\t\t\t}\n//\t\t\t\t\tinputsInline : true,\n//\t\t\t\t\toutput: 'String',\n//\t\t\t\t\tnextStatement : null,\n//\t\t\t\t\tpreviousStatement : null,\nimport Blockly from 'node-blockly/browser'; // Category : Data\n\nconst data = {\n  name: 'Data',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 %1 테스트 %2',\n        args0: [{\n          \"type\": \"input_value\",\n          \"name\": \"train\"\n        }, {\n          \"type\": \"input_value\",\n          \"name\": \"test\"\n        }],\n        nextStatement: null,\n        colour: 200,\n        tooltip: 'Data'\n      });\n    }\n  }\n};\nconst trainData = {\n  name: 'TrainData',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 데이터 %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NUM',\n          check: 'String'\n        }],\n        output: 'String',\n        colour: 210,\n        tooltip: 'TrainData'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('NUM'), \"'\") || '\\'\\'';\n    const code = \"training_num=\".concat(message, \" \");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst testData = {\n  name: 'TestData',\n  category: 'Data',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '테스트 데이터 %1',\n        args0: [{\n          type: 'field_input',\n          name: 'NUM',\n          check: 'String'\n        }],\n        output: 'String',\n        colour: 220,\n        tooltip: 'TestData'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('NUM'), \"'\") || '\\'\\'';\n    const code = \"test_num=\".concat(message, \" \");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n}; // Category : Layer\n\nconst model = {\n  name: 'Model',\n  category: 'Layer',\n  block: {\n    init: function () {\n      this.jsonInit({\n        type: 'block_type',\n        message0: 'Layer %1',\n        args0: [{\n          type: 'input_statement',\n          name: 'container'\n        }],\n        colour: 150,\n        tooltip: 'Model',\n        nextStatement: null,\n        previousStatement: null\n      });\n    }\n  }\n};\nconst modelLayer = {\n  name: 'ModelLayer',\n  category: 'Layer',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 방법 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"A\", \"nn.ReLU\"], [\"B\", \"nn.LogSigmoid\"]]\n        }],\n        colour: 165,\n        tooltip: 'ModelLayer',\n        nextStatement: null,\n        previousStatement: null\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"\".concat(message, \" \");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n}; // Category : Training\n\nconst training = {\n  name: 'training',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 %1 복습 %2',\n        args0: [{\n          type: 'input_value',\n          name: 'learn'\n        }, {\n          type: 'input_value',\n          name: 'epoch'\n        }],\n        previousStatement: null,\n        colour: 100,\n        tooltip: 'training'\n      });\n    }\n  }\n};\nconst learningRate = {\n  name: 'LearningRate',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '학습 속도 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"느리게\", \"500\"], [\"보통\", \"1000\"], [\"빠르게\", \"2000\"]]\n        }],\n        output: 'String',\n        colour: 110,\n        tooltip: 'LearningRate'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"learning_rate = \".concat(message, \" \");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst epochs = {\n  name: 'Epochs',\n  category: 'Training',\n  block: {\n    init: function () {\n      this.jsonInit({\n        message0: '복습 %1',\n        args0: [{\n          type: 'field_dropdown',\n          name: 'SELECT',\n          options: [[\"한다\", \"1\"], [\"안한다\", \"2\"]]\n        }],\n        output: 'String',\n        colour: 120,\n        tooltip: 'Epochs'\n      });\n    }\n  },\n  generator: block => {\n    const message = \"'\".concat(block.getFieldValue('SELECT'), \"'\");\n    const code = \"num_epochs = \".concat(message, \" \");\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  }\n};\nconst blocks = [data, trainData, testData, model, modelLayer, training, learningRate, epochs];\nexport { blocks };","map":{"version":3,"sources":["/home/codeup/ddukddak/ddukddak_front/ddukddak/src/container/blocks.js"],"names":["Blockly","data","name","category","block","init","jsonInit","message0","args0","nextStatement","colour","tooltip","trainData","type","check","output","generator","message","getFieldValue","code","Python","ORDER_ATOMIC","testData","model","previousStatement","modelLayer","options","training","learningRate","epochs","blocks"],"mappings":"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","sourcesContent":["//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_dummy',\n//\t\t\t\t\t\t},\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\t\ttype : 'input_value',\n//\t\t\t\t\t\t\tname : 'number_b',\n//\t\t\t\t\t\t\tcheck : 'Number'\n//\t\t\t\t\t\t}\n//\t\t\t\t\tinputsInline : true,\n//\t\t\t\t\toutput: 'String',\n//\t\t\t\t\tnextStatement : null,\n//\t\t\t\t\tpreviousStatement : null,\nimport Blockly from 'node-blockly/browser';\n\n// Category : Data\nconst data = {\n\tname : 'Data',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 %1 테스트 %2',\n\t\t\t\targs0 : [{\n\t\t\t\t\t\"type\": \"input_value\",\n\t\t\t\t\t\"name\": \"train\"\t\t   \n\t\t\t\t},{\n\t\t\t\t\t\"type\": \"input_value\",\n\t\t\t\t\t\"name\": \"test\"\t\t   \n\t\t\t\t}],\n\t\t\t\tnextStatement : null,\n\t\t\t\tcolour: 200,\n\t\t\t\ttooltip: 'Data',\n\t\t\t});\n\t\t},\n\t},\n}\nconst trainData = {\n\tname : 'TrainData',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 데이터 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype: 'field_input',\n\t\t\t\t\tname: 'NUM',\n\t\t\t\t\tcheck: 'String',\n\t\t\t\t},],\n\t\t\t\toutput: 'String',\n\t\t\t\tcolour: 210,\n\t\t\t\ttooltip: 'TrainData',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('NUM')}'` || '\\'\\'';\n\t\tconst code = `training_num=${message} `;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst testData = {\n\tname : 'TestData',\n\tcategory : 'Data',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '테스트 데이터 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype: 'field_input',\n\t\t\t\t\tname: 'NUM',\n\t\t\t\t\tcheck: 'String',\n\t\t\t\t},],\n\t\t\t\toutput: 'String',\n\t\t\t\tcolour: 220,\n\t\t\t\ttooltip: 'TestData',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('NUM')}'` || '\\'\\'';\n\t\tconst code = `test_num=${message} `;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n\n// Category : Layer\nconst model = {\n\tname : 'Model',\n\tcategory : 'Layer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\ttype : 'block_type',\n\t\t\t\tmessage0 : 'Layer %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'input_statement',\n\t\t\t\t\tname : 'container'\t\n\t\t\t\t},],\n\t\t\t\tcolour : 150,\n\t\t\t\ttooltip : 'Model',\n\t\t\t\tnextStatement : null,\n\t\t\t\tpreviousStatement : null,\n\t\t\t});\n\t\t},\n\t},\n}\nconst modelLayer = {\n\tname : 'ModelLayer',\n\tcategory : 'Layer',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 방법 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"A\",\"nn.ReLU\"],\n\t\t\t\t\t\t[\"B\",\"nn.LogSigmoid\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\tcolour : 165,\n\t\t\t\ttooltip : 'ModelLayer',\n\t\t\t\tnextStatement : null,\n\t\t\t\tpreviousStatement : null,\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `${message} `;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n// Category : Training\nconst training = {\n\tname : 'training',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 %1 복습 %2',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'input_value',\n\t\t\t\t\tname : 'learn',\n\t\t\t\t},{\n\t\t\t\t\ttype : 'input_value',\n\t\t\t\t\tname : 'epoch',\n\t\t\t\t}],\n\t\t\t\tpreviousStatement : null,\n\t\t\t\tcolour : 100,\n\t\t\t\ttooltip : 'training',\n\t\t\t});\n\t\t},\n\t},\n}\n\nconst learningRate = {\n\tname : 'LearningRate',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '학습 속도 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"느리게\",\"500\"],\n\t\t\t\t\t\t[\"보통\",\"1000\"],\n\t\t\t\t\t\t[\"빠르게\",\"2000\"]\n\t\t\t\t\t],\n\t\t\t\t},],\n\t\t\t\toutput: 'String',\n\t\t\t\tcolour : 110,\n\t\t\t\ttooltip : 'LearningRate',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `learning_rate = ${message} `;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\nconst epochs = {\n\tname : 'Epochs',\n\tcategory : 'Training',\n\tblock : {\n\t\tinit : function() {\n\t\t\tthis.jsonInit({\n\t\t\t\tmessage0 : '복습 %1',\n\t\t\t\targs0 : [{\n\t\t\t\t\ttype : 'field_dropdown',\n\t\t\t\t\tname : 'SELECT',\n\t\t\t\t\toptions : [\n\t\t\t\t\t\t[\"한다\",\"1\"],\n\t\t\t\t\t\t[\"안한다\",\"2\"]\n\t\t\t\t\t],\t\t\t\t\t\n\t\t\t\t},],\n\t\t\t\toutput: 'String',\n\t\t\t\tcolour : 120,\n\t\t\t\ttooltip : 'Epochs',\n\t\t\t});\n\t\t},\n\t},\n\tgenerator : (block) => {\n\t\tconst message = `'${block.getFieldValue('SELECT')}'`;\n\t\tconst code = `num_epochs = ${message} `;\n\t\treturn [code, Blockly.Python.ORDER_ATOMIC];\n\t},\n};\n\nconst blocks =[\n\tdata,\n\ttrainData, \n\ttestData,\n\tmodel, \n\tmodelLayer, \n\ttraining,\n\tlearningRate,\n\tepochs\n]\nexport {\n\tblocks\n};"]},"metadata":{},"sourceType":"module"}